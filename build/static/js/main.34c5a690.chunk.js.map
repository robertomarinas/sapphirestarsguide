{"version":3,"sources":["reducers/rootReducer.js","reducers/reducer_getWeaponList.js","reducers/reducer_getArmorList.js","reducers/reducer_getCharmList.js","reducers/reducer_getDecorationList.js","reducers/reducer_getSkillsList.js","actions/action_getWeaponList.js","actions/action_getArmorList.js","actions/action_getCharmList.js","actions/action_getDecorationList.js","actions/action_getSkillsList.js","components/component_key_results.js","components/component_search_button_svg.js","components/component_main_search.js","components/component_slot_search.js","components/component_weapon_search.js","components/component_armor_part_search.js","components/component_armor_part.js","components/component_charm_search.js","components/component_armorLoadoutBuilder.js","components/component_skills_list.js","components/component_attack_status.js","components/component_element_status.js","components/component_sharpness_status.js","components/component_affinity_status.js","components/component_status_list.js","components/component_hunter_status.js","App.js","serviceWorker.js","index.js","store.js"],"names":["combineReducers","weaponListReducer","state","arguments","length","undefined","action","type","result","payload","armorListReducer","charmListReducer","decorationListReducer","skillsListReducer","weaponList","JSON","stringify","weaponJSON","getWeaponList","dispatch","parse","armorList","armorJSON","getArmorList","charmList","charmJSON","getCharmList","decorationList","decorationJSON","getDecorationList","skillsList","skillsJSON","getSkillsList","KeyResults","props","keyResult","gearList","radioSelect","map","gear","index","react_default","a","createElement","key","className","armorType","data-selected-index","data-armor-type","data-selected-armor","armor","data-search-bar","onClick","onSelectedArmor","skills","skill","concat","skillName","level","keyResultsClasses","keyResultShow","onResultsToggle","SearchButtonSVG","width","height","version","viewBox","xmlns","fill","transform","d","strokeWidth","MainSearch","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onInputSearch","e","setState","searchVal","target","value","patternMatch","RegExp","keyMatchedArr","forEach","test","name","slug","toConsumableArray","sort","b","onRadioChange","onButtonSubmit","console","log","prevState","placeholder","onChange","component_search_button_svg","checked","component_key_results","Component","SlotSearch","slotRank","decoType","selected","data-slot-rank","data-part","part","data-slot-index","slotIndex","onRemoveDecoPiece","onFocus","onFocusSlotSearch","onDecoInputSearch","searchString","WeaponSearch","armorPartContent","mapSlots","decoSearchResults","decoSearchResultsContainer","selectedArmorSet","_props$selectedArmorS","partDecos","decoResults","_props$selectedArmorS2","slots","updateClass","slot","component_slot_search","rank","active","onSelectedDeco","data-armor-piece","onRemoveArmorPiece","res","data-deco-name","data-deco-index","data-deco-id","id","onFocusPartSearch","onWeaponInputSearch","weapon","weaponSearchResults","ArmorPartSearch","placeHolder","armorPart","onBlurSearch","onFocusContainer","onBlurContainer","data-deco-level","onInputPartSearch","armorSearchResults","ArmorPart","armorPiece","headPieces","component_armor_part_search","armorPieces","clearedArmorPart","chestPieces","glovesPieces","waistPieces","legsPieces","CharmSearch","charmSearchResults","onCharmInputSearch","ArmorLoadoutBuilder","component_weapon_search","component_armor_part","component_charm_search","SkillsList","displayActiveSkills","AttackStatus","selectedWeapon","attackModifiers","weaponModifier","selectedWeaponDisplay","modifiedAttack","rawDamage","selectedWeaponModifier","skillModifier","weaponType","display","attack","entries","modifier","Math","round","ElementStatus","elementalRating","elements","elem","ifHiddenClass","hidden","damage","SharpnessStatus","weaponSharpness","sharpnessClassNames","sharpness","color","style","backgroundColor","AffinityStatus","affinityModifiers","totalAffinity","StatusList","activeArmorSkills","activeSkillsText","activeDefenseObj","defense","activeResistancesObj","fire","water","ice","thunder","dragon","hunterStatusModifiers","affinity","element","resistance","activeParts","piece","baseDefense","base","resistances","sign","ranks","percent","pattern","modifiers","displayDefenseStatus","displayResistanceStatus","component_attack_status","component_element_status","component_sharpness_status","component_affinity_status","HunterStatus","_this$props","armorSkill","description","objectSpread","defineProperty","deco","currentValueClass","ranksIndex","component_skills_list","component_status_list","App","onSelectedWeapon","weaponName","getAttribute","updatedActivePartsArray","activePartsRegEx","activePartsText","toString","decoState","results","decoIndex","parseInt","_this$state$selectedA","updatePartDecos","onSelectedCharm","charmName","parentIndex","charm","armorName","searchBar","selectedArmor","head","chest","gloves","waist","legs","equipmentPart","decoPieces","weaponPieces","data-selected-weapon","charmPieces","charmRanks","data-selected-rank","data-parent-index","data-index","filter","activeSkills","selectedDecoList","pieces","decoSearchString","prevProps","snapshot","_this2","component_main_search","component_armorLoadoutBuilder","component_hunter_status","connect","Boolean","window","location","hostname","match","ReactDOM","render","es","store","initialState","createStore","rootReducer","applyMiddleware","thunk","configureStore","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.34c5a690.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\r\nimport weaponListReducer from './reducer_getWeaponList';\r\nimport armorListReducer from './reducer_getArmorList';\r\nimport charmListReducer from './reducer_getCharmList';\r\nimport decorationListReducer from './reducer_getDecorationList';\r\nimport skillsListReducer from './reducer_getSkillsList';\r\n\r\nexport default combineReducers({\r\n weaponListReducer,\r\n armorListReducer,\r\n charmListReducer,\r\n decorationListReducer,\r\n skillsListReducer\r\n});","export default (state = {}, action) => {\r\n switch (action.type) {\r\n  case 'GET_WEAPONLIST':\r\n   return {\r\n    result: action.payload\r\n   }\r\n  default:\r\n   return state\r\n }\r\n}","export default (state = {}, action) => {\r\n switch (action.type) {\r\n  case 'GET_ARMORLIST':\r\n   return {\r\n    result: action.payload\r\n   }\r\n  default:\r\n   return state\r\n }\r\n}","export default (state = {}, action) => {\r\n switch (action.type) {\r\n  case 'GET_CHARMLIST':\r\n   return {\r\n    result: action.payload\r\n   }\r\n  default:\r\n   return state\r\n }\r\n}","export default (state = {}, action) => {\r\n switch (action.type) {\r\n  case 'GET_DECORATIONLIST':\r\n   return {\r\n    result: action.payload\r\n   }\r\n  default:\r\n   return state\r\n }\r\n}","export default (state = {}, action) => {\r\n switch (action.type) {\r\n  case 'GET_SKILLSLIST':\r\n   return {\r\n    result: action.payload\r\n   }\r\n  default:\r\n   return state\r\n }\r\n}","// import weapon json file\r\nimport weaponJSON from '../mhw_dbWeaponList.json';\r\n\r\nconst weaponList = JSON.stringify(weaponJSON);\r\n\r\nconst getWeaponList = () => dispatch => {\r\n dispatch({\r\n  type: 'GET_WEAPONLIST',\r\n  payload: JSON.parse(weaponList)\r\n })\r\n}\r\n\r\nexport default getWeaponList;\r\n","// import armor json file\r\nimport armorJSON from '../mhw_dbArmorList.json';\r\n\r\nconst armorList = JSON.stringify(armorJSON);\r\n\r\nconst getArmorList = () => dispatch => {\r\n dispatch({\r\n  type: 'GET_ARMORLIST',\r\n  payload: JSON.parse(armorList)\r\n })\r\n}\r\n\r\nexport default getArmorList;","// import charm json file\r\nimport charmJSON from '../mhw_dbCharmList.json';\r\n\r\nconst charmList = JSON.stringify(charmJSON);\r\n\r\nconst getCharmList = () => dispatch => {\r\n dispatch({\r\n  type: 'GET_CHARMLIST',\r\n  payload: JSON.parse(charmList)\r\n })\r\n}\r\n\r\nexport default getCharmList;","// import decoration json file\r\nimport decorationJSON from '../mhw_dbDecorationList.json';\r\n\r\nconst decorationList = JSON.stringify(decorationJSON);\r\n\r\nconst getDecorationList = () => dispatch => {\r\n dispatch({\r\n  type: 'GET_DECORATIONLIST',\r\n  payload: JSON.parse(decorationList)\r\n })\r\n}\r\n\r\nexport default getDecorationList;","// import weapon json file\r\nimport skillsJSON from '../mhw_dbSkillList.json';\r\n\r\nconst skillsList = JSON.stringify(skillsJSON);\r\n\r\nconst getSkillsList = () => dispatch => {\r\n dispatch({\r\n  type: 'GET_SKILLSLIST',\r\n  payload: JSON.parse(skillsList)\r\n })\r\n}\r\n\r\nexport default getSkillsList;\r\n","import React from 'react';\r\n\r\nconst KeyResults = (props) => {\r\n\r\n\tif(props.keyResult.length === 0) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tlet gearList;\r\n\tif(props.radioSelect === 'armor') {\r\n\t\tgearList = props.keyResult.map((gear, index) => <li key={index}><button className={gear.armorType} data-selected-index={gear.index} data-armor-type={gear.armorType} data-selected-armor={gear.armor} data-search-bar=\"main-search\" onClick={props.onSelectedArmor}>{gear.armor}</button></li>);\r\n\t} else if(props.radioSelect === 'skill') {\r\n\t\tgearList = props.keyResult.map((gear, index) => {\r\n\t\t\treturn (\r\n\t\t\t\t<li key={index}>\r\n\t\t\t\t\t<button className={gear.armorType} data-selected-index={gear.index} data-armor-type={gear.armorType} data-selected-armor={gear.armor} data-search-bar=\"main-search\" onClick={props.onSelectedArmor}>\r\n\t\t\t\t\t\t{gear.armor} - { gear.skills.map((skill, index) => `${skill.skillName}: ${skill.level}` )}\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</li>\r\n\t\t\t)\r\n\t\t});\r\n\t}\r\n\r\n\tconst keyResultsClasses = props.keyResultShow ? 'key-results show' : 'key-results hide';\r\n\r\n\treturn (\r\n\t\t<div className=\"key-results-container\">\r\n\t\t\t<button className=\"key-results-container-toggle\" onClick={props.onResultsToggle}>Toggle Results</button>\r\n\t\t\t<ul className={keyResultsClasses}>{ gearList }</ul>\r\n\t\t</div>\r\n\t)\r\n\r\n}\r\n\r\nexport default KeyResults;","import React from 'react';\r\n\r\nconst SearchButtonSVG = (props) => {\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<svg width={props.width} height={props.height} version=\"1.1\" viewBox=\"0 0 13.229 13.229\" xmlns=\"http://www.w3.org/2000/svg\">\r\n\t\t\t <g fill=\"#ccc\" transform=\"translate(0 -283.77)\">\r\n\t\t\t  <path d=\"m11.598 296.7c-0.2184-0.1007-3.6995-3.1475-3.7906-3.3178-0.04767-0.0892-0.087966-0.0787-0.4568 0.11824-0.6949 0.37097-1.2459 0.51495-2.0946 0.54736-1.0411 0.0397-1.7178-0.10547-2.5951-0.55666-1.1696-0.6016-2.1552-1.8577-2.5117-3.201-0.17908-0.67493-0.16902-1.7669 0.022966-2.4913 0.47341-1.7863 1.8762-3.1511 3.7105-3.61 0.57711-0.14437 1.8042-0.12798 2.393 0.032 1.6426 0.44629 2.9546 1.6797 3.4875 3.2786 0.39982 1.1996 0.32892 2.5045-0.19881 3.659l-0.20557 0.44973 0.13249 0.0927c0.07287 0.0511 0.34716 0.28375 0.60954 0.51715 0.26238 0.2334 1.0364 0.92071 1.72 1.5274 0.68362 0.60666 1.2777 1.1711 1.3202 1.2543 0.23809 0.46602 0.15443 0.84367-0.29093 1.3133-0.46364 0.48885-0.8033 0.59386-1.252 0.38706zm-5.5459-4.6977c0.69776-0.25041 1.3872-0.85561 1.7305-1.519 0.36739-0.70997 0.43272-1.5993 0.17381-2.3662-0.65221-1.9317-2.911-2.7472-4.6026-1.6617-0.33992 0.21814-0.83648 0.73302-1.031 1.069-0.39106 0.67558-0.51434 1.6526-0.29961 2.3746 0.31359 1.0543 1.1434 1.881 2.1888 2.1806 0.41384 0.11859 1.4109 0.0767 1.84-0.0773z\" strokeWidth=\".055873\"/>\r\n\t\t\t </g>\r\n\t\t\t</svg>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SearchButtonSVG;","import React, { Component } from 'react';\r\nimport KeyResults from './component_key_results';\r\n// importing svgs\r\nimport SearchButtonSVG from './component_search_button_svg';\r\n\r\nclass MainSearch extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tsearchVal: \"\",\r\n\t\t\tradioSelect: \"armor\",\r\n\t\t\tkeyResult: [],\r\n\t\t\tkeyResultShow: true\r\n\t\t}\r\n\t}\r\n\r\n\tonInputSearch = (e) => {\r\n\t\t\r\n\t\tthis.setState({ searchVal: e.target.value });\r\n\t\t// const mainSearchInput = e.target.value;\r\n\r\n\t\tif(e.target.value === \"\") {\r\n\t\t\tthis.setState({ keyResult: [] });\r\n\t\t\treturn;\r\n\t\t} \r\n\r\n\t\tconst patternMatch = new RegExp(`^${e.target.value}`, \"i\");\r\n\r\n\t\tlet keyMatchedArr = [];\r\n\r\n\t\tif(this.state.radioSelect === 'armor') {\r\n\t\t\tthis.props.armorList.forEach((gear, index) => {\r\n\t\t\t\tif(patternMatch.test(gear.name)) {\r\n\t\t\t\t\tkeyMatchedArr = [ { armor: gear.name, slug: gear.slug, armorType: gear.type, index }, ...keyMatchedArr ]\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tkeyMatchedArr.sort((a,b) => a.armor > b.armor ? 1 : -1);\r\n\r\n\t\t} else if (this.state.radioSelect === 'skill') {\r\n\t\t\tthis.props.armorList.forEach((gear, index) => {\r\n\t\t\t\tgear.skills.forEach(skill => {\r\n\t\t\t\t\tif(patternMatch.test(skill.skillName)) {\r\n\t\t\t\t\t\tkeyMatchedArr = [ { armor: gear.name, slug: gear.slug, armorType: gear.type, level: skill.level, index, skills: [ ...gear.skills ] }, ...keyMatchedArr ]\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t});\r\n\r\n\t\t\tkeyMatchedArr.sort((a,b) => b.level - a.level);\r\n\t\t}\r\n\r\n\t\tthis.setState({ keyResult: keyMatchedArr });\r\n\r\n\t\t// this.setState(prevState => ({\r\n\t\t// \t...prevState,\r\n\t\t// \tkeyResult: keyMatchedArr\r\n\t\t// }));\r\n\t}\r\n\r\n\tonRadioChange = (e) => {\r\n\t\tthis.setState({ searchVal: \"\" });\r\n\t\tthis.setState({ keyResult: [] });\r\n\t\tthis.setState({ radioSelect: e.target.value });\r\n\t}\r\n\r\n\tonButtonSubmit = (e) => {\r\n\t\tif(this.state.searchVal === \"\") {\r\n\t\t\tconsole.log('Input field is empty. Please enter your search keywords.');\r\n\t\t\treturn;\r\n\t\t} else if(this.state.keyResult.length === 0) {\r\n\t\t\tconsole.log('Your search keywords did not match anything.');\r\n\t\t\treturn;\r\n\t\t} else {\r\n\t\t\tconsole.log('Search keywords matched! Please select from the search results.');\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\r\n\tonResultsToggle = (e) => {\r\n\t\tthis.setState(prevState => ({ keyResultShow: !prevState.keyResultShow }));\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div className=\"search-container\">\r\n\t\t\t\t\t<div className=\"search-bar-container\">\r\n\t\t\t\t\t\t<input className=\"search-bar\" type=\"text\" placeholder={this.state.radioSelect === 'armor' ? 'e.g. DragonKing Eyepatch Alpha' : 'e.g. Weakness Exploit'} onChange={this.onInputSearch} value={this.state.searchVal} />\r\n\t\t\t\t\t\t<button className=\"search-btn\" onClick={this.onButtonSubmit}><SearchButtonSVG width={25} height={25} /></button>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div className=\"advanced-search-container\">\r\n\t\t\t\t\t\t<p>Search By: <span><input type=\"radio\" name=\"searchBy\" onChange={this.onRadioChange} checked={this.state.radioSelect === \"armor\"} value=\"armor\"/>Armor</span> <span><input type=\"radio\" name=\"searchBy\" onChange={this.onRadioChange} checked={this.state.radioSelect === \"skill\"} value=\"skill\"/>Skill</span></p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t\r\n\t\t\t\t\t<KeyResults keyResult={this.state.keyResult} radioSelect={this.state.radioSelect} onSelectedArmor={this.props.onSelectedArmor} onResultsToggle={this.onResultsToggle} keyResultShow={this.state.keyResultShow} />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t)\t\r\n\t}\r\n}\r\n\r\nexport default MainSearch;\r\n","import React from 'react';\r\n//importing components\r\n// import DecoSlotOne from './component_decoSlotOne_svg';\r\n// import DecoSlotTwo from './component_decoSlotTwo_svg';\r\n// import DecoSlotThree from './component_decoSlotThree_svg';\r\n\r\nconst SlotSearch = (props) => {\r\n\r\n\tconst { slotRank } = props;\r\n\tlet decoType = '';\r\n\r\n\tswitch (slotRank) {\r\n\t\tcase 1:\r\n\t\t\tdecoType = 'slot-one';\r\n\t\t\tbreak;\r\n\t\tcase 2:\r\n\t\t\tdecoType = 'slot-two';\r\n\t\t\tbreak;\r\n\t\tcase 3:\r\n\t\t\tdecoType = 'slot-three';\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\tif(props.selected.skillName) {\r\n\t\treturn <div className=\"slot-container selected\"><span className={decoType}>{props.selected.skillName}</span><button className=\"clear-button selected\" data-slot-rank={slotRank} data-part={props.part} data-slot-index={props.slotIndex} onClick={props.onRemoveDecoPiece}></button></div>\r\n\t}\r\n\t\r\n\treturn (\r\n\t\t<div className=\"slot-container\">\r\n\t\t\t<input className={decoType} data-slot-rank={slotRank} data-part={props.part} data-slot-index={props.slotIndex} onFocus={props.onFocusSlotSearch} onChange={props.onDecoInputSearch} value={props.selected.searchString} />\r\n\t\t\t<button className=\"clear-button\" data-slot-rank={slotRank} data-part={props.part} data-slot-index={props.slotIndex} onClick={props.onRemoveDecoPiece}>clear</button>\r\n\t\t</div>\r\n\t)\r\n\t\r\n}\r\n\r\nexport default SlotSearch;","import React from 'react';\r\n// import components\r\nimport SlotSearch from './component_slot_search';\r\n\r\nconst WeaponSearch = (props) => {\r\n\r\n\tlet armorPartContent = '';\r\n\tlet mapSlots = '';\r\n\tlet decoSearchResults = '';\r\n\tlet decoSearchResultsContainer = '';\r\n\r\n\tif(props.selectedArmorSet['weapon']['selected'] !== null) {\r\n\t\tconst { partDecos, decoResults } = props.selectedArmorSet['weapon'];\r\n\t\tconst { type, slots } = props.selectedArmorSet['weapon']['selected'];\r\n\r\n\t\tconst updateClass = `input-container selected ${type}`;\r\n\r\n\t\tif(slots.length > 0) {\r\n\r\n\t\t\tmapSlots = partDecos.map((slot, index) => {\r\n\t\t\t\treturn <SlotSearch key={index} slotIndex={index} slotRank={slot.rank} active={slot.active} part=\"weapon\" decorationList={props.decorationList} selected={partDecos[index]} decoResults={decoResults} onDecoInputSearch={props.onDecoInputSearch} onFocusSlotSearch={props.onFocusSlotSearch} onSelectedDeco={props.onSelectedDeco} onRemoveDecoPiece={props.onRemoveDecoPiece} />\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tarmorPartContent = <div className={updateClass}>\r\n\t\t<label>{props.selectedArmorSet['weapon']['selected']['name']}</label>\r\n\t\t<button className=\"clear-button selected\" data-armor-piece=\"weapon\" onClick={props.onRemoveArmorPiece} /></div>\r\n\r\n\t\tpartDecos.forEach((slot, slotIndex) => {\r\n\t\t\tif(slot.active) {\r\n\t\t\t\tdecoSearchResults = decoResults.map((res,index) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<li key={index}>\r\n\t\t\t\t\t\t\t<button data-deco-name={res.skillName} data-part='weapon' data-deco-index={index} data-deco-id={res.id} data-slot-rank={res.slot} data-slot-index={slotIndex} onClick={props.onSelectedDeco} >\r\n\t\t\t\t\t\t\t\t{res.skillName}\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t)\r\n\t\t\t\t});\r\n\r\n\t\t\t\tdecoSearchResultsContainer = <ul className=\"slots-search-results\">{decoSearchResults}</ul>;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t});\r\n\r\n\t} else {\r\n\r\n\t\tarmorPartContent = <div className=\"input-container\">\r\n\t\t\t\t<input className=\"weapon-default\" type=\"text\" placeholder='Wyvern Ignition \"Impact\"' onFocus={props.onFocusPartSearch} onChange={props.onWeaponInputSearch} value={props.selectedArmorSet.weapon.searchString} />\r\n\t\t\t\t<button className=\"clear-button\" data-armor-piece=\"weapon\" onClick={props.onRemoveArmorPiece} >clear</button>\r\n\t\t\t</div>;\r\n\t}\r\n\r\n\tconst weaponSearchResults = props.selectedArmorSet['weapon']['results'].length > 0 ? <ul className=\"armor-part-search-result\">{props.selectedArmorSet['weapon']['results']}</ul> : '';\r\n\r\n\treturn (\r\n\t\t<div className=\"armor-part-container\">\r\n\t\t\t{armorPartContent}\r\n\t\t\t<div className=\"slots-container\">\r\n\t\t\t\t{mapSlots}\r\n\t\t\t\t{decoSearchResultsContainer}\r\n\t\t\t</div>\r\n\t\t\t{weaponSearchResults}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default WeaponSearch;","import React from 'react';\r\n// import components\r\nimport SlotSearch from './component_slot_search';\r\n\r\nconst ArmorPartSearch = (props) => {\r\n\r\n\tlet armorPartContent = '';\r\n\tlet mapSlots = '';\r\n\tlet decoSearchResults = '';\r\n\tlet decoSearchResultsContainer = '';\r\n\tlet placeHolder = '';\r\n\r\n\tswitch (props.armorPart) {\r\n\r\n\t\tcase 'head':\r\n\t\t\tplaceHolder = 'Kulve Taroth\\'s Fury Beta';\r\n\t\t\tbreak;\r\n\t\tcase 'chest':\r\n\t\t\tplaceHolder = 'Kulve Taroth\\'s Ire Beta';\r\n\t\t\tbreak;\r\n\t\tcase 'gloves':\r\n\t\t\tplaceHolder = 'Kulve Taroth\\'s Rage Beta';\r\n\t\t\tbreak;\r\n\t\tcase 'waist':\r\n\t\t\tplaceHolder = 'Kulve Taroth\\'s Malice Beta';\r\n\t\t\tbreak;\r\n\t\tcase 'legs':\r\n\t\t\tplaceHolder = 'Kulve Taroth\\'s Wrath Beta';\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\tif(props.selectedArmorSet[props.armorPart]['selected'] !== null) {\r\n\t\tconst { partDecos, decoResults } = props.selectedArmorSet[props.armorPart];\r\n\t\tconst { type, slots } = props.selectedArmorSet[props.armorPart]['selected'];\r\n\r\n\t\tconst updateClass = `input-container selected ${type}`;\r\n\r\n\t\tif(slots.length > 0) {\r\n\r\n\t\t\tmapSlots = partDecos.map((slot, index) => {\r\n\t\t\t\treturn <SlotSearch key={index} slotIndex={index} slotRank={slot.rank} active={slot.active} part={props.armorPart} decorationList={props.decorationList} selected={partDecos[index]} decoResults={decoResults} onDecoInputSearch={props.onDecoInputSearch} onFocusSlotSearch={props.onFocusSlotSearch} onBlurSearch={props.onBlurSearch} onFocusContainer={props.onFocusContainer} onBlurContainer={props.onBlurContainer} onSelectedDeco={props.onSelectedDeco} onRemoveDecoPiece={props.onRemoveDecoPiece} />\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tarmorPartContent = <div className={updateClass}>\r\n\t\t<label>{props.selectedArmorSet[props.armorPart]['selected']['name']}</label>\r\n\t\t<button className=\"clear-button selected\" data-armor-piece={props.armorPart} onClick={props.onRemoveArmorPiece} /></div>\r\n\r\n\t\tpartDecos.forEach((slot, slotIndex) => {\r\n\t\t\tif(slot.active && decoResults.length > 0) {\r\n\t\t\t\tdecoSearchResults = decoResults.map((res,index) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<li key={index}>\r\n\t\t\t\t\t\t\t<button data-deco-name={res.skillName} data-part={props.armorPart} data-deco-index={index} data-deco-id={res.id} data-deco-level={res.level} data-slot-rank={res.slot} data-slot-index={slotIndex} onClick={props.onSelectedDeco} >\r\n\t\t\t\t\t\t\t\t{res.skillName}\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t)\r\n\t\t\t\t});\r\n\r\n\t\t\t\tdecoSearchResultsContainer = <ul className=\"slots-search-results\">{decoSearchResults}</ul>;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t});\r\n\r\n\t} else {\r\n\r\n\t\tarmorPartContent = <div className=\"input-container\">\r\n\t\t\t\t<input className={props.armorPart} type=\"text\" data-armor-type={props.armorPart} onChange={props.onInputPartSearch} onFocus={props.onFocusPartSearch} placeholder={placeHolder} value={props.selectedArmorSet[props.armorPart]['searchString']} />\r\n\t\t\t\t<button className=\"clear-button\" data-armor-piece={props.armorPart} onClick={props.onRemoveArmorPiece} >clear</button>\r\n\t\t\t</div>;\r\n\t}\r\n\r\n\tconst armorSearchResults = props.selectedArmorSet[props.armorPart]['results'].length > 0 ? <ul className=\"armor-part-search-result\">{props.selectedArmorSet[props.armorPart]['results']}</ul> : '';\r\n\r\n\treturn (\r\n\t\t<div className=\"armor-part-container\">\r\n\t\t\t{armorPartContent}\r\n\t\t\t<div className=\"slots-container\">\r\n\t\t\t\t{mapSlots}\r\n\t\t\t\t{decoSearchResultsContainer}\r\n\t\t\t</div>\r\n\t\t\t{armorSearchResults}\r\n\t\t</div>\r\n\t)\r\n\r\n\t// let placeHolder = '';\r\n\r\n\t// switch (props.armorPart) {\r\n\r\n\t// \tcase 'head':\r\n\t// \t\tplaceHolder = 'Kulve Taroth\\'s Fury Beta';\r\n\t// \t\tbreak;\r\n\t// \tcase 'chest':\r\n\t// \t\tplaceHolder = 'Kulve Taroth\\'s Ire Beta';\r\n\t// \t\tbreak;\r\n\t// \tcase 'gloves':\r\n\t// \t\tplaceHolder = 'Kulve Taroth\\'s Rage Beta';\r\n\t// \t\tbreak;\r\n\t// \tcase 'waist':\r\n\t// \t\tplaceHolder = 'Kulve Taroth\\'s Malice Beta';\r\n\t// \t\tbreak;\r\n\t// \tcase 'legs':\r\n\t// \t\tplaceHolder = 'Kulve Taroth\\'s Wrath Beta';\r\n\t// \t\tbreak;\r\n\t// \tdefault:\r\n\t// \t\tbreak;\r\n\t// }\r\n\r\n\t// const armorPartSearchResults = props.selectedArmorSet[props.armorPart]['results'].length > 0 ? <ul className=\"armor-part-search-result\">{props.selectedArmorSet[props.armorPart]['results']}</ul> : '';\r\n\r\n\t// return (\r\n\t// \t<div className=\"armor-part-container\">\r\n\t// \t\t<input type=\"text\" data-armor-type={props.armorPart} onChange={props.onInputPartSearch} onFocus={props.onFocusPartSearch} placeholder={placeHolder} value={props.selectedArmorSet[props.armorPart]['searchString']} />\r\n\t\t\t\r\n\t// \t\t{armorPartSearchResults}\r\n\t\t\t\r\n\t// \t</div>\r\n\t// )\r\n}\r\n\r\nexport default ArmorPartSearch;","import React from 'react';\r\n// import components\r\nimport ArmorPartSearch from './component_armor_part_search';\r\n\r\nconst ArmorPart = (props) => {\r\n\t\r\n\tlet armorPiece = \"\";\r\n\r\n\tswitch (props.armorPiece) {\r\n\r\n\t\tcase 'head': \r\n\r\n\t\t\tlet headPieces = [];\r\n\r\n\t\t\tprops.armorList.forEach((armor, index) => {\r\n\t\t\t\tif(armor.armorType === 'head') {\r\n\t\t\t\t\theadPieces = [{ name: armor.name, slug: armor.slug, armorType: armor.armorType}, ...headPieces];\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tarmorPiece = <ArmorPartSearch armorPieces={headPieces} armorPart=\"head\" clearedArmorPart={props.clearedArmorPart} selectedArmorSet={props.selectedArmorSet} onInputPartSearch={props.onInputPartSearch} onFocusPartSearch={props.onFocusPartSearch} onSelectedArmor={props.onSelectedArmor} onSelectedDeco={props.onSelectedDeco} onFocusSlotSearch={props.onFocusSlotSearch} onBlurSearch={props.onBlurSearch} onBlurContainer={props.onBlurContainer} onFocusContainer={props.onFocusContainer} onDecoInputSearch={props.onDecoInputSearch} onRemoveDecoPiece={props.onRemoveDecoPiece} onRemoveArmorPiece={props.onRemoveArmorPiece} />\r\n\t\t\t\r\n\t\t\tbreak;\r\n\t\t\r\n\t\tcase 'chest':\r\n\t\t\tlet chestPieces = [];\r\n\t\t\tprops.armorList.forEach((armor, index) => {\r\n\t\t\t\tif(armor.armorType === 'chest') {\r\n\t\t\t\t\tchestPieces = [{ name: armor.name, slug: armor.slug, armorType: armor.armorType}, ...chestPieces];\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tarmorPiece = <ArmorPartSearch armorPieces={chestPieces} armorPart=\"chest\" clearedArmorPart={props.clearedArmorPart} selectedArmorSet={props.selectedArmorSet} onInputPartSearch={props.onInputPartSearch} onFocusPartSearch={props.onFocusPartSearch} onSelectedArmor={props.onSelectedArmor} onSelectedDeco={props.onSelectedDeco} onFocusSlotSearch={props.onFocusSlotSearch} onBlurSearch={props.onBlurSearch} onBlurContainer={props.onBlurContainer} onFocusContainer={props.onFocusContainer} onDecoInputSearch={props.onDecoInputSearch} onRemoveDecoPiece={props.onRemoveDecoPiece} onRemoveArmorPiece={props.onRemoveArmorPiece} />\r\n\r\n\t\t\tbreak;\r\n\t\t\r\n\t\tcase 'gloves':\r\n\t\t\tlet glovesPieces = [];\r\n\t\t\tprops.armorList.forEach((armor, index) => {\r\n\t\t\t\tif(armor.armorType === 'gloves') {\r\n\t\t\t\t\tglovesPieces = [{ name: armor.name, slug: armor.slug, armorType: armor.armorType}, ...glovesPieces];\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tarmorPiece = <ArmorPartSearch armorPieces={glovesPieces} armorPart=\"gloves\" clearedArmorPart={props.clearedArmorPart} selectedArmorSet={props.selectedArmorSet} onInputPartSearch={props.onInputPartSearch} onFocusPartSearch={props.onFocusPartSearch} onSelectedArmor={props.onSelectedArmor} onSelectedDeco={props.onSelectedDeco} onFocusSlotSearch={props.onFocusSlotSearch} onBlurSearch={props.onBlurSearch} onBlurContainer={props.onBlurContainer} onFocusContainer={props.onFocusContainer} onDecoInputSearch={props.onDecoInputSearch} onRemoveDecoPiece={props.onRemoveDecoPiece} onRemoveArmorPiece={props.onRemoveArmorPiece} />\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'waist':\r\n\t\t\tlet waistPieces = [];\r\n\t\t\tprops.armorList.forEach((armor, index) => {\r\n\t\t\t\tif(armor.armorType === 'waist') {\r\n\t\t\t\t\twaistPieces = [{ name: armor.name, slug: armor.slug, armorType: armor.armorType}, ...waistPieces];\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tarmorPiece = <ArmorPartSearch armorPieces={waistPieces} armorPart=\"waist\" clearedArmorPart={props.clearedArmorPart} selectedArmorSet={props.selectedArmorSet} onInputPartSearch={props.onInputPartSearch} onFocusPartSearch={props.onFocusPartSearch} onSelectedArmor={props.onSelectedArmor} onSelectedDeco={props.onSelectedDeco} onFocusSlotSearch={props.onFocusSlotSearch} onBlurSearch={props.onBlurSearch} onBlurContainer={props.onBlurContainer} onFocusContainer={props.onFocusContainer} onDecoInputSearch={props.onDecoInputSearch} onRemoveDecoPiece={props.onRemoveDecoPiece} onRemoveArmorPiece={props.onRemoveArmorPiece} />\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'legs':\r\n\t\t\tlet legsPieces = [];\r\n\t\t\tprops.armorList.forEach((armor, index) => {\r\n\t\t\t\tif(armor.armorType === 'legs') {\r\n\t\t\t\t\tlegsPieces = [{ name: armor.name, slug: armor.slug, armorType: armor.armorType}, ...legsPieces];\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tarmorPiece = <ArmorPartSearch armorPieces={legsPieces} armorPart=\"legs\" clearedArmorPart={props.clearedArmorPart} selectedArmorSet={props.selectedArmorSet} onInputPartSearch={props.onInputPartSearch} onFocusPartSearch={props.onFocusPartSearch} onSelectedArmor={props.onSelectedArmor} onSelectedDeco={props.onSelectedDeco} onFocusSlotSearch={props.onFocusSlotSearch} onBlurSearch={props.onBlurSearch} onBlurContainer={props.onBlurContainer} onFocusContainer={props.onFocusContainer} onDecoInputSearch={props.onDecoInputSearch} onRemoveDecoPiece={props.onRemoveDecoPiece} onRemoveArmorPiece={props.onRemoveArmorPiece} />\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\r\n\t}\r\n\r\n\treturn armorPiece\r\n\t\r\n}\r\n\r\nexport default ArmorPart;","import React from 'react';\r\n\r\nconst CharmSearch = (props) => {\r\n\r\n\tlet armorPartContent = '';\r\n\tlet charmSearchResults = '';\r\n\r\n\tif(props.selectedArmorSet['charm']['selected'] !== null) {\r\n\t\t// return <p>{props.selectedArmorSet['charm']['selected']['name']}</p>\r\n\t\tarmorPartContent = <div className=\"input-container selected charm\">\r\n\t\t<label>{props.selectedArmorSet['charm']['selected']['name']}</label>\r\n\t\t<button className=\"clear-button selected\" data-armor-piece=\"charm\" onClick={props.onRemoveArmorPiece} /></div>\r\n\t} else {\r\n\t\tcharmSearchResults = props.selectedArmorSet['charm']['results'].length > 0 ? <ul className=\"armor-part-search-result\">{props.selectedArmorSet['charm']['results']}</ul> : '';\r\n\r\n\t\tarmorPartContent = <div className=\"input-container\">\r\n\t\t\t<input className=\"charm\" type=\"text\" placeholder=\"Attack Charm 3\" onChange={props.onCharmInputSearch} onFocus={props.onFocusPartSearch} value={props.selectedArmorSet['charm']['searchString']} />\r\n\t\t\t<button className=\"clear-button\" data-armor-piece=\"charm\" onClick={props.onRemoveArmorPiece} >clear</button>\r\n\t\t</div>;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"armor-part-container\">\r\n\t\t\t{armorPartContent}\r\n\t\t\t{charmSearchResults}\r\n\t\t</div>\r\n\t)\r\n\r\n\t// return (\r\n\t// \t<div className=\"armor-part-container\">\r\n\t// \t\t<input type=\"text\" placeholder=\"Attack Charm 3\" onChange={props.onCharmInputSearch} onFocus={props.onFocusPartSearch} />\r\n\t\t\t\r\n\t// \t\t{charmSearchResults}\r\n\t// \t</div>\r\n\t// )\r\n}\r\n\r\nexport default CharmSearch;","import React from 'react';\r\n// import components\r\nimport WeaponSearch from './component_weapon_search';\r\nimport ArmorPart from './component_armor_part';\r\nimport CharmSearch from './component_charm_search';\r\n\r\nconst ArmorLoadoutBuilder = (props) => {\r\n\r\n\treturn (\r\n\t\t<div className=\"main hunter-ui-card\">\r\n\t\t\t<h2>Equipment</h2>\r\n\r\n\t\t\t<div className=\"equipment-list\">\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\t<span className=\"selected-armor\"><WeaponSearch weaponList={props.weaponList} decorationList={props.decorationList} selectedArmorSet={props.selectedArmorSet} onSelectedArmor={props.onSelectedArmor} onSelectedDeco={props.onSelectedDeco} onWeaponInputSearch={props.onWeaponInputSearch} onDecoInputSearch={props.onDecoInputSearch} onFocusPartSearch={props.onFocusPartSearch} onFocusSlotSearch={props.onFocusSlotSearch} onBlurSearch={props.onBlurSearch} onBlurContainer={props.onBlurContainer} onFocusContainer={props.onFocusContainer} onRemoveDecoPiece={props.onRemoveDecoPiece} onRemoveArmorPiece={props.onRemoveArmorPiece} /></span>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\t<span className=\"selected-armor\"><ArmorPart armorPiece=\"head\" armorList={props.armorList} selectedArmorSet={props.selectedArmorSet}  onSelectedArmor={props.onSelectedArmor} onFocusPartSearch={props.onFocusPartSearch} onInputPartSearch={props.onInputPartSearch} onSelectedDeco={props.onSelectedDeco} onFocusSlotSearch={props.onFocusSlotSearch} onBlurSearch={props.onBlurSearch} onBlurContainer={props.onBlurContainer} onFocusContainer={props.onFocusContainer} onDecoInputSearch={props.onDecoInputSearch} onRemoveDecoPiece={props.onRemoveDecoPiece} onRemoveArmorPiece={props.onRemoveArmorPiece} /></span>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\t<span className=\"selected-armor\"><ArmorPart armorPiece=\"chest\" armorList={props.armorList} selectedArmorSet={props.selectedArmorSet}  onSelectedArmor={props.onSelectedArmor} onFocusPartSearch={props.onFocusPartSearch} onInputPartSearch={props.onInputPartSearch} onSelectedDeco={props.onSelectedDeco} onFocusSlotSearch={props.onFocusSlotSearch} onBlurSearch={props.onBlurSearch} onBlurContainer={props.onBlurContainer} onFocusContainer={props.onFocusContainer} onDecoInputSearch={props.onDecoInputSearch} onRemoveDecoPiece={props.onRemoveDecoPiece} onRemoveArmorPiece={props.onRemoveArmorPiece} /></span>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\t<span className=\"selected-armor\"><ArmorPart armorPiece=\"gloves\" armorList={props.armorList} selectedArmorSet={props.selectedArmorSet}  onSelectedArmor={props.onSelectedArmor} onFocusPartSearch={props.onFocusPartSearch} onInputPartSearch={props.onInputPartSearch} onSelectedDeco={props.onSelectedDeco} onFocusSlotSearch={props.onFocusSlotSearch} onBlurSearch={props.onBlurSearch} onBlurContainer={props.onBlurContainer} onFocusContainer={props.onFocusContainer} onDecoInputSearch={props.onDecoInputSearch} onRemoveDecoPiece={props.onRemoveDecoPiece} onRemoveArmorPiece={props.onRemoveArmorPiece} /></span>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\t<span className=\"selected-armor\"><ArmorPart armorPiece=\"waist\" armorList={props.armorList} selectedArmorSet={props.selectedArmorSet}  onSelectedArmor={props.onSelectedArmor} onFocusPartSearch={props.onFocusPartSearch} onInputPartSearch={props.onInputPartSearch} onSelectedDeco={props.onSelectedDeco} onFocusSlotSearch={props.onFocusSlotSearch} onBlurSearch={props.onBlurSearch} onBlurContainer={props.onBlurContainer} onFocusContainer={props.onFocusContainer} onDecoInputSearch={props.onDecoInputSearch} onRemoveDecoPiece={props.onRemoveDecoPiece} onRemoveArmorPiece={props.onRemoveArmorPiece} /></span>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\t<span className=\"selected-armor\"><ArmorPart armorPiece=\"legs\" armorList={props.armorList} selectedArmorSet={props.selectedArmorSet}  onSelectedArmor={props.onSelectedArmor} onFocusPartSearch={props.onFocusPartSearch} onInputPartSearch={props.onInputPartSearch} onSelectedDeco={props.onSelectedDeco} onFocusSlotSearch={props.onFocusSlotSearch} onBlurSearch={props.onBlurSearch} onBlurContainer={props.onBlurContainer} onFocusContainer={props.onFocusContainer} onDecoInputSearch={props.onDecoInputSearch} onRemoveDecoPiece={props.onRemoveDecoPiece} onRemoveArmorPiece={props.onRemoveArmorPiece} /></span>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t\t<li>\r\n\t\t\t\t\t\t<span className=\"selected-armor\"><CharmSearch selectedArmorSet={props.selectedArmorSet} onCharmInputSearch={props.onCharmInputSearch} onFocusPartSearch={props.onFocusPartSearch} onRemoveArmorPiece={props.onRemoveArmorPiece} /></span>\r\n\t\t\t\t\t</li>\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t</div>\t\t\r\n\t)\r\n}\r\n\r\nexport default ArmorLoadoutBuilder;\r\n","import React from 'react';\r\n\r\nconst SkillsList = (props) => {\r\n\r\n\tif(props.displayActiveSkills.length === 0) {\r\n\t\treturn null;\r\n\t}\r\n\t\r\n\treturn (\r\n\t\t<div className=\"skills-list hunter-ui-card results\">\r\n\t\t\t<h2>Skills</h2>\r\n\t\t\t<ul>\r\n\t\t\t\t{props.displayActiveSkills}\t\t\t\t\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SkillsList;","import React from 'react';\r\n\r\nconst AttackStatus = (props) => {\r\n\r\n\tconst { selectedWeapon, attackModifiers } = props;\r\n\r\n\t// let attack = {\r\n\t// \tmodified: { value: 0, check: false},\r\n\t// \tdisplay: null,\r\n\t// \tmodifier: null,\r\n\t// \traw: null,\r\n\t// \tsharpness: null,\r\n\t// \telement: null,\r\n\t// \taffinity: 0\r\n\t// };\r\n\r\n\tconst weaponModifier = {\r\n\t\thammer: 5.2,\r\n\t\tgreatSword: 4.8,\r\n\t\thuntingHorn: 4.2,\r\n\t\tchargeBlade: 3.6,\r\n\t\tswitchAxe: 3.5,\r\n\t\tlongSword: 3.3,\r\n\t\tinsectGlaive: 3.1,\r\n\t\tlance: 2.3,\r\n\t\tgunLance: 2.3,\r\n\t\theavyBowgun: 1.5,\r\n\t\tswordAndShield: 1.4,\r\n\t\tdualBlades: 1.4,\r\n\t\tlightBowgun: 1.3,\r\n\t\tbow: 1.2,\r\n\t}\r\n\r\n\tlet selectedWeaponDisplay = 0;\r\n\tlet modifiedAttack = false;\r\n\tlet rawDamage = 0;\r\n\tlet selectedWeaponModifier = 0;\r\n\tlet skillModifier = 0;\r\n\r\n\tif(selectedWeapon) {\r\n\t\tconst weaponType = selectedWeapon.type;\r\n\t\tconst { display } = selectedWeapon.attack;\r\n\t\t\r\n// weaponAttackDisplay={attack.display} weaponDamageType={attributes.damageType} overallAttackModifier={hunterStatusModifiers.attack}\r\n\r\n\t\tswitch (weaponType) {\r\n\t\t\tcase 'great-sword':\r\n\t\t\t\tselectedWeaponDisplay = display;\r\n\t\t\t\trawDamage = display / weaponModifier.greatSword;\r\n\t\t\t\tselectedWeaponModifier = weaponModifier.greatSword;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'long-sword':\r\n\t\t\t\tselectedWeaponDisplay = display;\r\n\t\t\t\trawDamage = display / weaponModifier.longSword;\r\n\t\t\t\tselectedWeaponModifier = weaponModifier.longSword;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'sword-and-shield':\r\n\t\t\t\tselectedWeaponDisplay = display;\r\n\t\t\t\trawDamage = display / weaponModifier.swordAndShield;\r\n\t\t\t\tselectedWeaponModifier = weaponModifier.swordAndShield;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'dual-blades':\r\n\t\t\t\tselectedWeaponDisplay = display;\r\n\t\t\t\trawDamage = display / weaponModifier.dualBlades;\r\n\t\t\t\tselectedWeaponModifier = weaponModifier.dualBlades;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'insect-glaive':\r\n\t\t\t\tselectedWeaponDisplay = display;\r\n\t\t\t\trawDamage = display / weaponModifier.insectGlaive;\r\n\t\t\t\tselectedWeaponModifier = weaponModifier.insectGlaive;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'switch-axe':\r\n\t\t\t\tselectedWeaponDisplay = display;\r\n\t\t\t\trawDamage = display / weaponModifier.switchAxe;\r\n\t\t\t\tselectedWeaponModifier = weaponModifier.switchAxe;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'charge-blade':\r\n\t\t\t\tselectedWeaponDisplay = display;\r\n\t\t\t\trawDamage = display / weaponModifier.chargeBlade;\r\n\t\t\t\tselectedWeaponModifier = weaponModifier.chargeBlade;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'hammer':\r\n\t\t\t\tselectedWeaponDisplay = display;\r\n\t\t\t\trawDamage = display / weaponModifier.hammer;\r\n\t\t\t\tselectedWeaponModifier = weaponModifier.hammer;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'hunting-horn':\r\n\t\t\t\tselectedWeaponDisplay = display;\r\n\t\t\t\trawDamage = display / weaponModifier.huntingHorn;\r\n\t\t\t\tselectedWeaponModifier = weaponModifier.huntingHorn;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'lance':\r\n\t\t\t\tselectedWeaponDisplay = display;\r\n\t\t\t\trawDamage = display / weaponModifier.lance;\r\n\t\t\t\tselectedWeaponModifier = weaponModifier.lance;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'gunlance':\r\n\t\t\t\tselectedWeaponDisplay = display;\r\n\t\t\t\trawDamage = display / weaponModifier.gunLance;\r\n\t\t\t\tselectedWeaponModifier = weaponModifier.gunLance;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'light-bowgun':\r\n\t\t\t\tselectedWeaponDisplay = display;\r\n\t\t\t\trawDamage = display / weaponModifier.lightBowgun;\r\n\t\t\t\tselectedWeaponModifier = weaponModifier.lightBowgun;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'heavy-bowgun':\r\n\t\t\t\tselectedWeaponDisplay = display;\r\n\t\t\t\trawDamage = display / weaponModifier.heavyBowgun;\r\n\t\t\t\tselectedWeaponModifier = weaponModifier.heavyBowgun;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'bow':\r\n\t\t\t\tselectedWeaponDisplay = display;\r\n\t\t\t\trawDamage = display / weaponModifier.bow;\r\n\t\t\t\tselectedWeaponModifier = weaponModifier.bow;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t\r\n\tconst attackModifiersArray = Object.entries(attackModifiers);\r\n\r\n\tif(attackModifiersArray.length > 0) {\r\n\t\tObject.entries(attackModifiers).forEach(modifier => {\r\n\t\t\tswitch (modifier[0]) {\r\n\t\t\t\tcase 'Attack Boost':\r\n\t\t\t\t\tskillModifier = modifier[1];\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t// calculated overall attack including bonus from skills (modifiers)\r\n\r\n\tif(skillModifier > 0) {\r\n\t\tmodifiedAttack = (rawDamage + skillModifier) * selectedWeaponModifier;\t\r\n\t}\r\n\r\n\t// Attack Calculation\r\n\r\n\t// let rawDamage = '';\r\n\t// let attackStatusList = '';\r\n\t//  Get Weapon Info\r\n\t// if(weapon.selected) {\r\n\t// \tObject.entries(selectedWeapon).forEach((at, index) => {\r\n\t// \t\t// assign new value to attack.display\r\n\t// \t\tattack[at[0]] = at[1];\r\n\t// \t});\r\n\t// \t// Get elemental values\r\n\t// \tattack['element'] = weapon.selected.elements.map((elem, elemIndex) => {\r\n\t// \t\t// if elem.hidden !== hidden ? !elem.hidden\r\n\t// \t\tconst ifHiddenClass = elem.hidden ? 'hidden' : 'awakened';\r\n\t// \t\treturn <span key={elemIndex}>{elem.type}: <span className={ifHiddenClass}>{elem.damage}</span></span>\r\n\t// \t});\r\n\r\n\t\r\n\r\n\t// \t// skills that modifies attack \r\n\t// \t// attack-boost\r\n\t// \t// agitator\r\n\t// \t// heroics\r\n\t// \t// fortify\r\n\t// \t// peak-performance\r\n\t// \t// resentment\r\n\t// \t// artillery - for gunners, gunlance, charge blade, sticky ammo\r\n\r\n\t// \t// apply skill attack modifiers\r\n\t// \tconst skillAttackModifiers = [ { skillName: 'Attack Boost', ranks: [3,6,9,12,15,18,21] }, { skillName: 'Agitator', ranks: [4,8,12,16,20] }, { skillName: 'Peak Performance', ranks: [5,10,20] }, { skillName: 'Heroics', ranks: [5,10,15], percent: true}, { skillName: 'Fortify', ranks: [10], percent: true }];\r\n\r\n\t// \tskillAttackModifiers.forEach(skill => {\r\n\t// \t\tconst modifierPattern = new RegExp(`(${skill.skillName})`, 'i');\r\n\t// \t\tconsole.log(skill.skillName);\r\n\t// \t\tif(modifierPattern.test(activeSkillsText)) {\r\n\t// \t\t\tif(skill.skillName === 'Attack Boost') {\r\n\t// \t\t\t\tif(activeArmorSkills[skill.skillName].value >= 4) {\r\n\t// \t\t\t\t\tlet rank = 0;\r\n\t// \t\t\t\t\tif(activeArmorSkills[skill.skillName].value > skill.ranks.length) {\r\n\t// \t\t\t\t\t\trank = skill.ranks[skill.ranks.length - 1];\r\n\t// \t\t\t\t\t} else {\r\n\t// \t\t\t\t\t\trank = skill.ranks[activeArmorSkills[skill.skillName].value - 1]\r\n\t// \t\t\t\t\t}\r\n\t// \t\t\t\t\tskillModifiers['attack'][skill.skillName] = rank;\r\n\t// \t\t\t\t\tskillModifiers['affinity'][skill.skillName] = 5;\r\n\t// \t\t\t\t\tattack['modified']['check'] = true;\r\n\t// \t\t\t\t} else {\r\n\t// \t\t\t\t\tskillModifiers['attack'][skill.skillName] = skill.ranks[activeArmorSkills[skill.skillName].value - 1];\r\n\t// \t\t\t\t\tattack['modified']['check'] = true;\r\n\t// \t\t\t\t}\r\n\t// \t\t\t}\r\n\t// \t\t}\r\n\t// \t});\r\n\r\n\t// \tif(weapon.selected.sharpness) {\r\n\t// \t\tattack['sharpness'] = Object.entries(weapon.selected.sharpness).map((color, index) => {\r\n\t// \t\t\treturn <span key={index} style={{ backgroundColor: color[0], width: `${color[1]}%`, height: '15px'}}></span>\r\n\t// \t\t});\r\n\t// \t}\r\n\t// }\r\n\r\n\t// // assign updated raw attack value\r\n\t// attack['raw'] = rawDamage;\r\n\r\n\t// attackStatusList = Object.entries(attack).map((at, index) => {\r\n\t\t\r\n\t// \tif(at[0]) {\r\n\t// \t\tconst subClass = at[0] === 'sharpness' && at[1] !== null ? 'sharpness-bar' : '';\r\n\t// \t\tif(at[0] === 'modified') {\r\n\t// \t\t\tif(at[1]['check']) {\r\n\r\n\t// \t\t\t\tlet addAttackModifiers = 0;\r\n\t// \t\t\t\tObject.entries(skillModifiers['attack']).forEach(modifier => {\r\n\t// \t\t\t\t\tif(modifier[0] === 'Attack Boost') {\r\n\t// \t\t\t\t\t\tconsole.log(modifier);\r\n\t// \t\t\t\t\t\taddAttackModifiers += modifier[1];\r\n\t// \t\t\t\t\t}\r\n\t// \t\t\t\t});\r\n\r\n\t// \t\t\t\tconst modifiedAttack = Math.round((attack['raw'] + addAttackModifiers) * attack['modifier']);\r\n\t// \t\t\t\treturn <li key={index}><div>{at[0]}:</div><div className={subClass}>{modifiedAttack}</div></li>\t\r\n\t// \t\t\t}\r\n\t\t\t\t\r\n\t// \t\t} else {\r\n\t// \t\t\treturn <li key={index}><div>{at[0]}:</div><div className={subClass}>{at[1]}</div></li>\t\r\n\t// \t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t// \t}\r\n\t\t\r\n\t// });\r\n\r\n\treturn (\r\n\t\t<li className=\"attack-info\">\r\n\t\t\t<div><span>display:</span> <span>{Math.round(selectedWeaponDisplay)} {modifiedAttack ? `( ${Math.round(modifiedAttack)} )` : ''}</span></div>\t\r\n\t\t\t<div><span>raw:</span> <span>{Math.round(rawDamage)}</span></div>\t\r\n\t\t\t<div><span>modifier:</span> <span>{selectedWeaponModifier}</span></div>\t\r\n\t\t</li>\r\n\t)\r\n\r\n}\r\n\r\nexport default AttackStatus;","import React from 'react';\r\n\r\nconst ElementStatus = (props) => {\r\n\r\n\tconst { selectedWeapon } = props;\r\n\tlet elementalRating = [];\r\n\tif(selectedWeapon) {\r\n\t\telementalRating = selectedWeapon.elements.map((elem, index) => {\r\n\t\t\tconst ifHiddenClass = elem.hidden ? 'hidden' : '';\r\n\t\t\treturn <span key={index} className={ifHiddenClass}>{elem.type} {elem.damage}</span>\r\n\t\t})\r\n\t}\r\n\r\n\treturn (\r\n\t\t<li>\r\n\t\t\t<span>Element:</span>\r\n\t\t\t<span>{elementalRating}</span>\r\n\t\t</li>\r\n\t)\r\n}\r\n\r\nexport default ElementStatus;","import React from 'react';\r\n\r\nconst SharpnessStatus = (props) => {\r\n\r\n\tconst { selectedWeapon } = props;\r\n\tlet weaponSharpness = [];\r\n\tconst sharpnessClassNames = selectedWeapon.sharpness ? 'sharpness-bar' : ''; \r\n\tif(selectedWeapon) {\r\n\t\tif(selectedWeapon.sharpness) {\r\n\t\t\tweaponSharpness = Object.entries(selectedWeapon.sharpness).map((color, index) => {\r\n\t\t\t\treturn <span key={index} style={{ backgroundColor: color[0], width: `${color[1]}%`, height: '15px'}}></span>\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<li>\r\n\t\t\t<div>Sharpness:</div>\r\n\t\t\t<div className={sharpnessClassNames}>{weaponSharpness}</div>\r\n\t\t</li>\r\n\t)\r\n}\r\n\r\nexport default SharpnessStatus;","import React from 'react';\r\n\r\nconst AffinityStatus = (props) => {\r\n\r\n\tconst { affinityModifiers } = props;\r\n\r\n\t// attack-boost\r\n\t// critical-eye\r\n\t// maximum-might\r\n\tlet totalAffinity = 0;\r\n\r\n\tObject.entries(affinityModifiers).forEach(modifier => {\r\n\t\ttotalAffinity += modifier[1]\r\n\t});\r\n\r\n\treturn (\r\n\t\t<li>\r\n\t\t\t<span>Affinity:</span><span>{totalAffinity}%</span>\r\n\t\t</li>\r\n\t)\r\n\r\n}\r\n\r\nexport default AffinityStatus;","import React from 'react';\r\n// importing components\r\nimport AttackStatus from './component_attack_status';\r\nimport ElementStatus from './component_element_status';\r\nimport SharpnessStatus from './component_sharpness_status';\r\nimport AffinityStatus from './component_affinity_status';\r\n\r\nconst StatusList = (props) => {\r\n\r\n\tconst selectedWeapon = props.selectedWeapon ? props.selectedWeapon : '';\r\n\t\r\n\tconst { activeArmorSkills, activeSkillsText, selectedArmorSet } = props;\r\n\t// const { selected: equippedWeapon } = props.selectedArmorSet.weapon;\r\n\t// const activeArmorSkillsToArray = Object.entries(activeArmorSkills);\r\n\r\n\tlet activeDefenseObj = { defense: 1 };\r\n\tlet activeResistancesObj = {\r\n\t\tfire: 0,\r\n\t\twater: 0,\r\n\t\tice: 0,\r\n\t\tthunder: 0,\r\n\t\tdragon: 0,\r\n\t};\r\n\tlet hunterStatusModifiers = {\r\n\t\tattack: {},\r\n\t\tsharpness: {},\r\n\t\taffinity: {},\r\n\t\telement: {},\r\n\t\tdefense: {},\r\n\t\tresistance: {}\r\n\t}\r\n\r\n\tselectedArmorSet.activeParts.forEach(piece => {\r\n\t\t// add armor part defense to total defense status\r\n\t\tconst baseDefense = selectedArmorSet[piece].selected.defense ? selectedArmorSet[piece].selected.defense.base : 0;\r\n\t\tactiveDefenseObj['defense'] += baseDefense;\r\n\t\t\r\n\t\tconst resistances = selectedArmorSet[piece].selected.resistances ? Object.entries(selectedArmorSet[piece].selected.resistances) : Object.entries({ fire: 0, water: 0, ice: 0, thunder: 0, dragon: 0 });\r\n\r\n\t\tresistances.forEach(resistance => {\r\n\t\t\t// Check if positive or negative integer\r\n\t\t\tif(Math.sign(resistance[1])) {\r\n\t\t\t\tactiveResistancesObj[resistance[0]] = activeResistancesObj[resistance[0]] + resistance[1]; \r\n\t\t\t} else {\r\n\t\t\t\tactiveResistancesObj[resistance[0]] = activeResistancesObj[resistance[0]] - resistance[1];\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n\r\n\t// apply skill attack modifiers\r\n\tconst skillModifiers = [ { skillName: 'Attack Boost', ranks: [3,6,9,12,15,18,21] }, { skillName: 'Agitator', ranks: [4,8,12,16,20] }, { skillName: 'Peak Performance', ranks: [5,10,20] }, { skillName: 'Heroics', ranks: [5,10,15], percent: true}, { skillName: 'Fortify', ranks: [10], percent: true }, { skillName: 'Critical Eye', ranks: [3,6,10,15,20,25,30] }, { skillName: 'Maximum Might', ranks: [10,20,30] }, { skillName: 'Free Elem/Ammo Up', ranks: [33,66,100] } ];\r\n\r\n\tskillModifiers.forEach(skill => {\r\n\t\tconst modifierPattern = new RegExp(`(${skill.skillName})`, 'i');\r\n\t\t\r\n\t\tif(modifierPattern.test(activeSkillsText)) {\r\n\t\t\tif(skill.skillName === 'Attack Boost') {\r\n\t\t\t\tif(activeArmorSkills[skill.skillName].value >= 4) {\r\n\t\t\t\t\tlet rank = 0;\r\n\t\t\t\t\tif(activeArmorSkills[skill.skillName].value > skill.ranks.length) {\r\n\t\t\t\t\t\trank = skill.ranks[skill.ranks.length - 1];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\trank = skill.ranks[activeArmorSkills[skill.skillName].value - 1]\r\n\t\t\t\t\t}\r\n\t\t\t\t\thunterStatusModifiers['attack'][skill.skillName] = rank;\r\n\t\t\t\t\thunterStatusModifiers['affinity'][skill.skillName] = 5;\r\n\t\t\t\t\t// attack['modified']['check'] = true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\thunterStatusModifiers['attack'][skill.skillName] = skill.ranks[activeArmorSkills[skill.skillName].value - 1];\r\n\t\t\t\t\t// attack['modified']['check'] = true;\r\n\t\t\t\t}\r\n\t\t\t} else if(skill.skillName === 'Critical Eye') {\r\n\t\t\t\tlet rank = 0;\r\n\t\t\t\tif(activeArmorSkills[skill.skillName].value > skill.ranks.length) {\r\n\t\t\t\t\trank = skill.ranks[skill.ranks.length - 1];\r\n\t\t\t\t} else {\r\n\t\t\t\t\trank = skill.ranks[activeArmorSkills[skill.skillName].value - 1]\r\n\t\t\t\t}\r\n\t\t\t\thunterStatusModifiers['affinity'][skill.skillName] = rank;\r\n\t\t\t} else if (skill.skillName === 'Maximum Might') {\r\n\t\t\t\tlet rank = 0;\r\n\t\t\t\tif(activeArmorSkills[skill.skillName].value > skill.ranks.length) {\r\n\t\t\t\t\trank = skill.ranks[skill.ranks.length - 1];\r\n\t\t\t\t} else {\r\n\t\t\t\t\trank = skill.ranks[activeArmorSkills[skill.skillName].value - 1]\r\n\t\t\t\t}\r\n\t\t\t\thunterStatusModifiers['affinity'][skill.skillName] = rank;\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\t// Update Defense && Resistances with modifiers\r\n\tObject.entries(activeResistancesObj).forEach(resistance => {\r\n\t\tconst pattern = new RegExp(`(${resistance[0]} resistance)`, 'i');\r\n\t\t\r\n\t\tObject.entries(activeArmorSkills).forEach(skill => {\r\n\t\t\tif(pattern.test(skill[0])) {\r\n\t\t\t\tlet index = skill[1].value - 1;\r\n\t\t\t\t\r\n\t\t\t\tif(skill[1].value <= skill[1].ranks.length) {\r\n\t\t\t\t\tObject.entries(skill[1].ranks[index].modifiers).forEach(modifier => {\r\n\t\t\t\t\t\tif(modifier[0] === 'defense') {\r\n\t\t\t\t\t\t\tactiveDefenseObj['defense'] += modifier[1];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tactiveResistancesObj[resistance[0]] = activeResistancesObj[resistance[0]] + modifier[1];\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t});\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\t\r\n\t\t\t\t\tindex = skill[1].ranks.length - 1;\r\n\t\t\t\t\tObject.entries(skill[1].ranks[index].modifiers).forEach(modifier => {\r\n\t\t\t\t\t\r\n\t\t\t\t\t\tif(modifier[0] === 'defense') {\r\n\t\t\t\t\t\t\tactiveDefenseObj['defense'] += modifier[1];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tactiveResistancesObj[resistance[0]] = activeResistancesObj[resistance[0]] + modifier[1];\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n\r\n\tconst displayDefenseStatus = Object.entries(activeDefenseObj).map((defense, index) => {\r\n\t\treturn <li key={index}><span>{defense[0]}</span><span>{defense[1]}</span></li>\r\n\t});\r\n\r\n\tconst displayResistanceStatus = Object.entries(activeResistancesObj).map((resistance, index) => {\r\n\t\treturn <li key={index}><span>{resistance[0]}</span><span>{resistance[1]}</span></li>\r\n\t});\r\n\r\n\t// {attackStatusList}\r\n\r\n\treturn (\r\n\t\t<div className=\"status-list hunter-ui-card results\">\r\n\t\t\t<h2>Attack Status</h2>\r\n\t\t\t<ul className=\"attack-status-list\">\r\n\t\t\t\t<AttackStatus selectedWeapon={selectedWeapon} attackModifiers={hunterStatusModifiers.attack} />\r\n\t\t\t\t<ElementStatus selectedWeapon={selectedWeapon} />\r\n\t\t\t\t<SharpnessStatus selectedWeapon={selectedWeapon} />\r\n\t\t\t\t<AffinityStatus affinityModifiers={hunterStatusModifiers.affinity} />\r\n\t\t\t</ul>\r\n\t\t\t<h2>Defense Status</h2>\r\n\t\t\t<ul className=\"defense-status-list\">\r\n\t\t\t\t{displayDefenseStatus}\r\n\t\t\t\t{displayResistanceStatus}\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default StatusList;","import React, { Component } from 'react';\r\n\r\n//importing Components\r\nimport SkillsList from './component_skills_list';\r\nimport StatusList from './component_status_list';\r\n\r\nclass HunterStatus extends Component {\r\n\r\n\trender() {\r\n\r\n\t\tlet activeArmorSkills = {};\r\n\t\tlet activeSkillsText = '';\r\n\t\tconst { skillsList, selectedArmorSet } = this.props;\r\n\t\t\r\n\t\tselectedArmorSet.activeParts.forEach(piece => {\r\n\t\t\tconst { partDecos } = selectedArmorSet[piece];\r\n\r\n\t\t\tif(selectedArmorSet[piece].selected.skills) {\r\n\t\t\t\tselectedArmorSet[piece].selected.skills.forEach(armorSkill => {\r\n\t\t\t\r\n\t\t\t\t\tconst pattern = new RegExp(`(${armorSkill.skillName})`, 'gi');\r\n\t\t\t\t\tlet value = armorSkill.level;\r\n\r\n\t\t\t\t\tif(pattern.test(activeSkillsText)) {\r\n\t\t\t\t\t\tactiveArmorSkills[armorSkill.skillName]['value'] = activeArmorSkills[armorSkill.skillName]['value'] + value;\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tlet ranks = [];\r\n\t\t\t\t\t\tlet description = '';\r\n\r\n\t\t\t\t\t\tskillsList.forEach(skill => {\r\n\t\t\t\t\t\t\tif(skill.name === armorSkill.skillName) {\r\n\t\t\t\t\t\t\t\tranks = skill.ranks;\r\n\t\t\t\t\t\t\t\tdescription = skill.description;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tactiveArmorSkills = { [armorSkill.skillName]: { value, ranks, description, skillName: armorSkill.skillName }, ...activeArmorSkills };\r\n\t\t\t\t\t\tactiveSkillsText += `${armorSkill.skillName} `;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif(partDecos && partDecos.length > 0) {\r\n\t\t\t\t\r\n\t\t\t\tpartDecos.forEach(deco => {\r\n\t\t\t\t\tif(!deco.skillName) return;\r\n\r\n\t\t\t\t\tconst pattern = new RegExp(`(${deco.skillName})`, 'gi');\r\n\t\t\t\t\tlet value = deco.level;\r\n\r\n\t\t\t\t\tif(pattern.test(activeSkillsText)) {\t\t\t\t\t\r\n\t\t\t\t\t\tactiveArmorSkills[deco.skillName]['value'] = activeArmorSkills[deco.skillName]['value'] + value;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tlet ranks = [];\r\n\t\t\t\t\t\tlet description = '';\r\n\t\t\t\t\t\tskillsList.forEach(skill => {\r\n\t\t\t\t\t\t\tif(skill.name === deco.skillName) {\r\n\t\t\t\t\t\t\t\tranks = skill.ranks;\r\n\t\t\t\t\t\t\t\tdescription = skill.description;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tactiveArmorSkills = { [deco.skillName]: { value, ranks, description, skillName: deco.skillName }, ...activeArmorSkills };\r\n\t\t\t\t\t\tactiveSkillsText += `${deco.skillName} `;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Sort active armor skills Obj and convert it to an array..\r\n\t\tconst activeArmorSkillsArray = Object.entries(activeArmorSkills).sort((a,b) => a[0] > b[0] ? 1 : -1);\r\n\t\t\r\n\t\tconst displayActiveSkills = activeArmorSkillsArray.map((skill, index) => {\r\n\t\t\tconst currentValueClass = skill[1].value > skill[1].ranks.length ? 'exceeded' : '';\r\n\t\t\treturn <li key={index}><div>{skill[0]}<ul>{skill[1].ranks.map((rank, ranksIndex) => (ranksIndex + 1) <= skill[1].value ? <li key={ranksIndex} className=\"active\"></li> : <li key={ranksIndex}></li> )}</ul></div><span className={currentValueClass}>{skill[1].value}</span></li>\r\n\t\t});\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"hunter-status\">\r\n\t\t\t\t<SkillsList activeArmorSkills={activeArmorSkills} displayActiveSkills={displayActiveSkills} selectedArmorSet={this.props.selectedArmorSet} />\r\n            \t<StatusList activeArmorSkills={activeArmorSkills} displayActiveSkills={displayActiveSkills} selectedArmorSet={this.props.selectedArmorSet} selectedWeapon={this.props.selectedArmorSet.weapon.selected} activeSkillsText={activeSkillsText} />\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default HunterStatus;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport getWeaponList from './actions/action_getWeaponList';\nimport getArmorList from './actions/action_getArmorList';\nimport getCharmList from './actions/action_getCharmList';\nimport getDecorationList from './actions/action_getDecorationList';\nimport getSkillsList from './actions/action_getSkillsList';\n\nimport './App.css';\n\n// imported Components\nimport MainSearch from './components/component_main_search';\nimport ArmorLoadoutBuilder from './components/component_armorLoadoutBuilder';\nimport HunterStatus from './components/component_hunter_status';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = { \n      weaponList: [],\n      armorList: [],\n      charmList: [],\n      decorationList: [],\n      skillsList: [],\n      selectedArmorSet: {\n        activeParts: [],\n        activeSkills: {},\n        activeSkillsText: '',\n        selectedDecoList: {},\n        weapon: {\n          pieces: [],\n          partDecos: null,\n          searchString: '',\n          decoSearchString: '',\n          selected: null,\n          results: [],\n          decoResults: [],\n         \n        },\n        head: {\n          pieces: [],\n          partDecos: [],\n          searchString: '',\n          selected: null,\n          results: [],\n          decoResults: [],\n         \n        }, \n        chest: {\n          pieces: [],\n          partDecos: [],\n          searchString: '',\n          selected: null,\n          results: [],\n          decoResults: [],\n          \n        }, \n        gloves: {\n          pieces: [],\n          partDecos: [],\n          searchString: '',\n          selected: null,\n          results: [],\n          decoResults: [],\n         \n        }, \n        waist: {\n          pieces: [],\n          partDecos: [],\n          searchString: '',\n          selected: null,\n          results: [],\n          decoResults: [],\n       \n        }, \n        legs: {\n          pieces: [],\n          partDecos: [],\n          searchString: '',\n          selected: null,\n          results: [],\n          decoResults: [],\n      \n        },\n        charm: {\n          pieces: [],\n          partDecos: [],\n          searchString: '',\n          selected: null,\n          results: [],\n          decoResults: []\n        }\n      }\n    }\n  }\n\n  componentWillMount() {\n    this.props.getWeaponList();\n    this.props.getArmorList();\n    this.props.getCharmList();\n    this.props.getDecorationList();\n    this.props.getSkillsList();\n\n    // console.log('App Component will mount..');\n  }\n\n  componentDidMount() {\n    // console.log('App Component did mount..');\n    // console.log(this.props.armorList);\n\n    // this.setState({ armorList: [...this.props.armorList] });\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) { \n    // fetch('./armorList.json')\n    //   .then(res => {\n    //     return res.json();\n    //   })\n    //   .then(data => {\n    //     console.log(data);\n    //   })\n    //   .catch(err => {\n    //     console.log(err);\n    //   });\n\n    if(this.props.armorList !== prevProps.armorList && this.props.weaponList !== prevProps.weaponList) {\n      \n      console.log('updating armorlist');\n      \n      let headPieces = [];\n      let chestPieces = [];\n      let glovesPieces = [];\n      let waistPieces = [];\n      let legsPieces = [];\n\n      this.props.armorList.forEach(armor => {\n        switch (armor.type) {\n          case 'head':\n            headPieces = [armor, ...headPieces];\n            break;\n          case 'chest':\n            chestPieces = [armor, ...chestPieces];\n            break;\n          case 'gloves':\n            glovesPieces = [armor, ...glovesPieces];\n            break;\n          case 'waist':\n            waistPieces = [armor, ...waistPieces];\n            break;\n          case 'legs':\n            legsPieces = [armor, ...legsPieces];\n            break;\n          default:\n            break;\n        }\n      });\n\n      this.setState(prevState => ({ \n        ...prevState,\n        weaponList: [...this.props.weaponList],\n        armorList: [...this.props.armorList],\n        charmList: [...this.props.charmList],\n        decorationList: [...this.props.decorationList],\n        skillsList: [...this.props.skillsList],\n        selectedArmorSet: {\n          ...prevState.selectedArmorSet,\n          head: {\n            ...prevState.selectedArmorSet.head,\n            pieces: headPieces\n          },\n          chest: {\n            ...prevState.selectedArmorSet.chest,\n            pieces: chestPieces\n          },\n          gloves: {\n            ...prevState.selectedArmorSet.gloves,\n            pieces: glovesPieces\n          },\n          waist: {\n            ...prevState.selectedArmorSet.waist,\n            pieces: waistPieces\n          },\n          legs: {\n            ...prevState.selectedArmorSet.legs,\n            pieces: legsPieces\n          },\n        } \n      }));\n    }\n\n    // check active skills state\n    // if(this.state.selectedArmorSet.activeSkills !== )\n\n    console.log('App Component Updated!');\n  }\n\n  onSelectedWeapon = (e) => {\n\n    const weaponName = e.target.getAttribute('data-selected-weapon');\n    const index = e.target.getAttribute('data-selected-index');\n\n    const weaponList = this.state.weaponList;\n    let updatedActivePartsArray = [];\n    let selected = {};\n    \n    const activePartsRegEx =  new RegExp(`(weapon)`, 'gi');\n    const activePartsText = this.state.selectedArmorSet.activeParts.toString();\n\n    if(weaponList[index]['name'] === weaponName) {\n      selected = weaponList[index];\n    }\n\n    if(activePartsRegEx.test(activePartsText)) {\n      updatedActivePartsArray = [...this.state.selectedArmorSet.activeParts];\n    } else {\n      updatedActivePartsArray = ['weapon', ...this.state.selectedArmorSet.activeParts];\n    }\n\n    const decoState = selected.slots.map(slot => ({ rank: slot.rank, active: false, searchString: '' } ));\n\n    this.setState(prevState => ({\n      selectedArmorSet: {\n        ...prevState.selectedArmorSet,\n        activeParts: updatedActivePartsArray,\n        weapon: {\n          ...prevState.selectedArmorSet.weapon,\n          partDecos: decoState,\n          selected,\n          results: []\n        }\n      }\n    }));\n  }\n\n  onSelectedDeco = (e) => {\n    \n    const decoIndex = parseInt(e.target.getAttribute('data-deco-index'));\n    const slotIndex = parseInt(e.target.getAttribute('data-slot-index'));\n    \n    const part = e.target.getAttribute('data-part');\n    const { partDecos, decoResults } = this.state.selectedArmorSet[part];\n\n    const updatePartDecos = partDecos.map((slot, index) => {\n      if(slotIndex === index) {\n        return { ...slot, active: false, ...decoResults[decoIndex] } \n        // return { ...slot, active: false, id: decoSkillId, skillName: decoSkillName, level: decoSkillLevel } \n      } else {\n        return { ...slot, active: false }\n      }\n    });\n    \n    this.setState(prevState => ({\n      ...prevState,\n      selectedArmorSet: {\n        ...prevState.selectedArmorSet,\n        [part]: {\n          ...prevState.selectedArmorSet[part],\n          partDecos: updatePartDecos,\n          decoResults: []\n        }\n      }\n\n    }));\n  }\n\n  onSelectedCharm = (e) => {\n\n    const charmName = e.target.getAttribute('data-selected-rank');\n    const parentIndex = e.target.getAttribute('data-parent-index');\n    const index = e.target.getAttribute('data-index');\n\n    const charmList = this.state.charmList;\n    let updatedActivePartsArray = [];\n    let selected = {};\n    \n    const activePartsRegEx =  new RegExp(`(charm)`, 'gi');\n    const activePartsText = this.state.selectedArmorSet.activeParts.toString();\n\n    if(charmList[parentIndex]['ranks'][index]['name'] === charmName) {\n      selected = charmList[parentIndex]['ranks'][index];\n    }\n\n    if(activePartsRegEx.test(activePartsText)) {\n      updatedActivePartsArray = [...this.state.selectedArmorSet.activeParts];\n    } else {\n      updatedActivePartsArray = ['charm', ...this.state.selectedArmorSet.activeParts];\n    }\n\n    this.setState(prevState => ({\n      ...prevState,\n      selectedArmorSet: {\n        ...prevState.selectedArmorSet,\n        activeParts: updatedActivePartsArray,\n        charm: {\n          ...prevState.selectedArmorSet.charm,\n          selected,\n          results: []\n        }\n      }\n    }));\n  }\n\n  onSelectedArmor = (e) => {\n\n    const armorType = e.target.getAttribute('data-armor-type') ? e.target.getAttribute('data-armor-type') : '';\n    const armorName = e.target.getAttribute('data-selected-armor') ? e.target.getAttribute('data-selected-armor') : '';\n    const index = e.target.getAttribute('data-selected-index');\n    const searchBar = e.target.getAttribute('data-search-bar');\n    \n    // check if an equipment is selected..\n    let selectedArmor = {};\n    \n    // check if selecting/clicking a search result from the Main Search Bar\n    if(searchBar === null) {\n      if(this.state.selectedArmorSet[armorType]['pieces'][index]['name'] === armorName) {\n        selectedArmor = this.state.selectedArmorSet[armorType]['pieces'][index];\n      }\n    } else {\n      selectedArmor = this.state.armorList[index];\n    }\n    \n    // check if part is already selected..\n    const activePartsRegEx =  new RegExp(`(${armorType})`, 'gi');\n    const activePartsText = this.state.selectedArmorSet.activeParts.toString();\n    let updatedActivePartsArray = [];\n\n    if(activePartsRegEx.test(activePartsText)) {\n      updatedActivePartsArray = [...this.state.selectedArmorSet.activeParts];\n    } else {\n      updatedActivePartsArray = [armorType, ...this.state.selectedArmorSet.activeParts];\n    }\n    \n    // setting up the Equipment Slots state\n    const decoState = selectedArmor.slots.map(slot => ({ rank: slot.rank, active: false, searchString: '' } ));\n\n    this.setState(prevState => ({\n      selectedArmorSet: {\n        ...prevState.selectedArmorSet,\n        activeParts: updatedActivePartsArray,\n        [armorType]: {\n          ...prevState.selectedArmorSet[armorType],\n          partDecos: decoState,\n          selected: selectedArmor,\n          results: []\n        }\n      }\n    }));\n  }\n\n  onFocusPartSearch = (e) => {\n    this.setState(prevState => ({\n      selectedArmorSet: {\n        ...prevState.selectedArmorSet,\n        weapon: {\n          ...prevState.selectedArmorSet.weapon,\n          results: [],\n          decoResults: []\n        },\n        head: {\n          ...prevState.selectedArmorSet.head,\n          results: [],\n          decoResults: []\n        }, \n        chest: {\n          ...prevState.selectedArmorSet.chest,\n          results: [],\n          decoResults: []\n        }, \n        gloves: {\n          ...prevState.selectedArmorSet.gloves,\n          results: [],\n          decoResults: []\n        }, \n        waist: {\n          ...prevState.selectedArmorSet.waist,\n          results: [],\n          decoResults: []\n        }, \n        legs: {\n          ...prevState.selectedArmorSet.legs,\n          results: [],\n          decoResults: []\n        },\n        charm: {\n          ...prevState.selectedArmorSet.charm,\n          results: [],\n          decoResults: []\n        }\n      }\n    }));\n  }\n\n  onFocusSlotSearch = (e) => {\n\n    const slotIndex = parseInt(e.target.getAttribute('data-slot-index'));\n    const slotRank = parseInt(e.target.getAttribute('data-slot-rank'));\n    const equipmentPart = e.target.getAttribute('data-part');\n    const { partDecos } = this.state.selectedArmorSet[equipmentPart];\n    const decoPieces =  this.state.decorationList;\n    let decoResults = [];\n\n    const updatePartDecos = partDecos.map((slot,index) => {\n      if(slotIndex === index) {\n        return { ...slot, active: true }\n      } else {\n        return { ...slot, active: false }\n      }\n    });\n\n    decoPieces.forEach(deco => {\n      if(deco.slot <= slotRank ) {\n        deco.skills.forEach(skill => {\n          decoResults = [ { id: skill.id, skillName: skill.skillName, level: skill.level, slotRank, slot: deco.slot }, ...decoResults ]\n        });\n      }\n    });\n\n    // Sort Deco Results..\n    decoResults.sort((a,b) => a.skillName > b.skillName ? 1 : -1);\n\n    // To Clear global search results...\n    this.onFocusPartSearch();\n    this.setState(prevState => ({\n      ...prevState,\n      selectedArmorSet: {\n        ...prevState.selectedArmorSet,\n        [equipmentPart]: {\n          ...prevState.selectedArmorSet[equipmentPart],\n          partDecos: updatePartDecos,\n          decoResults,\n          results: []\n        }\n      }\n    }));\n  }\n\n  onWeaponInputSearch = (e) => {\n\n    // add RegEx input checker here..\n    const searchString = e.target.value;\n    const pattern = new RegExp(`^${e.target.value}`,'i');\n    let weaponSearchResults = [];\n    const weaponPieces = this.state.weaponList;\n\n    // // Sort Weapon Pieces..\n    weaponPieces.sort((a,b) => a.name < b.name ? 1 : -1);\n\n    weaponPieces.forEach((weapon, index) => {\n      if(pattern.test(weapon.name) && e.target.value !== '') {\n        weaponSearchResults = [<li key={index}><button data-selected-weapon={weapon.name} data-selected-index={index} onClick={this.onSelectedWeapon}>{weapon.name}</button></li>, ...weaponSearchResults ];\n      }\n    });\n\n    this.setState(prevState => ({\n      selectedArmorSet: {\n        ...prevState.selectedArmorSet,\n        weapon: {\n          ...prevState.selectedArmorSet.weapon,\n          searchString,\n          selected: null,\n          results: weaponSearchResults\n        }\n      }\n    }));\n  }\n\n  onCharmInputSearch = (e) => {\n\n    // add RegEx input checker here..\n    const searchString = e.target.value;\n    const pattern = new RegExp(`^${e.target.value}`,'i');\n    let charmSearchResults = [];\n    const charmPieces = this.state.charmList;\n\n    // // Sort Charm Pieces..\n    charmPieces.sort((a,b) => a.name < b.name ? 1 : -1);\n\n    charmPieces.forEach((charm, parentIndex) => {\n      if(pattern.test(charm.name) && e.target.value !== '') {\n        const charmRanks = charm.ranks.map((rank, index) => {\n          return <li key={index}><button data-selected-rank={rank.name} data-parent-index={parentIndex} data-index={index} onClick={this.onSelectedCharm}>{rank.name}</button></li>\n        });\n\n        charmSearchResults = [charmRanks, ...charmSearchResults]\n      }\n    });\n\n    this.setState(prevState => ({\n      selectedArmorSet: {\n        ...prevState.selectedArmorSet,\n        charm: {\n          ...prevState.selectedArmorSet.charm,\n          searchString,\n          selected: null,\n          results: charmSearchResults\n        }\n      }\n    }));\n  }\n\n  onDecoInputSearch = (e) => {\n    \n    // write a RegEx here..\n    const searchString = e.target.value;\n    const decoIndex = parseInt(e.target.getAttribute('data-slot-index'));\n    const part = e.target.getAttribute('data-part');\n    const slotRank = parseInt(e.target.getAttribute('data-slot-rank'));\n\n    const decoPieces = this.state.decorationList;\n    const partDecos = this.state.selectedArmorSet[part].partDecos;\n\n    let pattern = new RegExp(`^(${e.target.value})`,'i');\n    let decoResults = [];\n\n    decoPieces.forEach(deco => {\n      deco.skills.forEach(skill => {\n        if(pattern.test(skill.skillName)) {\n          if(deco.slot <= slotRank) {\n            decoResults = [ { id: skill.id, skillName: skill.skillName, slotRank,  slot: deco.slot, level: skill.level }, ...decoResults ];\n          }\n        }\n      });\n    });\n\n    const updatePartDecos = partDecos.map((slot, index) => {\n      if(decoIndex === index) {\n        return { ...slot, active: true, searchString }\n      } else {\n        return { ...slot, active: false }\n      }\n    });\n\n    // Sort Deco Results..\n    decoResults.sort((a,b) => a.skillName > b.skillName ? 1 : -1);\n\n    this.setState(prevState => ({\n      ...prevState,\n      selectedArmorSet: {\n        ...prevState.selectedArmorSet,\n        [part]: {\n          ...prevState.selectedArmorSet[part],\n          partDecos: updatePartDecos,\n          decoResults,\n        }\n      }\n    }));\n  }\n\n  onInputPartSearch = (e) => {\n    const armorType = e.target.getAttribute('data-armor-type');\n    const armorPieces = this.state.selectedArmorSet[armorType]['pieces'];\n\n    let armorSearchResults = [];\n    let searchString = e.target.value;\n    let pattern = new RegExp(`^${e.target.value}`,'i');\n\n    // // Sort Armor Pieces..\n    armorPieces.sort((a,b) => a.name < b.name ? 1 : -1);\n\n    armorPieces.forEach((armor, index) => {\n      if(pattern.test(armor.name) && e.target.value !== '') {\n        \n        armorSearchResults = [<li key={index}><button data-armor-type={armor.type} data-selected-armor={armor.name} data-selected-index={index} onClick={this.onSelectedArmor}>{armor.name}</button></li>, ...armorSearchResults ];\n      }\n    });\n\n\n\n    this.setState(prevState => ({\n      selectedArmorSet: {\n        ...prevState.selectedArmorSet,\n        [armorType]: {\n          ...prevState.selectedArmorSet[armorType],\n          searchString,\n          selected: null,\n          results: armorSearchResults\n        }\n      }\n    }));\n  }\n\n  onRemoveDecoPiece = (e) => {\n    \n    const part = e.target.getAttribute('data-part');\n    const slotIndex = parseInt(e.target.getAttribute('data-slot-index'));\n    const partDecos = this.state.selectedArmorSet[part].partDecos;\n    let updatePartDecos = partDecos.map((slot, index) => {\n\n      if(slotIndex === index) {\n        return { rank: slot.rank, active: false, searchString: '' }  \n      } else {\n        return { ...slot, active: false }\n      }\n\n    });\n\n    this.setState(prevState => ({\n      ...prevState,\n      selectedArmorSet: {\n        ...prevState.selectedArmorSet,\n        [part]: {\n          ...prevState.selectedArmorSet[part],\n          partDecos: updatePartDecos,\n          decoResults: []\n        }\n      }\n    }));\n  }\n\n  onRemoveArmorPiece = (e) => {\n    const armorPiece = e.target.getAttribute('data-armor-piece');\n\n    this.setState(prevState => ({\n      selectedArmorSet: {\n        ...prevState.selectedArmorSet,\n        activeParts: prevState.selectedArmorSet.activeParts.filter(part => part !== armorPiece),\n        [armorPiece]: {\n          ...prevState.selectedArmorSet[armorPiece],\n          partDecos: null,\n          searchString: '',\n          selected: null,\n          results: []\n        }\n      }\n    }));\n  }\n\n  render() {\n\n    // console.log(this.state.weaponList);\n    // console.log(this.state.decorationList);\n    // console.log(this.state.skillsList);\n    // console.log(this.state.selectedArmorSet);\n    // console.log(this.state.charmList);\n\n    // this.state.skillsList.forEach(skill => {\n    //   const pattern =  new RegExp('(element)', 'i');\n\n    //   if(pattern.test(skill.description)) {\n    //     console.log(skill);\n    //   }\n    // });\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"container\">\n            <h1>SSG</h1>\n            <MainSearch armorList={this.state.armorList} onSelectedArmor={this.onSelectedArmor} />\n          </div>\n        </header>\n        <div className=\"container\">\n          <div className=\"main-content\">\n            <ArmorLoadoutBuilder weaponList={this.state.weaponList} armorList={this.state.armorList} charmList={this.state.charmList} decorationList={this.state.decorationList} selectedArmorSet={this.state.selectedArmorSet} onSelectedArmor={this.onSelectedArmor} onSelectedDeco={this.onSelectedDeco} onRemoveDecoPiece={this.onRemoveDecoPiece} onRemoveArmorPiece={this.onRemoveArmorPiece} clearedArmorPart={this.state.clearedArmorPart} onWeaponInputSearch={this.onWeaponInputSearch} onCharmInputSearch={this.onCharmInputSearch} onDecoInputSearch={this.onDecoInputSearch} onInputPartSearch={this.onInputPartSearch} onFocusPartSearch={this.onFocusPartSearch} onFocusSlotSearch={this.onFocusSlotSearch} onBlurSearch={this.onBlurSearch} onBlurContainer={this.onBlurContainer} onFocusContainer={this.onFocusContainer} />\n            <HunterStatus skillsList={this.state.skillsList} selectedArmorSet={this.state.selectedArmorSet}  />\n            \n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n weaponList: state.weaponListReducer.result,\n armorList: state.armorListReducer.result,\n charmList: state.charmListReducer.result,\n decorationList: state.decorationListReducer.result,\n skillsList: state.skillsListReducer.result,\n});\n\nconst mapDispatchToProps = dispatch => ({\n getWeaponList: () => dispatch(getWeaponList()),\n getArmorList: () => dispatch(getArmorList()),\n getCharmList: () => dispatch(getCharmList()),\n getDecorationList: () => dispatch(getDecorationList()),\n getSkillsList: () => dispatch(getSkillsList()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport configureStore from './store';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<Provider store={configureStore()}>\n\t\t<App />\n\t</Provider>\n\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/rootReducer';\r\nexport default function configureStore(initialState={}) {\r\n return createStore(\r\n   rootReducer,\r\n   initialState,\r\n   applyMiddleware(thunk)\r\n );\r\n}"],"sourceRoot":""}
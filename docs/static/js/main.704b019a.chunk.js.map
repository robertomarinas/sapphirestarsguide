{"version":3,"sources":["reducers/rootReducer.js","reducers/reducer_getWeaponList.js","reducers/reducer_getArmorList.js","reducers/reducer_getCharmList.js","reducers/reducer_getDecorationList.js","reducers/reducer_getSkillsList.js","actions/action_getWeaponList.js","actions/action_getArmorList.js","actions/action_getCharmList.js","actions/action_getDecorationList.js","actions/action_getSkillsList.js","components/component_key_results.js","components/component_search_button_svg.js","components/component_main_search.js","components/component_slot_search.js","components/component_weapon_search.js","components/component_armor_part_search.js","components/component_armor_part.js","components/component_charm_search.js","components/component_armorLoadoutBuilder.js","components/component_skills_list.js","components/component_attack_status.js","components/component_element_status.js","components/component_sharpness_status.js","components/component_affinity_status.js","components/component_status_list.js","components/component_hunter_status.js","App.js","serviceWorker.js","index.js","store.js"],"names":["combineReducers","weaponListReducer","state","arguments","length","undefined","action","type","result","payload","armorListReducer","charmListReducer","decorationListReducer","skillsListReducer","weaponList","JSON","stringify","weaponJSON","getWeaponList","dispatch","parse","armorList","armorJSON","getArmorList","charmList","charmJSON","getCharmList","decorationList","decorationJSON","getDecorationList","skillsList","skillsJSON","getSkillsList","KeyResults","props","keyResult","gearList","radioSelect","map","gear","index","react_default","a","createElement","key","className","armorType","data-selected-index","data-equipment-type","data-selected-armor","armor","data-search-bar","onClick","onSelectedArmor","skills","skill","concat","skillName","level","keyResultsClasses","keyResultShow","onResultsToggle","SearchButtonSVG","width","height","version","viewBox","xmlns","fill","transform","d","strokeWidth","MainSearch","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onInputSearch","e","setState","searchVal","target","value","patternMatch","RegExp","keyMatchedArr","forEach","test","name","slug","toConsumableArray","sort","b","onRadioChange","onButtonSubmit","console","log","prevState","placeholder","onChange","component_search_button_svg","checked","component_key_results","Component","SlotSearch","onClearDeco","slotIndex","parseInt","getAttribute","slotRank","equipmentPart","inputString","onClearDecoResults","onFocusSlotSearch","decoPieces","decoResults","deco","slot","id","onSelectDecoInput","onDecoInput","pattern","decoType","selected","data-slot-rank","data-part","part","data-slot-index","onRemoveDecoPiece","onFocus","WeaponSearch","onSelectedWeapon","weaponSearchResults","onWeaponInputSearch","weaponPieces","weapon","data-selected-weapon","onClearInput","onRemovePart","onRemoveEquipmentPart","onSelectDeco","decoInputString","onSelectedDeco","_this2","armorPartContent","mapSlots","decoSearchResults","decoSearchResultsContainer","selectedArmorSet","partDecos","_props$selectedArmorS","slots","updateClass","component_slot_search","rank","active","activeDecoInputPart","res","data-deco-name","data-deco-index","data-deco-id","onSelectInput","activeInputPart","ArmorPartSearch","onSelectedArmorPart","armorSearchResults","onInputPartSearch","armorPieces","placeHolder","armorPart","data-deco-level","ArmorPart","armorPiece","headPieces","component_armor_part_search","clearedArmorPart","chestPieces","glovesPieces","waistPieces","legsPieces","CharmSearch","onSelectedCharm","charmSearchResults","onCharmInputSearch","charmPieces","charm","parentIndex","charmRanks","ranks","data-selected-rank","data-parent-index","data-index","data-armor-piece","ArmorLoadoutBuilder","selectedSlotIndex","selectedSlotRank","selectedSlotPart","component_weapon_search","component_armor_part","component_charm_search","SkillsList","displayActiveSkills","AttackStatus","selectedWeapon","attackModifiers","weaponModifier","selectedWeaponDisplay","modifiedAttack","rawDamage","modifiedRawDamage","selectedWeaponModifier","skillModifier","weaponType","display","attack","attackModifiersArray","entries","modifier","Math","round","ElementStatus","elementalRating","elements","elem","ifHiddenClass","hidden","damage","SharpnessStatus","weaponSharpness","sharpnessClassNames","sharpness","color","style","backgroundColor","AffinityStatus","affinityModifiers","totalAffinity","StatusList","activeArmorSkills","activeSkillsText","activeDefenseObj","defense","activeResistancesObj","fire","water","ice","thunder","dragon","hunterStatusModifiers","affinity","element","resistance","activeParts","piece","baseDefense","base","resistances","percent","modifiers","displayDefenseStatus","displayResistanceStatus","component_attack_status","component_element_status","elementModifiers","component_sharpness_status","component_affinity_status","HunterStatus","activeSkills","prevProps","_this$props","onSkillModifier","armorSkill","description","objectSpread","defineProperty","currentValueClass","ranksIndex","component_skills_list","component_status_list","App","weaponName","updatedActivePartsArray","activePartsRegEx","activePartsText","toString","decoState","searchString","results","decoIndex","updatePartDecos","charmName","armorName","searchBar","selectedArmor","filter","skillObject","currentSkillLevel","skillLevels","onActiveSkills","selectedDecoList","pieces","decoSearchString","head","chest","gloves","waist","legs","snapshot","href","component_main_search","component_armorLoadoutBuilder","component_hunter_status","connect","Boolean","window","location","hostname","match","ReactDOM","render","es","store","initialState","createStore","rootReducer","applyMiddleware","thunk","configureStore","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ug4yGAOeA,cAAgB,CAC9BC,kBCRc,WAAwB,IAAvBC,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAIG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACtC,OAAQC,EAAOC,MACd,IAAK,iBACJ,MAAO,CACNC,OAAQF,EAAOG,SAEjB,QACC,OAAOP,IDETQ,iBETc,WAAwB,IAAvBR,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAIG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACtC,OAAQC,EAAOC,MACd,IAAK,gBACJ,MAAO,CACNC,OAAQF,EAAOG,SAEjB,QACC,OAAOP,IFGTS,iBGVc,WAAwB,IAAvBT,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAIG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACtC,OAAQC,EAAOC,MACd,IAAK,gBACJ,MAAO,CACNC,OAAQF,EAAOG,SAEjB,QACC,OAAOP,IHITU,sBIXc,WAAwB,IAAvBV,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAIG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACtC,OAAQC,EAAOC,MACd,IAAK,qBACJ,MAAO,CACNC,OAAQF,EAAOG,SAEjB,QACC,OAAOP,IJKTW,kBKZc,WAAwB,IAAvBX,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAIG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACtC,OAAQC,EAAOC,MACd,IAAK,iBACJ,MAAO,CACNC,OAAQF,EAAOG,SAEjB,QACC,OAAOP,gFCJJY,EAAaC,KAAKC,UAAUC,GASnBC,EAPO,kBAAM,SAAAC,GAC3BA,EAAS,CACRZ,KAAM,iBACNE,QAASM,KAAKK,MAAMN,eCLhBO,EAAYN,KAAKC,UAAUM,GASlBC,EAPM,kBAAM,SAAAJ,GAC1BA,EAAS,CACRZ,KAAM,gBACNE,QAASM,KAAKK,MAAMC,eCLhBG,EAAYT,KAAKC,UAAUS,GASlBC,EAPM,kBAAM,SAAAP,GAC1BA,EAAS,CACRZ,KAAM,gBACNE,QAASM,KAAKK,MAAMI,eCLhBG,EAAiBZ,KAAKC,UAAUY,GASvBC,EAPW,kBAAM,SAAAV,GAC/BA,EAAS,CACRZ,KAAM,qBACNE,QAASM,KAAKK,MAAMO,eCLhBG,EAAaf,KAAKC,UAAUe,GASnBC,EAPO,kBAAM,SAAAb,GAC3BA,EAAS,CACRZ,KAAM,iBACNE,QAASM,KAAKK,MAAMU,OC0BPG,SAhCI,SAACC,GAEnB,GAA8B,IAA3BA,EAAMC,UAAU/B,OAClB,OAAO,KAGR,IAAIgC,EACqB,UAAtBF,EAAMG,YACRD,EAAWF,EAAMC,UAAUG,IAAI,SAACC,EAAMC,GAAP,OAAiBC,EAAAC,EAAAC,cAAA,MAAIC,IAAKJ,GAAOC,EAAAC,EAAAC,cAAA,UAAQE,UAAWN,EAAKO,UAAWC,sBAAqBR,EAAKC,MAAOQ,sBAAqBT,EAAKO,UAAWG,sBAAqBV,EAAKW,MAAOC,kBAAgB,cAAcC,QAASlB,EAAMmB,iBAAkBd,EAAKW,UAC/O,UAAtBhB,EAAMG,cACfD,EAAWF,EAAMC,UAAUG,IAAI,SAACC,EAAMC,GACrC,OACCC,EAAAC,EAAAC,cAAA,MAAIC,IAAKJ,GACRC,EAAAC,EAAAC,cAAA,UAAQE,UAAWN,EAAKO,UAAWC,sBAAqBR,EAAKC,MAAOQ,sBAAqBT,EAAKO,UAAWG,sBAAqBV,EAAKW,MAAOC,kBAAgB,cAAcC,QAASlB,EAAMmB,iBACrLd,EAAKW,MADP,MACkBX,EAAKe,OAAOhB,IAAI,SAACiB,EAAOf,GAAR,SAAAgB,OAAqBD,EAAME,UAA3B,MAAAD,OAAyCD,EAAMG,cAOrF,IAAMC,EAAoBzB,EAAM0B,cAAgB,mBAAqB,mBAErE,OACCnB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,yBACdJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,+BAA+BO,QAASlB,EAAM2B,iBAAhE,kBACApB,EAAAC,EAAAC,cAAA,MAAIE,UAAWc,GAAqBvB,MCbxB0B,EAbS,SAAC5B,GAExB,OACCO,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,OAAKoB,MAAO7B,EAAM6B,MAAOC,OAAQ9B,EAAM8B,OAAQC,QAAQ,MAAMC,QAAQ,oBAAoBC,MAAM,8BAC9F1B,EAAAC,EAAAC,cAAA,KAAGyB,KAAK,OAAOC,UAAU,wBACxB5B,EAAAC,EAAAC,cAAA,QAAM2B,EAAE,ygCAAygCC,YAAY,gBCsGnhCC,cAvGd,SAAAA,EAAYtC,GAAO,IAAAuC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAClBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAM1C,KAcP8C,cAAgB,SAACC,GAKhB,GAHAR,EAAKS,SAAS,CAAEC,UAAWF,EAAEG,OAAOC,QAGd,KAAnBJ,EAAEG,OAAOC,MAAZ,CAKA,IAAMC,EAAe,IAAIC,OAAJ,IAAA/B,OAAeyB,EAAEG,OAAOC,OAAS,KAElDG,EAAgB,GAEU,UAA3Bf,EAAKvE,MAAMmC,aACboC,EAAKvC,MAAMb,UAAUoE,QAAQ,SAAClD,EAAMC,GAChC8C,EAAaI,KAAKnD,EAAKoD,QACzBH,EAAa,CAAK,CAAEtC,MAAOX,EAAKoD,KAAMC,KAAMrD,EAAKqD,KAAM9C,UAAWP,EAAKhC,KAAMiC,UAAhEgB,OAAAkB,OAAAmB,EAAA,EAAAnB,CAA4Ec,OAI3FA,EAAcM,KAAK,SAACpD,EAAEqD,GAAH,OAASrD,EAAEQ,MAAQ6C,EAAE7C,MAAQ,GAAK,KAEhB,UAA3BuB,EAAKvE,MAAMmC,cACrBoC,EAAKvC,MAAMb,UAAUoE,QAAQ,SAAClD,EAAMC,GACnCD,EAAKe,OAAOmC,QAAQ,SAAAlC,GAChB+B,EAAaI,KAAKnC,EAAME,aAC1B+B,EAAa,CAAK,CAAEtC,MAAOX,EAAKoD,KAAMC,KAAMrD,EAAKqD,KAAM9C,UAAWP,EAAKhC,KAAMmD,MAAOH,EAAMG,MAAOlB,QAAOc,OAAOoB,OAAAmB,EAAA,EAAAnB,CAAMnC,EAAKe,UAA7GE,OAAAkB,OAAAmB,EAAA,EAAAnB,CAA4Hc,SAK5IA,EAAcM,KAAK,SAACpD,EAAEqD,GAAH,OAASA,EAAErC,MAAQhB,EAAEgB,SAGzCe,EAAKS,SAAS,CAAE/C,UAAWqD,SA7B1Bf,EAAKS,SAAS,CAAE/C,UAAW,MArBVsC,EA0DnBuB,cAAgB,SAACf,GAChBR,EAAKS,SAAS,CAAEC,UAAW,KAC3BV,EAAKS,SAAS,CAAE/C,UAAW,KAC3BsC,EAAKS,SAAS,CAAE7C,YAAa4C,EAAEG,OAAOC,SA7DpBZ,EAgEnBwB,eAAiB,SAAChB,GACjB,MAA4B,KAAzBR,EAAKvE,MAAMiF,eACbe,QAAQC,IAAI,4DAE6B,IAAhC1B,EAAKvE,MAAMiC,UAAU/B,YAC9B8F,QAAQC,IAAI,qDAGZD,QAAQC,IAAI,oEAxEK1B,EA6EnBZ,gBAAkB,SAACoB,GAClBR,EAAKS,SAAS,SAAAkB,GAAS,MAAK,CAAExC,eAAgBwC,EAAUxC,kBA3ExDa,EAAKvE,MAAQ,CACZiF,UAAW,GACX9C,YAAa,QACbF,UAAW,GACXyB,eAAe,GAPEa,wEAmFlB,OACChC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBACdJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,wBACdJ,EAAAC,EAAAC,cAAA,SAAOE,UAAU,aAAatC,KAAK,OAAO8F,YAAwC,UAA3BzB,KAAK1E,MAAMmC,YAA0B,iCAAmC,wBAAyBiE,SAAU1B,KAAKI,cAAeK,MAAOT,KAAK1E,MAAMiF,YACxM1C,EAAAC,EAAAC,cAAA,UAAQE,UAAU,aAAaO,QAASwB,KAAKqB,gBAAgBxD,EAAAC,EAAAC,cAAC4D,EAAD,CAAiBxC,MAAO,GAAIC,OAAQ,OAGlGvB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,6BACdJ,EAAAC,EAAAC,cAAA,uBAAcF,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAAA,SAAOpC,KAAK,QAAQoF,KAAK,WAAWW,SAAU1B,KAAKoB,cAAeQ,QAAoC,UAA3B5B,KAAK1E,MAAMmC,YAAyBgD,MAAM,UAA3H,SAAd,IAA+J5C,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAAA,SAAOpC,KAAK,QAAQoF,KAAK,WAAWW,SAAU1B,KAAKoB,cAAeQ,QAAoC,UAA3B5B,KAAK1E,MAAMmC,YAAyBgD,MAAM,UAA3H,WAGhK5C,EAAAC,EAAAC,cAAC8D,EAAD,CAAYtE,UAAWyC,KAAK1E,MAAMiC,UAAWE,YAAauC,KAAK1E,MAAMmC,YAAagB,gBAAiBuB,KAAK1C,MAAMmB,gBAAiBQ,gBAAiBe,KAAKf,gBAAiBD,cAAegB,KAAK1E,MAAM0D,yBAjG5K8C,aCmHVC,cAhHd,SAAAA,EAAYzE,GAAO,IAAAuC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+B,IAClBlC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiC,GAAA5B,KAAAH,KAAM1C,KAOP0E,YAAc,SAAC3B,GACd,IAAM4B,EAAYC,SAAS7B,EAAEG,OAAO2B,aAAa,oBAC3CC,EAAWF,SAAS7B,EAAEG,OAAO2B,aAAa,mBAC1CE,EAAgBhC,EAAEG,OAAO2B,aAAa,aAE5CtC,EAAKS,SAAS,CAAEgC,YAAa,IAAMzC,EAAKvC,MAAMiF,mBAAmBN,EAAUG,EAASC,KAblExC,EAgBnB2C,kBAAoB,SAACnC,GACpB,IAAM4B,EAAYC,SAAS7B,EAAEG,OAAO2B,aAAa,oBAC3CC,EAAWF,SAAS7B,EAAEG,OAAO2B,aAAa,mBAC1CE,EAAgBhC,EAAEG,OAAO2B,aAAa,aAGtCM,EAAc5C,EAAKvC,MAAMP,eAE3B2F,EAAc,GAUlBD,EAAW5B,QAAQ,SAAA8B,GACdA,EAAKC,MAAQR,GACdO,EAAKjE,OAAOmC,QAAQ,SAAAlC,GAClB+D,EAAW,CAAK,CAAEG,GAAIlE,EAAMkE,GAAIhE,UAAWF,EAAME,UAAWC,MAAOH,EAAMG,MAAOsD,WAAUQ,KAAMD,EAAKC,OAA1FhE,OAAAkB,OAAAmB,EAAA,EAAAnB,CAAqG4C,QAMtHA,EAAYxB,KAAK,SAACpD,EAAEqD,GAAH,OAASrD,EAAEe,UAAYsC,EAAEtC,UAAY,GAAK,IAG3DgB,EAAKvC,MAAMwF,kBAAkBb,EAAUG,EAASC,EAAcK,IA9C5C7C,EAiDnBkD,YAAc,SAAC1C,GAGd,IAAMiC,EAAcjC,EAAEG,OAAOC,MACvBwB,EAAYC,SAAS7B,EAAEG,OAAO2B,aAAa,oBAC3CC,EAAWF,SAAS7B,EAAEG,OAAO2B,aAAa,mBAC1CE,EAAgBhC,EAAEG,OAAO2B,aAAa,aAGtCM,EAAc5C,EAAKvC,MAAMP,eAE3B2F,EAAc,GAEdM,EAAU,IAAIrC,OAAJ,KAAA/B,OAAgByB,EAAEG,OAAOC,MAAzB,KAAkC,KAEhDgC,EAAW5B,QAAQ,SAAA8B,GACjBA,EAAKjE,OAAOmC,QAAQ,SAAAlC,GACfqE,EAAQlC,KAAKnC,EAAME,YACjB8D,EAAKC,MAAQR,IACdM,EAAW,CAAK,CAAEG,GAAIlE,EAAMkE,GAAIhE,UAAWF,EAAME,UAAWuD,WAAWQ,KAAMD,EAAKC,KAAM9D,MAAOH,EAAMG,QAA1FF,OAAAkB,OAAAmB,EAAA,EAAAnB,CAAsG4C,SAOzHA,EAAYxB,KAAK,SAACpD,EAAEqD,GAAH,OAASrD,EAAEe,UAAYsC,EAAEtC,UAAY,GAAK,IAE3DgB,EAAKS,SAAS,CAAEgC,eAAezC,EAAKvC,MAAMwF,kBAAkBb,EAAUG,EAASC,EAAcK,KA1E7F7C,EAAKvE,MAAQ,CACZgH,YAAa,IAJIzC,wEAgFV,IACAvC,EAAU0C,KAAV1C,MACA8E,EAAapC,KAAK1C,MAAlB8E,SACJa,EAAW,GAEf,OAAQb,GACP,KAAK,EACJa,EAAW,WACX,MACD,KAAK,EACJA,EAAW,WACX,MACD,KAAK,EACJA,EAAW,aAMb,OAAG3F,EAAM4F,SAASrE,UACVhB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,2BAA0BJ,EAAAC,EAAAC,cAAA,QAAME,UAAWgF,GAAW3F,EAAM4F,SAASrE,WAAiBhB,EAAAC,EAAAC,cAAA,UAAQE,UAAU,wBAAwBkF,iBAAgBf,EAAUgB,YAAW9F,EAAM+F,KAAMC,kBAAiBhG,EAAM2E,UAAWzD,QAASlB,EAAMiG,qBAIxP1F,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kBACdJ,EAAAC,EAAAC,cAAA,SAAOE,UAAWgF,EAAUtH,KAAK,OAAOwH,iBAAgBf,EAAUgB,YAAW9F,EAAM+F,KAAMC,kBAAiBhG,EAAM2E,UAAWuB,QAASxD,KAAKwC,kBAAmBd,SAAU1B,KAAK+C,YAAatC,MAAOT,KAAK1E,MAAMgH,cAC1MzE,EAAAC,EAAAC,cAAA,UAAQE,UAAU,eAAekF,iBAAgBf,EAAUgB,YAAW9F,EAAM+F,KAAMC,kBAAiBhG,EAAM2E,UAAWzD,QAASwB,KAAKgC,aAAlI,iBA5GqBF,aCsIV2B,cAtId,SAAAA,EAAYnG,GAAO,IAAAuC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAyD,IAClB5D,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2D,GAAAtD,KAAAH,KAAM1C,KASPoG,iBAAmB,SAACrD,GACnBR,EAAKS,SAAS,CACbqD,oBAAqB,IACnB9D,EAAKvC,MAAMoG,iBAAiBrD,KAbbR,EAgBnB+D,oBAAsB,SAACvD,GAEtB,IAAMiC,EAAcjC,EAAEG,OAAOC,MACvBuC,EAAU,IAAIrC,OAAJ,IAAA/B,OAAeyB,EAAEG,OAAOC,OAAQ,KAC5CkD,EAAsB,GACpBE,EAAehE,EAAKvC,MAAMpB,WAGhC2H,EAAa3C,KAAK,SAACpD,EAAEqD,GAAH,OAASrD,EAAEiD,KAAOI,EAAEJ,KAAO,GAAK,IAElD8C,EAAahD,QAAQ,SAACiD,EAAQlG,GACzBoF,EAAQlC,KAAKgD,EAAO/C,OAA4B,KAAnBV,EAAEG,OAAOC,QACvCkD,EAAmB,CAAI9F,EAAAC,EAAAC,cAAA,MAAIC,IAAKJ,GAAOC,EAAAC,EAAAC,cAAA,UAAQgG,uBAAsBD,EAAO/C,KAAM5C,sBAAqBP,EAAOY,QAASqB,EAAK6D,kBAAmBI,EAAO/C,QAAnInC,OAAAkB,OAAAmB,EAAA,EAAAnB,CAA2J6D,OAIlL9D,EAAKS,SAAS,CAAEgC,cAAaqB,yBAhCX9D,EAmCnBmE,aAAe,SAAC3D,GACfR,EAAKS,SAAS,CAAEgC,YAAa,GAAIqB,oBAAqB,MApCpC9D,EAuCnBoE,aAAe,SAAC5D,GACfR,EAAKS,SAAS,CACbgC,YAAa,GACbqB,oBAAqB,IACnB9D,EAAKvC,MAAM4G,sBAAsB7D,KA3ClBR,EA8CnBsE,aAAe,SAAC9D,GACfR,EAAKS,SAAS,CAAE8D,gBAAiB,IAAMvE,EAAKvC,MAAM+G,eAAehE,KA5CjER,EAAKvE,MAAQ,CACZgH,YAAa,GACb8B,gBAAiB,GACjBT,oBAAqB,IANJ9D,wEAkDV,IAAAyE,EAAAtE,KAEA1C,EAAU0C,KAAV1C,MAEJiH,EAAmB,GACnBC,EAAW,GACXC,EAAoB,GACpBC,EAA6B,GAEjC,GAAoD,OAAjDpH,EAAMqH,iBAAN,gBAAuD,KACjDC,EAActH,EAAMqH,iBAAN,OAAdC,UADiDC,EAEjCvH,EAAMqH,iBAAN,gBAAhBhJ,EAFiDkJ,EAEjDlJ,KAAMmJ,EAF2CD,EAE3CC,MAERC,EAAW,4BAAAnG,OAA+BjD,GAE7CmJ,EAAMtJ,OAAS,IAEjBgJ,EAAWI,EAAUlH,IAAI,SAACkF,EAAMhF,GAC/B,OAAOC,EAAAC,EAAAC,cAACiH,EAAD,CAAYhH,IAAKJ,EAAOqE,UAAWrE,EAAOwE,SAAUQ,EAAKqC,KAAMC,OAAQtC,EAAKsC,OAAQ7B,KAAK,SAAStG,eAAgBO,EAAMP,eAAgBmG,SAAU0B,EAAUhH,GAAQuH,oBAAqB7H,EAAM6H,oBAAqBrC,kBAAmBxF,EAAMwF,kBAAmBuB,eAAgB/G,EAAM+G,eAAgB9B,mBAAoBjF,EAAMiF,mBAAoBgB,kBAAmBjG,EAAMiG,uBAItXgB,EAAmB1G,EAAAC,EAAAC,cAAA,OAAKE,UAAW8G,GACnClH,EAAAC,EAAAC,cAAA,aAAQT,EAAMqH,iBAAN,sBACR9G,EAAAC,EAAAC,cAAA,UAAQE,UAAU,wBAAwBG,sBAAoB,SAASI,QAASwB,KAAKiE,gBAGlF3G,EAAM6H,qBAAmE,WAA5C7H,EAAM6H,oBAAoB9C,eACzDuC,EAAU/D,QAAQ,SAAC+B,EAAMX,GACrBA,IAAc3E,EAAM6H,oBAAoBlD,YAC1CwC,EAAoBnH,EAAM6H,oBAAoBzC,YAAYhF,IAAI,SAAC0H,EAAIxH,GAClE,OACCC,EAAAC,EAAAC,cAAA,MAAIC,IAAKJ,GACRC,EAAAC,EAAAC,cAAA,UAAQsH,iBAAgBD,EAAIvG,UAAWuE,YAAU,SAASkC,kBAAiB1H,EAAO2H,eAAcH,EAAIvC,GAAIM,iBAAgBiC,EAAIxC,KAAMU,kBAAiBrB,EAAWzD,QAAS8F,EAAKH,cAC1KiB,EAAIvG,cAMT6F,EAA6B7G,EAAAC,EAAAC,cAAA,MAAIE,UAAU,wBAAwBwG,WAqBtEF,EAAmB1G,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBAChCJ,EAAAC,EAAAC,cAAA,SAAOE,UAAU,iBAAiBtC,KAAK,OAAO8F,YAAY,2BAA2BrD,sBAAoB,SAASI,QAASlB,EAAMkI,cAAe9D,SAAU1B,KAAK4D,oBAAqBnD,MAAOT,KAAK1E,MAAMgH,cACtMzE,EAAAC,EAAAC,cAAA,UAAQE,UAAU,eAAeG,sBAAoB,SAASI,QAASwB,KAAKgE,cAA5E,UAIH,IAAML,EAAgD,WAA1BrG,EAAMmI,gBAA+B5H,EAAAC,EAAAC,cAAA,MAAIE,UAAU,4BAA4B+B,KAAK1E,MAAMqI,qBAA4B,GAElJ,OACC9F,EAAAC,EAAAC,cAAA,OAAKE,UAAU,wBACbsG,EACD1G,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACbuG,EACAE,GAEDf,UAhIsB7B,aC+JZ4D,cA7Jd,SAAAA,EAAYpI,GAAO,IAAAuC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA0F,IAClB7F,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4F,GAAAvF,KAAAH,KAAM1C,KASPqI,oBAAsB,SAACtF,GACtBR,EAAKS,SAAS,CACbsF,mBAAoB,IAClB/F,EAAKvC,MAAMmB,gBAAgB4B,KAbZR,EAgBnBgG,kBAAoB,SAACxF,GACpB,IAAMiC,EAAcjC,EAAEG,OAAOC,MACvBvC,EAAYmC,EAAEG,OAAO2B,aAAa,uBAC/B2D,EAAcjG,EAAKvC,MAAMqH,iBAAiBzG,GAA5B,OAEhB0H,EAAqB,GACrB5C,EAAU,IAAIrC,OAAJ,IAAA/B,OAAeyB,EAAEG,OAAOC,OAAQ,KAG9CqF,EAAY5E,KAAK,SAACpD,EAAEqD,GAAH,OAASrD,EAAEiD,KAAOI,EAAEJ,KAAO,GAAK,IAEjD+E,EAAYjF,QAAQ,SAACvC,EAAOV,GACvBoF,EAAQlC,KAAKxC,EAAMyC,OAA4B,KAAnBV,EAAEG,OAAOC,QAEtCmF,EAAkB,CAAI/H,EAAAC,EAAAC,cAAA,MAAIC,IAAKJ,GAAOC,EAAAC,EAAAC,cAAA,UAAQK,sBAAqBE,EAAM3C,KAAM0C,sBAAqBC,EAAMyC,KAAM5C,sBAAqBP,EAAOY,QAASqB,EAAK8F,qBAAsBrH,EAAMyC,QAApKnC,OAAAkB,OAAAmB,EAAA,EAAAnB,CAA4L8F,OAGlN/F,EAAKS,SAAS,CAAEgC,cAAasD,wBAjCd/F,EAoCnBmE,aAAe,SAAC3D,GACfR,EAAKS,SAAS,CAAEgC,YAAa,GAAIsD,mBAAoB,MArCnC/F,EAwCnBoE,aAAe,SAAC5D,GACfR,EAAKS,SAAS,CACbgC,YAAa,GACbsD,mBAAoB,IAClB/F,EAAKvC,MAAM4G,sBAAsB7D,KA5ClBR,EA+CnBsE,aAAe,SAAC9D,GACfR,EAAKS,SAAS,CAAE8D,gBAAiB,IAAMvE,EAAKvC,MAAM+G,eAAehE,KA7CjER,EAAKvE,MAAQ,CACZgH,YAAa,GACb8B,gBAAiB,GACjBwB,mBAAoB,IANH/F,wEAmDV,IAAAyE,EAAAtE,KAEA1C,EAAU0C,KAAV1C,MAEJiH,EAAmB,GACnBC,EAAW,GACXC,EAAoB,GACpBC,EAA6B,GAC7BqB,EAAc,GAElB,OAAQzI,EAAM0I,WAEb,IAAK,OACJD,EAAc,2BACd,MACD,IAAK,QACJA,EAAc,0BACd,MACD,IAAK,SACJA,EAAc,2BACd,MACD,IAAK,QACJA,EAAc,6BACd,MACD,IAAK,OACJA,EAAc,4BAMhB,GAA2D,OAAxDzI,EAAMqH,iBAAiBrH,EAAM0I,WAA7B,SAA8D,KACxDpB,EAActH,EAAMqH,iBAAiBrH,EAAM0I,WAA3CpB,UADwDC,EAExCvH,EAAMqH,iBAAiBrH,EAAM0I,WAA7B,SAAhBrK,EAFwDkJ,EAExDlJ,KAAMmJ,EAFkDD,EAElDC,MAERC,EAAW,4BAAAnG,OAA+BjD,GAE7CmJ,EAAMtJ,OAAS,IAEjBgJ,EAAWI,EAAUlH,IAAI,SAACkF,EAAMhF,GAC/B,OAAOC,EAAAC,EAAAC,cAACiH,EAAD,CAAYhH,IAAKJ,EAAOqE,UAAWrE,EAAOwE,SAAUQ,EAAKqC,KAAMC,OAAQtC,EAAKsC,OAAQP,iBAAkBrH,EAAMqH,iBAAkBtB,KAAM/F,EAAM0I,UAAWjJ,eAAgBO,EAAMP,eAAgBmG,SAAU0B,EAAUhH,GAAQuH,oBAAqB7H,EAAM6H,oBAAqBrC,kBAAmBxF,EAAMwF,kBAAmBuB,eAAgB/G,EAAM+G,eAAgB9B,mBAAoBjF,EAAMiF,mBAAoBgB,kBAAmBjG,EAAMiG,uBAIzagB,EAAmB1G,EAAAC,EAAAC,cAAA,OAAKE,UAAW8G,GACnClH,EAAAC,EAAAC,cAAA,aAAQT,EAAMqH,iBAAiBrH,EAAM0I,WAA7B,eACRnI,EAAAC,EAAAC,cAAA,UAAQE,UAAU,wBAAwBG,sBAAqBd,EAAM0I,UAAWxH,QAASwB,KAAKiE,gBAG3F3G,EAAM6H,qBAAuB7H,EAAM6H,oBAAoB9C,gBAAkB/E,EAAM0I,WACjFpB,EAAU/D,QAAQ,SAAC+B,EAAMX,GACrBA,IAAc3E,EAAM6H,oBAAoBlD,YAC1CwC,EAAoBnH,EAAM6H,oBAAoBzC,YAAYhF,IAAI,SAAC0H,EAAIxH,GAClE,OACCC,EAAAC,EAAAC,cAAA,MAAIC,IAAKJ,GACRC,EAAAC,EAAAC,cAAA,UAAQsH,iBAAgBD,EAAIvG,UAAWuE,YAAW9F,EAAM0I,UAAWV,kBAAiB1H,EAAO2H,eAAcH,EAAIvC,GAAIoD,kBAAiBb,EAAItG,MAAOqE,iBAAgBiC,EAAIxC,KAAMU,kBAAiBrB,EAAWzD,QAAS8F,EAAKH,cAC/MiB,EAAIvG,cAMT6F,EAA6B7G,EAAAC,EAAAC,cAAA,MAAIE,UAAU,wBAAwBwG,WAuBtEF,EAAmB1G,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBAChCJ,EAAAC,EAAAC,cAAA,SAAOE,UAAWX,EAAM0I,UAAWrK,KAAK,OAAOyC,sBAAqBd,EAAM0I,UAAWxH,QAASlB,EAAMkI,cAAe9D,SAAU1B,KAAK6F,kBAAmBpE,YAAasE,EAAatF,MAAOT,KAAK1E,MAAMgH,cACjMzE,EAAAC,EAAAC,cAAA,UAAQE,UAAU,eAAeG,sBAAqBd,EAAM0I,UAAWxH,QAASwB,KAAKgE,cAArF,UAIH,IAAM4B,EAAqBtI,EAAMmI,kBAAoBnI,EAAM0I,UAAYnI,EAAAC,EAAAC,cAAA,MAAIE,UAAU,4BAA4B+B,KAAK1E,MAAMsK,oBAA2B,GAEvJ,OACC/H,EAAAC,EAAAC,cAAA,OAAKE,UAAU,wBACbsG,EACD1G,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACbuG,EACAE,GAEDkB,UAzJyB9D,aC2EfoE,EA3EG,SAAC5I,GAElB,IAAI6I,EAAa,GAEjB,OAAQ7I,EAAM6I,YAEb,IAAK,OAEJ,IAAIC,EAAa,GAEjB9I,EAAMb,UAAUoE,QAAQ,SAACvC,EAAOV,GACR,SAApBU,EAAMJ,YACRkI,EAAU,CAAI,CAAErF,KAAMzC,EAAMyC,KAAMC,KAAM1C,EAAM0C,KAAM9C,UAAWI,EAAMJ,YAA3DU,OAAAkB,OAAAmB,EAAA,EAAAnB,CAA0EsG,OAItFD,EAAatI,EAAAC,EAAAC,cAACsI,EAAD,CAAiBP,YAAaM,EAAYJ,UAAU,OAAOM,iBAAkBhJ,EAAMgJ,iBAAkBvJ,eAAgBO,EAAMP,eAAgB4H,iBAAkBrH,EAAMqH,iBAAkBlG,gBAAiBnB,EAAMmB,gBAAiB4F,eAAgB/G,EAAM+G,eAAgBoB,gBAAiBnI,EAAMmI,gBAAiBD,cAAelI,EAAMkI,cAAeL,oBAAqB7H,EAAM6H,oBAAqBrC,kBAAmBxF,EAAMwF,kBAAmBP,mBAAoBjF,EAAMiF,mBAAoBgB,kBAAmBjG,EAAMiG,kBAAmBW,sBAAuB5G,EAAM4G,wBAE/iB,MAED,IAAK,QACJ,IAAIqC,EAAc,GAClBjJ,EAAMb,UAAUoE,QAAQ,SAACvC,EAAOV,GACR,UAApBU,EAAMJ,YACRqI,EAAW,CAAI,CAAExF,KAAMzC,EAAMyC,KAAMC,KAAM1C,EAAM0C,KAAM9C,UAAWI,EAAMJ,YAA3DU,OAAAkB,OAAAmB,EAAA,EAAAnB,CAA0EyG,OAIvFJ,EAAatI,EAAAC,EAAAC,cAACsI,EAAD,CAAiBP,YAAaS,EAAaP,UAAU,QAAQM,iBAAkBhJ,EAAMgJ,iBAAkBvJ,eAAgBO,EAAMP,eAAgB4H,iBAAkBrH,EAAMqH,iBAAkBlG,gBAAiBnB,EAAMmB,gBAAiB4F,eAAgB/G,EAAM+G,eAAgBoB,gBAAiBnI,EAAMmI,gBAAiBD,cAAelI,EAAMkI,cAAeL,oBAAqB7H,EAAM6H,oBAAqBrC,kBAAmBxF,EAAMwF,kBAAmBP,mBAAoBjF,EAAMiF,mBAAoBgB,kBAAmBjG,EAAMiG,kBAAmBW,sBAAuB5G,EAAM4G,wBAEjjB,MAED,IAAK,SACJ,IAAIsC,EAAe,GACnBlJ,EAAMb,UAAUoE,QAAQ,SAACvC,EAAOV,GACR,WAApBU,EAAMJ,YACRsI,EAAY,CAAI,CAAEzF,KAAMzC,EAAMyC,KAAMC,KAAM1C,EAAM0C,KAAM9C,UAAWI,EAAMJ,YAA3DU,OAAAkB,OAAAmB,EAAA,EAAAnB,CAA0E0G,OAIxFL,EAAatI,EAAAC,EAAAC,cAACsI,EAAD,CAAiBP,YAAaU,EAAcR,UAAU,SAASM,iBAAkBhJ,EAAMgJ,iBAAkBvJ,eAAgBO,EAAMP,eAAgB4H,iBAAkBrH,EAAMqH,iBAAkBlG,gBAAiBnB,EAAMmB,gBAAiB4F,eAAgB/G,EAAM+G,eAAgBoB,gBAAiBnI,EAAMmI,gBAAiBD,cAAelI,EAAMkI,cAAeL,oBAAqB7H,EAAM6H,oBAAqBrC,kBAAmBxF,EAAMwF,kBAAmBP,mBAAoBjF,EAAMiF,mBAAoBgB,kBAAmBjG,EAAMiG,kBAAmBW,sBAAuB5G,EAAM4G,wBAEnjB,MAED,IAAK,QACJ,IAAIuC,EAAc,GAClBnJ,EAAMb,UAAUoE,QAAQ,SAACvC,EAAOV,GACR,UAApBU,EAAMJ,YACRuI,EAAW,CAAI,CAAE1F,KAAMzC,EAAMyC,KAAMC,KAAM1C,EAAM0C,KAAM9C,UAAWI,EAAMJ,YAA3DU,OAAAkB,OAAAmB,EAAA,EAAAnB,CAA0E2G,OAIvFN,EAAatI,EAAAC,EAAAC,cAACsI,EAAD,CAAiBP,YAAaW,EAAaT,UAAU,QAAQM,iBAAkBhJ,EAAMgJ,iBAAkBvJ,eAAgBO,EAAMP,eAAgB4H,iBAAkBrH,EAAMqH,iBAAkBlG,gBAAiBnB,EAAMmB,gBAAiB4F,eAAgB/G,EAAM+G,eAAgBoB,gBAAiBnI,EAAMmI,gBAAiBD,cAAelI,EAAMkI,cAAeL,oBAAqB7H,EAAM6H,oBAAqBrC,kBAAmBxF,EAAMwF,kBAAmBP,mBAAoBjF,EAAMiF,mBAAoBgB,kBAAmBjG,EAAMiG,kBAAmBW,sBAAuB5G,EAAM4G,wBAEjjB,MAED,IAAK,OACJ,IAAIwC,EAAa,GACjBpJ,EAAMb,UAAUoE,QAAQ,SAACvC,EAAOV,GACR,SAApBU,EAAMJ,YACRwI,EAAU,CAAI,CAAE3F,KAAMzC,EAAMyC,KAAMC,KAAM1C,EAAM0C,KAAM9C,UAAWI,EAAMJ,YAA3DU,OAAAkB,OAAAmB,EAAA,EAAAnB,CAA0E4G,OAItFP,EAAatI,EAAAC,EAAAC,cAACsI,EAAD,CAAiBP,YAAaY,EAAYV,UAAU,OAAOM,iBAAkBhJ,EAAMgJ,iBAAkBvJ,eAAgBO,EAAMP,eAAgB4H,iBAAkBrH,EAAMqH,iBAAkBlG,gBAAiBnB,EAAMmB,gBAAiB4F,eAAgB/G,EAAM+G,eAAgBoB,gBAAiBnI,EAAMmI,gBAAiBD,cAAelI,EAAMkI,cAAeL,oBAAqB7H,EAAM6H,oBAAqBrC,kBAAmBxF,EAAMwF,kBAAmBP,mBAAoBjF,EAAMiF,mBAAoBgB,kBAAmBjG,EAAMiG,kBAAmBW,sBAAuB5G,EAAM4G,wBAQjjB,OAAOiC,GCKOQ,cA7Ed,SAAAA,EAAYrJ,GAAO,IAAAuC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2G,IAClB9G,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6G,GAAAxG,KAAAH,KAAM1C,KAQPsJ,gBAAkB,SAACvG,GAClBR,EAAKS,SAAS,CACbuG,mBAAoB,IAClBhH,EAAKvC,MAAMsJ,gBAAgBvG,KAZZR,EAenBiH,mBAAqB,SAACzG,GAErB,IAAMiC,EAAcjC,EAAEG,OAAOC,MACvBuC,EAAU,IAAIrC,OAAJ,IAAA/B,OAAeyB,EAAEG,OAAOC,OAAQ,KAC5CoG,EAAqB,GACnBE,EAAclH,EAAKvC,MAAMV,UAG/BmK,EAAY7F,KAAK,SAACpD,EAAEqD,GAAH,OAASrD,EAAEiD,KAAOI,EAAEJ,KAAO,GAAK,IAEjDgG,EAAYlG,QAAQ,SAACmG,EAAOC,GAC1B,GAAGjE,EAAQlC,KAAKkG,EAAMjG,OAA4B,KAAnBV,EAAEG,OAAOC,MAAc,CACpD,IAAMyG,EAAaF,EAAMG,MAAMzJ,IAAI,SAACuH,EAAMrH,GACxC,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,IAAKJ,GAAOC,EAAAC,EAAAC,cAAA,UAAQqJ,qBAAoBnC,EAAKlE,KAAMsG,oBAAmBJ,EAAaK,aAAY1J,EAAOY,QAASqB,EAAK+G,iBAAkB3B,EAAKlE,SAGxJ8F,EAAkB,CAAIK,GAAJtI,OAAAkB,OAAAmB,EAAA,EAAAnB,CAAmB+G,OAIzChH,EAAKS,SAAS,CAAEgC,cAAauE,wBAnCXhH,EAsCnBmE,aAAe,SAAC3D,GACfR,EAAKS,SAAS,CAAEgC,YAAa,GAAIuE,mBAAoB,MAvCnChH,EA0CnBoE,aAAe,SAAC5D,GACfR,EAAKS,SAAS,CACbgC,YAAa,GACbuE,mBAAoB,IAClBhH,EAAKvC,MAAM4G,sBAAsB7D,KA3CpCR,EAAKvE,MAAQ,CACZgH,YAAa,GACbuE,mBAAoB,IALHhH,wEAiDV,IACAvC,EAAU0C,KAAV1C,MAEJiH,EAAmB,GACnBsC,EAAqB,GAezB,OAbmD,OAAhDvJ,EAAMqH,iBAAN,eACFJ,EAAmB1G,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kCAClCJ,EAAAC,EAAAC,cAAA,aAAQT,EAAMqH,iBAAN,qBACR9G,EAAAC,EAAAC,cAAA,UAAQE,UAAU,wBAAwBG,sBAAoB,QAAQI,QAASwB,KAAKiE,iBAEpF4C,EAA+C,UAA1BvJ,EAAMmI,gBAA8B5H,EAAAC,EAAAC,cAAA,MAAIE,UAAU,4BAA4B+B,KAAK1E,MAAMuL,oBAA2B,GAEzItC,EAAmB1G,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACjCJ,EAAAC,EAAAC,cAAA,SAAOE,UAAU,QAAQtC,KAAK,OAAO8F,YAAY,iBAAiBrD,sBAAoB,QAAQI,QAASlB,EAAMkI,cAAe9D,SAAU1B,KAAK8G,mBAAoBrG,MAAOT,KAAK1E,MAAMgH,cACjLzE,EAAAC,EAAAC,cAAA,UAAQE,UAAU,eAAesJ,mBAAiB,QAAQ/I,QAASwB,KAAKgE,cAAxE,WAKDnG,EAAAC,EAAAC,cAAA,OAAKE,UAAU,wBACbsG,EACAsC,UAzEqB/E,aCuFX0F,cAjFd,SAAAA,EAAYlK,GAAO,IAAAuC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwH,IAClB3H,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0H,GAAArH,KAAAH,KAAM1C,KAOPkI,cAAgB,SAACnF,GAChB,IAAMgC,EAAgBhC,EAAEG,OAAO2B,aAAa,uBAC5CtC,EAAKS,SAAS,CAAEmF,gBAAiBpD,EAAe8C,oBAAqB,QAVnDtF,EAanBiD,kBAAoB,SAACb,EAAWG,EAAUC,EAAeK,GACxD7C,EAAKS,SAAS,CACb6E,oBAAqB,CACpBlD,YACAG,WACAC,gBACAK,kBAnBgB7C,EAwBnBwE,eAAiB,SAAChE,GACjB,IAAMqC,EAAc7C,EAAKvE,MAAM6J,oBAAoBzC,YAEnD7C,EAAKS,SAAS,CACb6E,oBAAqB,MACnBtF,EAAKvC,MAAM+G,eAAehE,EAAGqC,KA7Bd7C,EAgCnB0C,mBAAqB,SAACN,EAAWG,EAAUC,GAC1C,GAAGxC,EAAKvE,MAAM6J,oBAAqB,CAClC,IAAMsC,EAAoB5H,EAAKvE,MAAM6J,oBAAoBlD,UACnDyF,EAAmB7H,EAAKvE,MAAM6J,oBAAoB/C,SAClDuF,EAAmB9H,EAAKvE,MAAM6J,oBAAoB9C,cAErDJ,IAAcwF,GAAqBrF,IAAasF,GAAoBrF,IAAkBsF,GACxF9H,EAAKS,SAAS,CAAE6E,oBAAqB,SArCvCtF,EAAKvE,MAAQ,CACZmK,gBAAiB,GACjBN,oBAAqB,MAJJtF,wEA4CV,IACAvC,EAAU0C,KAAV1C,MAER,OACCO,EAAAC,EAAAC,cAAA,OAAKE,UAAU,uBACdJ,EAAAC,EAAAC,cAAA,uBAEAF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kBACdJ,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,QAAME,UAAU,kBAAiBJ,EAAAC,EAAAC,cAAC6J,EAAD,CAAc1L,WAAYoB,EAAMpB,WAAYa,eAAgBO,EAAMP,eAAgB4H,iBAAkBrH,EAAMqH,iBAAkBjB,iBAAkBpG,EAAMoG,iBAAkB+B,gBAAiBzF,KAAK1E,MAAMmK,gBAAiBD,cAAexF,KAAKwF,cAAeL,oBAAqBnF,KAAK1E,MAAM6J,oBAAqBrC,kBAAmB9C,KAAK8C,kBAAmBuB,eAAgBrE,KAAKqE,eAAgB9B,mBAAoBvC,KAAKuC,mBAAoBgB,kBAAmBjG,EAAMiG,kBAAmBW,sBAAuB5G,EAAM4G,0BAEnhBrG,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,QAAME,UAAU,kBAAiBJ,EAAAC,EAAAC,cAAC8J,EAAD,CAAW1B,WAAW,OAAO1J,UAAWa,EAAMb,UAAWM,eAAgBO,EAAMP,eAAgB4H,iBAAkBrH,EAAMqH,iBAAkBlG,gBAAiBnB,EAAMmB,gBAAiBgH,gBAAiBzF,KAAK1E,MAAMmK,gBAAiBD,cAAexF,KAAKwF,cAAeL,oBAAqBnF,KAAK1E,MAAM6J,oBAAqBrC,kBAAmB9C,KAAK8C,kBAAmBuB,eAAgBrE,KAAKqE,eAAgB9B,mBAAoBvC,KAAKuC,mBAAoBgB,kBAAmBjG,EAAMiG,kBAAmBW,sBAAuB5G,EAAM4G,0BAE9hBrG,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,QAAME,UAAU,kBAAiBJ,EAAAC,EAAAC,cAAC8J,EAAD,CAAW1B,WAAW,QAAQ1J,UAAWa,EAAMb,UAAWM,eAAgBO,EAAMP,eAAgB4H,iBAAkBrH,EAAMqH,iBAAkBlG,gBAAiBnB,EAAMmB,gBAAiBgH,gBAAiBzF,KAAK1E,MAAMmK,gBAAiBD,cAAexF,KAAKwF,cAAeL,oBAAqBnF,KAAK1E,MAAM6J,oBAAqBrC,kBAAmB9C,KAAK8C,kBAAmBuB,eAAgBrE,KAAKqE,eAAgB9B,mBAAoBvC,KAAKuC,mBAAoBgB,kBAAmBjG,EAAMiG,kBAAmBW,sBAAuB5G,EAAM4G,0BAE/hBrG,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,QAAME,UAAU,kBAAiBJ,EAAAC,EAAAC,cAAC8J,EAAD,CAAW1B,WAAW,SAAS1J,UAAWa,EAAMb,UAAWM,eAAgBO,EAAMP,eAAgB4H,iBAAkBrH,EAAMqH,iBAAkBlG,gBAAiBnB,EAAMmB,gBAAiBgH,gBAAiBzF,KAAK1E,MAAMmK,gBAAiBD,cAAexF,KAAKwF,cAAeL,oBAAqBnF,KAAK1E,MAAM6J,oBAAqBrC,kBAAmB9C,KAAK8C,kBAAmBuB,eAAgBrE,KAAKqE,eAAgB9B,mBAAoBvC,KAAKuC,mBAAoBgB,kBAAmBjG,EAAMiG,kBAAmBW,sBAAuB5G,EAAM4G,0BAEhiBrG,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,QAAME,UAAU,kBAAiBJ,EAAAC,EAAAC,cAAC8J,EAAD,CAAW1B,WAAW,QAAQ1J,UAAWa,EAAMb,UAAWM,eAAgBO,EAAMP,eAAgB4H,iBAAkBrH,EAAMqH,iBAAkBlG,gBAAiBnB,EAAMmB,gBAAiBgH,gBAAiBzF,KAAK1E,MAAMmK,gBAAiBD,cAAexF,KAAKwF,cAAeL,oBAAqBnF,KAAK1E,MAAM6J,oBAAqBrC,kBAAmB9C,KAAK8C,kBAAmBuB,eAAgBrE,KAAKqE,eAAgB9B,mBAAoBvC,KAAKuC,mBAAoBgB,kBAAmBjG,EAAMiG,kBAAmBW,sBAAuB5G,EAAM4G,0BAE/hBrG,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,QAAME,UAAU,kBAAiBJ,EAAAC,EAAAC,cAAC8J,EAAD,CAAW1B,WAAW,OAAO1J,UAAWa,EAAMb,UAAWM,eAAgBO,EAAMP,eAAgB4H,iBAAkBrH,EAAMqH,iBAAkBlG,gBAAiBnB,EAAMmB,gBAAiBgH,gBAAiBzF,KAAK1E,MAAMmK,gBAAiBD,cAAexF,KAAKwF,cAAeL,oBAAqBnF,KAAK1E,MAAM6J,oBAAqBrC,kBAAmB9C,KAAK8C,kBAAmBuB,eAAgBrE,KAAKqE,eAAgB9B,mBAAoBvC,KAAKuC,mBAAoBgB,kBAAmBjG,EAAMiG,kBAAmBW,sBAAuB5G,EAAM4G,0BAE9hBrG,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,QAAME,UAAU,kBAAiBJ,EAAAC,EAAAC,cAAC+J,EAAD,CAAanD,iBAAkBrH,EAAMqH,iBAAkBiC,gBAAiBtJ,EAAMsJ,gBAAiBhK,UAAWU,EAAMV,UAAWkK,mBAAoBxJ,EAAMwJ,mBAAoBrB,gBAAiBzF,KAAK1E,MAAMmK,gBAAiBD,cAAexF,KAAKwF,cAAetB,sBAAuB5G,EAAM4G,oCA1E5RpC,aCYnBiG,EAhBI,SAACzK,GAEnB,OAAwC,IAArCA,EAAM0K,oBAAoBxM,OACrB,KAIPqC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sCACdJ,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,UACET,EAAM0K,uBCiOIC,EA3OM,SAAC3K,GAAU,IAEvB4K,EAAoC5K,EAApC4K,eAAgBC,EAAoB7K,EAApB6K,gBAElBC,EACG,IADHA,EAEO,IAFPA,EAGQ,IAHRA,EAIQ,IAJRA,EAKM,IALNA,EAMM,IANNA,EAOS,IAPTA,EAQE,IARFA,EASK,IATLA,EAUQ,IAVRA,EAWW,IAXXA,EAYO,IAZPA,EAaQ,IAbRA,EAcA,IAGFC,EAAwB,EACxBC,GAAiB,EACjBC,EAAY,EACZC,EAAoB,EACpBC,EAAyB,EACzBC,EAAgB,EAEpB,GAAGR,EAAgB,CAClB,IAAMS,EAAaT,EAAevM,KAC1BiN,EAAYV,EAAeW,OAA3BD,QAIR,OAAQD,GACP,IAAK,cACJN,EAAwBO,EACxBL,EAAYK,EAAUR,EACtBK,EAAyBL,EACzB,MACD,IAAK,aACJC,EAAwBO,EACxBL,EAAYK,EAAUR,EACtBK,EAAyBL,EACzB,MACD,IAAK,mBACJC,EAAwBO,EACxBL,EAAYK,EAAUR,EACtBK,EAAyBL,EACzB,MACD,IAAK,cACJC,EAAwBO,EACxBL,EAAYK,EAAUR,EACtBK,EAAyBL,EACzB,MACD,IAAK,gBACJC,EAAwBO,EACxBL,EAAYK,EAAUR,EACtBK,EAAyBL,EACzB,MACD,IAAK,aACJC,EAAwBO,EACxBL,EAAYK,EAAUR,EACtBK,EAAyBL,EACzB,MACD,IAAK,eACJC,EAAwBO,EACxBL,EAAYK,EAAUR,EACtBK,EAAyBL,EACzB,MACD,IAAK,SACJC,EAAwBO,EACxBL,EAAYK,EAAUR,EACtBK,EAAyBL,EACzB,MACD,IAAK,eACJC,EAAwBO,EACxBL,EAAYK,EAAUR,EACtBK,EAAyBL,EACzB,MACD,IAAK,QACJC,EAAwBO,EACxBL,EAAYK,EAAUR,EACtBK,EAAyBL,EACzB,MACD,IAAK,WACJC,EAAwBO,EACxBL,EAAYK,EAAUR,EACtBK,EAAyBL,EACzB,MACD,IAAK,eACJC,EAAwBO,EACxBL,EAAYK,EAAUR,EACtBK,EAAyBL,EACzB,MACD,IAAK,eACJC,EAAwBO,EACxBL,EAAYK,EAAUR,EACtBK,EAAyBL,EACzB,MACD,IAAK,MACJC,EAAwBO,EACxBL,EAAYK,EAAUR,EACtBK,EAAyBL,GAQ5B,IAAMU,EAAuBhJ,OAAOiJ,QAAQZ,GAkH5C,OAhHGW,EAAqBtN,OAAS,GAChCsN,EAAqBjI,QAAQ,SAAAmI,GAC5B,OAAQA,EAAS,IAChB,IAAK,eACJN,EAAgBM,EAAS,MAU1BN,EAAgB,IAElBJ,GADAE,EAAoBD,EAAYG,GACKD,GAiGrC5K,EAAAC,EAAAC,cAAA,MAAIE,UAAU,eACbJ,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,wBAAL,IAA2BF,EAAAC,EAAAC,cAAA,YAAOkL,KAAKC,MAAMb,GAAlB,IAA2CC,EAAc,KAAA1J,OAAQqK,KAAKC,MAAMZ,GAAnB,MAAyC,KAC7HzK,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,oBAAL,IAAuBF,EAAAC,EAAAC,cAAA,YAAOkL,KAAKC,MAAMX,GAAlB,IAA+BC,EAAiB,KAAA5J,OAAQqK,KAAKC,MAAMV,GAAnB,MAA4C,KACnH3K,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,yBAAL,IAA4BF,EAAAC,EAAAC,cAAA,YAAO0K,MClNvBU,EAnBO,SAAC7L,GAAU,IAExB4K,EAAmB5K,EAAnB4K,eACJkB,EAAkB,GAQtB,OAPGlB,IACFkB,EAAkBlB,EAAemB,SAAS3L,IAAI,SAAC4L,EAAM1L,GACpD,IAAM2L,EAAgBD,EAAKE,OAAS,SAAW,GAC/C,OAAO3L,EAAAC,EAAAC,cAAA,QAAMC,IAAKJ,EAAOK,UAAWsL,GAAgBD,EAAK3N,KAAlD,IAAyD2N,EAAKG,WAKtE5L,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,YAAOqL,KCOKM,EArBS,SAACpM,GAAU,IAE1B4K,EAAmB5K,EAAnB4K,eACJyB,EAAkB,GAChBC,EAAsB1B,EAAe2B,UAAY,gBAAkB,GASzE,OARG3B,GACCA,EAAe2B,YACjBF,EAAkB7J,OAAOiJ,QAAQb,EAAe2B,WAAWnM,IAAI,SAACoM,EAAOlM,GACtE,OAAOC,EAAAC,EAAAC,cAAA,QAAMC,IAAKJ,EAAOmM,MAAO,CAAEC,gBAAiBF,EAAM,GAAI3K,MAAK,GAAAP,OAAKkL,EAAM,GAAX,KAAkB1K,OAAQ,aAM9FvB,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,OAAKE,UAAW2L,GAAsBD,KCK1BM,EArBQ,SAAC3M,GAAU,IAEzB4M,EAAsB5M,EAAtB4M,kBAKJC,EAAgB,EAMpB,OAJArK,OAAOiJ,QAAQmB,GAAmBrJ,QAAQ,SAAAmI,GACzCmB,GAAiBnB,EAAS,KAI1BnL,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,yBAAsBF,EAAAC,EAAAC,cAAA,YAAOoM,EAAP,OCqJVC,EA/JI,SAAC9M,GAEnB,IAAM4K,EAAiB5K,EAAM4K,eAAiB5K,EAAM4K,eAAiB,GAC7DmC,EAA0D/M,EAA1D+M,kBAAmBC,EAAuChN,EAAvCgN,iBAAkB3F,EAAqBrH,EAArBqH,iBAGzC4F,EAAmB,CAAEC,QAAS,GAC9BC,EAAuB,CAC1BC,KAAM,EACNC,MAAO,EACPC,IAAK,EACLC,QAAS,EACTC,OAAQ,GAELC,EAAwB,CAC3BlC,OAAQ,GACRgB,UAAW,GACXmB,SAAU,GACVC,QAAS,GACTT,QAAS,GACTU,WAAY,IAqBbvG,EAAiBwG,YAAYtK,QAAQ,SAAAuK,GAEpC,IAAMC,EAAc1G,EAAiByG,GAAOlI,SAASsH,QAAU7F,EAAiByG,GAAOlI,SAASsH,QAAQc,KAAO,EAC/Gf,EAAgB,SAAec,GAEX1G,EAAiByG,GAAOlI,SAASqI,YAAczL,OAAOiJ,QAAQpE,EAAiByG,GAAOlI,SAASqI,aAAezL,OAAOiJ,QAAQ,CAAE2B,KAAM,EAAGC,MAAO,EAAGC,IAAK,EAAGC,QAAS,EAAGC,OAAQ,KAEtLjK,QAAQ,SAAAqK,GACnBT,EAAqBS,EAAW,IAAMT,EAAqBS,EAAW,IAAMA,EAAW,OAKlE,CAAE,CAAErM,UAAW,eAAgBsI,MAAO,CAAC,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,KAAO,CAAEtI,UAAW,WAAYsI,MAAO,CAAC,EAAE,EAAE,GAAG,GAAG,KAAO,CAAEtI,UAAW,mBAAoBsI,MAAO,CAAC,EAAE,GAAG,KAAO,CAAEtI,UAAW,UAAWsI,MAAO,CAAC,EAAE,GAAG,IAAKqE,SAAS,GAAO,CAAE3M,UAAW,UAAWsI,MAAO,CAAC,IAAKqE,SAAS,GAAQ,CAAE3M,UAAW,eAAgBsI,MAAO,CAAC,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,KAAO,CAAEtI,UAAW,gBAAiBsI,MAAO,CAAC,GAAG,GAAG,KAAO,CAAEtI,UAAW,oBAAqBsI,MAAO,CAAC,IAAK,IAAK,KAQ/btG,QAAQ,SAAAlC,GAGtB,GAFwB,IAAIgC,OAAJ,IAAA/B,OAAeD,EAAME,UAArB,KAAmC,KAExCiC,KAAKwJ,GACvB,GAAuB,iBAApB3L,EAAME,UACR,GAAGwL,EAAkB1L,EAAME,WAAW4B,OAAS,EAAG,CACjD,IAAIwE,EAAO,EAEVA,EADEoF,EAAkB1L,EAAME,WAAW4B,MAAQ9B,EAAMwI,MAAM3L,OAClDmD,EAAMwI,MAAMxI,EAAMwI,MAAM3L,OAAS,GAEjCmD,EAAMwI,MAAMkD,EAAkB1L,EAAME,WAAW4B,MAAQ,GAE/DsK,EAAqB,OAAWpM,EAAME,WAAaoG,EACnD8F,EAAqB,SAAapM,EAAME,WAAa,OAErDkM,EAAqB,OAAWpM,EAAME,WAAaF,EAAMwI,MAAMkD,EAAkB1L,EAAME,WAAW4B,MAAQ,QAGrG,GAAuB,iBAApB9B,EAAME,UAA8B,CAC7C,IAAIoG,EAAO,EAEVA,EADEoF,EAAkB1L,EAAME,WAAW4B,MAAQ9B,EAAMwI,MAAM3L,OAClDmD,EAAMwI,MAAMxI,EAAMwI,MAAM3L,OAAS,GAEjCmD,EAAMwI,MAAMkD,EAAkB1L,EAAME,WAAW4B,MAAQ,GAE/DsK,EAAqB,SAAapM,EAAME,WAAaoG,OAC/C,GAAwB,kBAApBtG,EAAME,UAA+B,CAC/C,IAAIoG,EAAO,EAEVA,EADEoF,EAAkB1L,EAAME,WAAW4B,MAAQ9B,EAAMwI,MAAM3L,OAClDmD,EAAMwI,MAAMxI,EAAMwI,MAAM3L,OAAS,GAEjCmD,EAAMwI,MAAMkD,EAAkB1L,EAAME,WAAW4B,MAAQ,GAE/DsK,EAAqB,SAAapM,EAAME,WAAaoG,KAMxDnF,OAAOiJ,QAAQ0B,GAAsB5J,QAAQ,SAAAqK,GAC5C,IAAMlI,EAAU,IAAIrC,OAAJ,IAAA/B,OAAesM,EAAW,GAA1B,gBAA4C,KAE5DpL,OAAOiJ,QAAQsB,GAAmBxJ,QAAQ,SAAAlC,GACzC,GAAGqE,EAAQlC,KAAKnC,EAAM,IAAK,CAC1B,IAAIf,EAAQe,EAAM,GAAG8B,MAAQ,EAE1B9B,EAAM,GAAG8B,OAAS9B,EAAM,GAAGwI,MAAM3L,OACnCsE,OAAOiJ,QAAQpK,EAAM,GAAGwI,MAAMvJ,GAAO6N,WAAW5K,QAAQ,SAAAmI,GACpC,YAAhBA,EAAS,GACXuB,EAAgB,SAAevB,EAAS,GAExCyB,EAAqBS,EAAW,IAAMT,EAAqBS,EAAW,IAAMlC,EAAS,MAMvFpL,EAAQe,EAAM,GAAGwI,MAAM3L,OAAS,EAChCsE,OAAOiJ,QAAQpK,EAAM,GAAGwI,MAAMvJ,GAAO6N,WAAW5K,QAAQ,SAAAmI,GAEpC,YAAhBA,EAAS,GACXuB,EAAgB,SAAevB,EAAS,GAExCyB,EAAqBS,EAAW,IAAMT,EAAqBS,EAAW,IAAMlC,EAAS,WAQ3F,IAAM0C,EAAuB5L,OAAOiJ,QAAQwB,GAAkB7M,IAAI,SAAC8M,EAAS5M,GAC3E,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,IAAKJ,GAAOC,EAAAC,EAAAC,cAAA,YAAOyM,EAAQ,IAAU3M,EAAAC,EAAAC,cAAA,YAAOyM,EAAQ,OAG1DmB,EAA0B7L,OAAOiJ,QAAQ0B,GAAsB/M,IAAI,SAACwN,EAAYtN,GACrF,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,IAAKJ,GAAOC,EAAAC,EAAAC,cAAA,YAAOmN,EAAW,IAAUrN,EAAAC,EAAAC,cAAA,YAAOmN,EAAW,OAGtE,OACCrN,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sCACdJ,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,MAAIE,UAAU,sBACbJ,EAAAC,EAAAC,cAAC6N,EAAD,CAAc1D,eAAgBA,EAAgBC,gBAAiB4C,EAAsBlC,SACrFhL,EAAAC,EAAAC,cAAC8N,EAAD,CAAe3D,eAAgBA,EAAgB4D,iBAAkBf,EAAsBlC,SACvFhL,EAAAC,EAAAC,cAACgO,EAAD,CAAiB7D,eAAgBA,IACjCrK,EAAAC,EAAAC,cAACiO,EAAD,CAAgB9B,kBAAmBa,EAAsBC,YAE1DnN,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,MAAIE,UAAU,uBACZyN,EACAC,KCzDUM,cA/Fd,SAAAA,EAAY3O,GAAO,IAAAuC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiM,IAClBpM,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmM,GAAA9L,KAAAH,KAAM1C,KAEDhC,MAAQ,CACZ4Q,aAAc,IAJGrM,kFAQAsM,EAAW3K,qCAS7BF,QAAQC,IAAI,yCAEZ,IAAI8I,EAAoB,GACpBC,EAAmB,GATf8B,EAUkDpM,KAAK1C,MAAvDJ,EAVAkP,EAUAlP,WAAYyH,EAVZyH,EAUYzH,iBAAkB0H,EAV9BD,EAU8BC,gBAEtC1H,EAAiBwG,YAAYtK,QAAQ,SAAAuK,GAAS,IACrCxG,EAAcD,EAAiByG,GAA/BxG,UAELD,EAAiByG,GAAOlI,SAASxE,QACnCiG,EAAiByG,GAAOlI,SAASxE,OAAOmC,QAAQ,SAAAyL,GAE/C,IAAMtJ,EAAU,IAAIrC,OAAJ,IAAA/B,OAAe0N,EAAWzN,UAA1B,KAAwC,MAClDgE,EAAKyJ,EAAW3N,MAClB8B,EAAQ6L,EAAWxN,MAEvB,GAAGkE,EAAQlC,KAAKwJ,GACfD,EAAkBiC,EAAWzN,WAA7B,MAAmDwL,EAAkBiC,EAAWzN,WAA7B,MAAmD4B,MAChG,CAEN,IAAI0G,EACAoF,EAGJpF,EAAQjK,EAAW2F,EAAK,GAAhB,MACR0J,EAAcrP,EAAW2F,EAAK,GAAhB,YAEdwH,EAAiBvK,OAAA0M,EAAA,EAAA1M,QAAA2M,EAAA,EAAA3M,CAAA,GAAMwM,EAAWzN,UAAY,CAAEgE,KAAIpC,QAAO0G,QAAOoF,cAAa1N,UAAWyN,EAAWzN,YAAgBwL,GACrHC,GAAgB,GAAA1L,OAAO0N,EAAWzN,UAAlB,QAKhB+F,GAAaA,EAAUpJ,OAAS,GAElCoJ,EAAU/D,QAAQ,SAAA8B,GACjB,GAAIA,EAAK9D,UAAT,CAEA,IAAMmE,EAAU,IAAIrC,OAAJ,IAAA/B,OAAe+D,EAAK9D,UAApB,KAAkC,MAC9C4B,EAAQkC,EAAK7D,MAEjB,GAAGkE,EAAQlC,KAAKwJ,GACfD,EAAkB1H,EAAK9D,WAAvB,MAA6CwL,EAAkB1H,EAAK9D,WAAvB,MAA6C4B,MACpF,CACN,IAAI0G,EAAQ,GACRoF,EAAc,GAClBrP,EAAW2D,QAAQ,SAAAlC,GACfA,EAAMoC,OAAS4B,EAAK9D,YACtBsI,EAAQxI,EAAMwI,MACdoF,EAAc5N,EAAM4N,eAItBlC,EAAiBvK,OAAA0M,EAAA,EAAA1M,QAAA2M,EAAA,EAAA3M,CAAA,GAAM6C,EAAK9D,UAAY,CAAE4B,QAAO0G,QAAOoF,cAAa1N,UAAW8D,EAAK9D,YAAgBwL,GACrGC,GAAgB,GAAA1L,OAAO+D,EAAK9D,UAAZ,WAQpB,IAEMmJ,EAFyBlI,OAAOiJ,QAAQsB,GAAmBnJ,KAAK,SAACpD,EAAEqD,GAAH,OAASrD,EAAE,GAAKqD,EAAE,GAAK,GAAK,IAE/CzD,IAAI,SAACiB,EAAOf,GAC9D,IAAM8O,EAAoB/N,EAAM,GAAG8B,MAAQ9B,EAAM,GAAGwI,MAAM3L,OAAS,WAAa,GAChF,OAAOqC,EAAAC,EAAAC,cAAA,MAAIC,IAAKJ,GAAOC,EAAAC,EAAAC,cAAA,WAAMY,EAAM,GAAGd,EAAAC,EAAAC,cAAA,UAAKY,EAAM,GAAGwI,MAAMzJ,IAAI,SAACuH,EAAM0H,GAAP,OAAuBA,EAAa,GAAMhO,EAAM,GAAG8B,MAAQ5C,EAAAC,EAAAC,cAAA,MAAIC,IAAK2O,EAAY1O,UAAU,WAAiBJ,EAAAC,EAAAC,cAAA,MAAIC,IAAK2O,QAA+B9O,EAAAC,EAAAC,cAAA,QAAME,UAAWyO,GAAoB/N,EAAM,GAAG8B,UAGhQ,OACC5C,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACdJ,EAAAC,EAAAC,cAAC6O,EAAD,CAAYvC,kBAAmBA,EAAmBrC,oBAAqBA,EAAqBrD,iBAAkB3E,KAAK1C,MAAMqH,mBAChH9G,EAAAC,EAAAC,cAAC8O,EAAD,CAAYxC,kBAAmBA,EAAmBrC,oBAAqBA,EAAqBrD,iBAAkB3E,KAAK1C,MAAMqH,iBAAkBuD,eAAgBlI,KAAK1C,MAAMqH,iBAAiBb,OAAOZ,SAAUoH,iBAAkBA,EAAkB+B,gBAAiBA,YA3F/OvK,aCUrBgL,cAEJ,SAAAA,EAAYxP,GAAO,IAAAuC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8M,IACjBjN,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgN,GAAA3M,KAAAH,KAAM1C,KAiLRoG,iBAAmB,SAACrD,GAElB,IAAM0M,EAAa1M,EAAEG,OAAO2B,aAAa,wBACnCvE,EAAQyC,EAAEG,OAAO2B,aAAa,uBAE9BjG,EAAa2D,EAAKvE,MAAMY,WAC1B8Q,EAA0B,GAC1B9J,EAAW,GAET+J,EAAoB,IAAItM,OAAJ,WAAuB,MAC3CuM,EAAkBrN,EAAKvE,MAAMqJ,iBAAiBwG,YAAYgC,WAE7DjR,EAAW0B,GAAX,OAA8BmP,IAC/B7J,EAAWhH,EAAW0B,IAItBoP,EADCC,EAAiBnM,KAAKoM,GACApN,OAAAmB,EAAA,EAAAnB,CAAOD,EAAKvE,MAAMqJ,iBAAiBwG,aAEnC,CAAI,UAAJvM,OAAAkB,OAAAmB,EAAA,EAAAnB,CAAiBD,EAAKvE,MAAMqJ,iBAAiBwG,cAGtE,IAAMiC,EAAYlK,EAAS4B,MAAMpH,IAAI,SAAAkF,GAAI,MAAK,CAAEqC,KAAMrC,EAAKqC,KAAMC,QAAQ,EAAOmI,aAAc,MAE9FxN,EAAKS,SAAS,SAAAkB,GAAS,MAAK,CAC1BmD,iBAAiB7E,OAAA0M,EAAA,EAAA1M,CAAA,GACZ0B,EAAUmD,iBADC,CAEdwG,YAAa6B,EACblJ,OAAOhE,OAAA0M,EAAA,EAAA1M,CAAA,GACF0B,EAAUmD,iBAAiBb,OAD1B,CAEJc,UAAWwI,EACXlK,WACAoK,QAAS,WAlNEzN,EAwNnBwE,eAAiB,SAAChE,EAAGqC,GAEnB,IAAM6K,EAAYrL,SAAS7B,EAAEG,OAAO2B,aAAa,oBAC3CF,EAAYC,SAAS7B,EAAEG,OAAO2B,aAAa,oBAE3CkB,EAAOhD,EAAEG,OAAO2B,aAAa,aAI7BqL,EAFgB3N,EAAKvE,MAAMqJ,iBAAiBtB,GAA1CuB,UAE0BlH,IAAI,SAACkF,EAAMhF,GAC3C,OAAGqE,IAAcrE,EACRkC,OAAA0M,EAAA,EAAA1M,CAAA,GAAK8C,EAAZ,CAAkBsC,QAAQ,GAAUxC,EAAY6K,IAEzCzN,OAAA0M,EAAA,EAAA1M,CAAA,GAAK8C,EAAZ,CAAkBsC,QAAQ,MAI9BrF,EAAKS,SAAS,SAAAkB,GAAS,OAAA1B,OAAA0M,EAAA,EAAA1M,CAAA,GAClB0B,EADkB,CAErBmD,iBAAiB7E,OAAA0M,EAAA,EAAA1M,CAAA,GACZ0B,EAAUmD,iBADC7E,OAAA2M,EAAA,EAAA3M,CAAA,GAEbuD,EAFavD,OAAA0M,EAAA,EAAA1M,CAAA,GAGT0B,EAAUmD,iBAAiBtB,GAHlB,CAIZuB,UAAW4I,EACX9K,YAAa,YAhPF7C,EAuPnB+G,gBAAkB,SAACvG,GAEjB,IAAMoN,EAAYpN,EAAEG,OAAO2B,aAAa,sBAClC8E,EAAc5G,EAAEG,OAAO2B,aAAa,qBACpCvE,EAAQyC,EAAEG,OAAO2B,aAAa,cAE9BvF,EAAYiD,EAAKvE,MAAMsB,UACzBoQ,EAA0B,GAC1B9J,EAAW,GAET+J,EAAoB,IAAItM,OAAJ,UAAsB,MAC1CuM,EAAkBrN,EAAKvE,MAAMqJ,iBAAiBwG,YAAYgC,WAE7DvQ,EAAUqK,GAAV,MAAgCrJ,GAAhC,OAAmD6P,IACpDvK,EAAWtG,EAAUqK,GAAV,MAAgCrJ,IAI3CoP,EADCC,EAAiBnM,KAAKoM,GACApN,OAAAmB,EAAA,EAAAnB,CAAOD,EAAKvE,MAAMqJ,iBAAiBwG,aAEnC,CAAI,SAAJvM,OAAAkB,OAAAmB,EAAA,EAAAnB,CAAgBD,EAAKvE,MAAMqJ,iBAAiBwG,cAGrEtL,EAAKS,SAAS,SAAAkB,GAAS,OAAA1B,OAAA0M,EAAA,EAAA1M,CAAA,GAClB0B,EADkB,CAErBmD,iBAAiB7E,OAAA0M,EAAA,EAAA1M,CAAA,GACZ0B,EAAUmD,iBADC,CAEdwG,YAAa6B,EACbhG,MAAMlH,OAAA0M,EAAA,EAAA1M,CAAA,GACD0B,EAAUmD,iBAAiBqC,MAD3B,CAEH9D,WACAoK,QAAS,YAtREzN,EA4RnBpB,gBAAkB,SAAC4B,GAEjB,IAAMnC,EAAYmC,EAAEG,OAAO2B,aAAa,uBAAyB9B,EAAEG,OAAO2B,aAAa,uBAAyB,GAC1GuL,EAAYrN,EAAEG,OAAO2B,aAAa,uBAAyB9B,EAAEG,OAAO2B,aAAa,uBAAyB,GAC1GvE,EAAQyC,EAAEG,OAAO2B,aAAa,uBAC9BwL,EAAYtN,EAAEG,OAAO2B,aAAa,mBAGpCyL,EAAgB,GAGH,OAAdD,EACE9N,EAAKvE,MAAMqJ,iBAAiBzG,GAA5B,OAAiDN,GAAjD,OAAoE8P,IACrEE,EAAgB/N,EAAKvE,MAAMqJ,iBAAiBzG,GAA5B,OAAiDN,IAGnEgQ,EAAgB/N,EAAKvE,MAAMmB,UAAUmB,GAIvC,IAAMqP,EAAoB,IAAItM,OAAJ,IAAA/B,OAAeV,EAAf,KAA6B,MACjDgP,EAAkBrN,EAAKvE,MAAMqJ,iBAAiBwG,YAAYgC,WAC5DH,EAA0B,GAG5BA,EADCC,EAAiBnM,KAAKoM,GACApN,OAAAmB,EAAA,EAAAnB,CAAOD,EAAKvE,MAAMqJ,iBAAiBwG,aAEnC,CAAIjN,GAAJU,OAAAkB,OAAAmB,EAAA,EAAAnB,CAAkBD,EAAKvE,MAAMqJ,iBAAiBwG,cAIvE,IAAMiC,EAAYQ,EAAc9I,MAAMpH,IAAI,SAAAkF,GAAI,MAAK,CAAEqC,KAAMrC,EAAKqC,KAAMC,QAAQ,EAAOmI,aAAc,MAEnGxN,EAAKS,SAAS,SAAAkB,GAAS,MAAK,CAC1BmD,iBAAiB7E,OAAA0M,EAAA,EAAA1M,CAAA,GACZ0B,EAAUmD,iBADC7E,OAAA2M,EAAA,EAAA3M,CAAA,CAEdqL,YAAa6B,GACZ9O,EAHa4B,OAAA0M,EAAA,EAAA1M,CAAA,GAIT0B,EAAUmD,iBAAiBzG,GAJlB,CAKZ0G,UAAWwI,EACXlK,SAAU0K,EACVN,QAAS,WArUEzN,EA2UnB0D,kBAAoB,SAAClD,GAEnB,IAAMgD,EAAOhD,EAAEG,OAAO2B,aAAa,aAC7BF,EAAYC,SAAS7B,EAAEG,OAAO2B,aAAa,oBAE7CqL,EADc3N,EAAKvE,MAAMqJ,iBAAiBtB,GAAMuB,UACpBlH,IAAI,SAACkF,EAAMhF,GAEzC,OAAGqE,IAAcrE,EACR,CAAEqH,KAAMrC,EAAKqC,KAAMC,QAAQ,EAAOmI,aAAc,IAEhDvN,OAAA0M,EAAA,EAAA1M,CAAA,GAAK8C,EAAZ,CAAkBsC,QAAQ,MAK9BrF,EAAKS,SAAS,SAAAkB,GAAS,OAAA1B,OAAA0M,EAAA,EAAA1M,CAAA,GAClB0B,EADkB,CAErBmD,iBAAiB7E,OAAA0M,EAAA,EAAA1M,CAAA,GACZ0B,EAAUmD,iBADC7E,OAAA2M,EAAA,EAAA3M,CAAA,GAEbuD,EAFavD,OAAA0M,EAAA,EAAA1M,CAAA,GAGT0B,EAAUmD,iBAAiBtB,GAHlB,CAIZuB,UAAW4I,EACX9K,YAAa,YAjWF7C,EAuWnBqE,sBAAwB,SAAC7D,GACvB,IAAM8F,EAAa9F,EAAEG,OAAO2B,aAAa,uBAEzCtC,EAAKS,SAAS,SAAAkB,GAAS,MAAK,CAC1BmD,iBAAiB7E,OAAA0M,EAAA,EAAA1M,CAAA,GACZ0B,EAAUmD,iBADC7E,OAAA2M,EAAA,EAAA3M,CAAA,CAEdqL,YAAa3J,EAAUmD,iBAAiBwG,YAAY0C,OAAO,SAAAxK,GAAI,OAAIA,IAAS8C,KAC3EA,EAHarG,OAAA0M,EAAA,EAAA1M,CAAA,GAIT0B,EAAUmD,iBAAiBwB,GAJlB,CAKZvB,UAAW,KACXyI,aAAc,GACdnK,SAAU,KACVoK,QAAS,WAnXEzN,EA0XnBwM,gBAAkB,SAACyB,GAEjB,GAAIA,EAAJ,CAEA,IAAMC,EAAoBD,EAAYrN,MAChCuN,EAAcF,EAAY3G,MAC5BlC,EAAO8I,EAAoB,EAQ/B,OANGA,EAAoBC,EAAYxS,SACjCyJ,EAAO+I,EAAYA,EAAYxS,OAAS,IAGnBsE,OAAOiJ,QAAQiF,EAAY/I,GAAMwG,WAEtCjQ,OAAqB,KAxYtBqE,EA6YnBoO,eAAiB,SAACpS,GAChBgE,EAAKS,SAAS,SAAAkB,GAAS,OAAA1B,OAAA0M,EAAA,EAAA1M,CAAA,GAClB0B,EADkB,CAErBmD,iBAAiB7E,OAAA0M,EAAA,EAAA1M,CAAA,GACZ0B,EAAUmD,iBADC,CAEduH,aAAcrQ,SA/YlBgE,EAAKvE,MAAQ,CACXY,WAAY,GACZO,UAAW,GACXG,UAAW,GACXG,eAAgB,GAChBG,WAAY,GACZyH,iBAAkB,CAChBwG,YAAa,GACbe,aAAc,GACd5B,iBAAkB,GAClB4D,iBAAkB,GAClBpK,OAAQ,CACNqK,OAAQ,GACRvJ,UAAW,KACXyI,aAAc,GACde,iBAAkB,GAClBlL,SAAU,KACVoK,QAAS,GACT5K,YAAa,IAGf2L,KAAM,CACJF,OAAQ,GACRvJ,UAAW,GACXyI,aAAc,GACdnK,SAAU,KACVoK,QAAS,GACT5K,YAAa,IAGf4L,MAAO,CACLH,OAAQ,GACRvJ,UAAW,GACXyI,aAAc,GACdnK,SAAU,KACVoK,QAAS,GACT5K,YAAa,IAGf6L,OAAQ,CACNJ,OAAQ,GACRvJ,UAAW,GACXyI,aAAc,GACdnK,SAAU,KACVoK,QAAS,GACT5K,YAAa,IAGf8L,MAAO,CACLL,OAAQ,GACRvJ,UAAW,GACXyI,aAAc,GACdnK,SAAU,KACVoK,QAAS,GACT5K,YAAa,IAGf+L,KAAM,CACJN,OAAQ,GACRvJ,UAAW,GACXyI,aAAc,GACdnK,SAAU,KACVoK,QAAS,GACT5K,YAAa,IAGfsE,MAAO,CACLmH,OAAQ,GACRvJ,UAAW,GACXyI,aAAc,GACdnK,SAAU,KACVoK,QAAS,GACT5K,YAAa,MA3EF7C,oFAkFjBG,KAAK1C,MAAMhB,gBACX0D,KAAK1C,MAAMX,eACXqD,KAAK1C,MAAMR,eACXkD,KAAK1C,MAAML,oBACX+C,KAAK1C,MAAMF,wGAYM+O,EAAW3K,EAAWkN,GAAU,IAAApK,EAAAtE,KAYjD,GAAGA,KAAK1C,MAAMb,YAAc0P,EAAU1P,WAAauD,KAAK1C,MAAMpB,aAAeiQ,EAAUjQ,WAAY,CAEjGoF,QAAQC,IAAI,sBAEZ,IAAI6E,EAAa,GACbG,EAAc,GACdC,EAAe,GACfC,EAAc,GACdC,EAAa,GAEjB1G,KAAK1C,MAAMb,UAAUoE,QAAQ,SAAAvC,GAC3B,OAAQA,EAAM3C,MACZ,IAAK,OACHyK,EAAU,CAAI9H,GAAJM,OAAAkB,OAAAmB,EAAA,EAAAnB,CAAcsG,IACxB,MACF,IAAK,QACHG,EAAW,CAAIjI,GAAJM,OAAAkB,OAAAmB,EAAA,EAAAnB,CAAcyG,IACzB,MACF,IAAK,SACHC,EAAY,CAAIlI,GAAJM,OAAAkB,OAAAmB,EAAA,EAAAnB,CAAc0G,IAC1B,MACF,IAAK,QACHC,EAAW,CAAInI,GAAJM,OAAAkB,OAAAmB,EAAA,EAAAnB,CAAc2G,IACzB,MACF,IAAK,OACHC,EAAU,CAAIpI,GAAJM,OAAAkB,OAAAmB,EAAA,EAAAnB,CAAc4G,OAO9B1G,KAAKM,SAAS,SAAAkB,GAAS,OAAA1B,OAAA0M,EAAA,EAAA1M,CAAA,GAClB0B,EADkB,CAErBtF,WAAW4D,OAAAmB,EAAA,EAAAnB,CAAKwE,EAAKhH,MAAMpB,YAC3BO,UAAUqD,OAAAmB,EAAA,EAAAnB,CAAKwE,EAAKhH,MAAMb,WAC1BG,UAAUkD,OAAAmB,EAAA,EAAAnB,CAAKwE,EAAKhH,MAAMV,WAC1BG,eAAe+C,OAAAmB,EAAA,EAAAnB,CAAKwE,EAAKhH,MAAMP,gBAC/BG,WAAW4C,OAAAmB,EAAA,EAAAnB,CAAKwE,EAAKhH,MAAMJ,YAC3ByH,iBAAiB7E,OAAA0M,EAAA,EAAA1M,CAAA,GACZ0B,EAAUmD,iBADC,CAEd0J,KAAKvO,OAAA0M,EAAA,EAAA1M,CAAA,GACA0B,EAAUmD,iBAAiB0J,KAD5B,CAEFF,OAAQ/H,IAEVkI,MAAMxO,OAAA0M,EAAA,EAAA1M,CAAA,GACD0B,EAAUmD,iBAAiB2J,MAD3B,CAEHH,OAAQ5H,IAEVgI,OAAOzO,OAAA0M,EAAA,EAAA1M,CAAA,GACF0B,EAAUmD,iBAAiB4J,OAD1B,CAEJJ,OAAQ3H,IAEVgI,MAAM1O,OAAA0M,EAAA,EAAA1M,CAAA,GACD0B,EAAUmD,iBAAiB6J,MAD3B,CAEHL,OAAQ1H,IAEVgI,KAAK3O,OAAA0M,EAAA,EAAA1M,CAAA,GACA0B,EAAUmD,iBAAiB8J,KAD5B,CAEFN,OAAQzH,UAMhBpF,QAAQC,IAAI,2DAyPZ,OACE1D,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,cAChBJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAG4Q,KAAK,KAAR,yBACJ9Q,EAAAC,EAAAC,cAAC6Q,EAAD,CAAYnS,UAAWuD,KAAK1E,MAAMmB,UAAWgC,gBAAiBuB,KAAKvB,oBAGvEZ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACbJ,EAAAC,EAAAC,cAAC8Q,EAAD,CAAqB3S,WAAY8D,KAAK1E,MAAMY,WAAYO,UAAWuD,KAAK1E,MAAMmB,UAAWG,UAAWoD,KAAK1E,MAAMsB,UAAWG,eAAgBiD,KAAK1E,MAAMyB,eAAgB4H,iBAAkB3E,KAAK1E,MAAMqJ,iBAAkBlG,gBAAiBuB,KAAKvB,gBAAiB4F,eAAgBrE,KAAKqE,eAAgBd,kBAAmBvD,KAAKuD,kBAAmBW,sBAAuBlE,KAAKkE,sBAAuBoC,iBAAkBtG,KAAK1E,MAAMgL,iBAAkB5C,iBAAkB1D,KAAK0D,iBAAkBkD,gBAAiB5G,KAAK4G,gBAAiBE,mBAAoB9G,KAAK8G,qBACthBjJ,EAAAC,EAAAC,cAAC+Q,EAAD,CAAc5R,WAAY8C,KAAK1E,MAAM4B,WAAYyH,iBAAkB3E,KAAK1E,MAAMqJ,iBAAkB0H,gBAAiBrM,KAAKqM,gBAAiB4B,eAAgBjO,KAAKiO,2BArbtJnM,aA6cHiN,cAhBS,SAAAzT,GAAK,MAAK,CACjCY,WAAYZ,EAAMD,kBAAkBO,OACpCa,UAAWnB,EAAMQ,iBAAiBF,OAClCgB,UAAWtB,EAAMS,iBAAiBH,OAClCmB,eAAgBzB,EAAMU,sBAAsBJ,OAC5CsB,WAAY5B,EAAMW,kBAAkBL,SAGV,SAAAW,GAAQ,MAAK,CACvCD,cAAe,kBAAMC,EAASD,MAC9BK,aAAc,kBAAMJ,EAASI,MAC7BG,aAAc,kBAAMP,EAASO,MAC7BG,kBAAmB,kBAAMV,EAASU,MAClCG,cAAe,kBAAMb,EAASa,QAGhB2R,CAA6CjC,GCjdxCkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACRzR,EAAAC,EAAAC,cAACwR,EAAA,EAAD,CAAUC,MCPI,WAAyC,IAAjBC,EAAiBlU,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GACnD,OAAOmU,YACLC,EACAF,EACAG,YAAgBC,MDGDC,IAChBjS,EAAAC,EAAAC,cAACgS,EAAD,OAECC,SAASC,eAAe,SDoHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.704b019a.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\r\nimport weaponListReducer from './reducer_getWeaponList';\r\nimport armorListReducer from './reducer_getArmorList';\r\nimport charmListReducer from './reducer_getCharmList';\r\nimport decorationListReducer from './reducer_getDecorationList';\r\nimport skillsListReducer from './reducer_getSkillsList';\r\n\r\nexport default combineReducers({\r\n weaponListReducer,\r\n armorListReducer,\r\n charmListReducer,\r\n decorationListReducer,\r\n skillsListReducer\r\n});","export default (state = {}, action) => {\r\n switch (action.type) {\r\n  case 'GET_WEAPONLIST':\r\n   return {\r\n    result: action.payload\r\n   }\r\n  default:\r\n   return state\r\n }\r\n}","export default (state = {}, action) => {\r\n switch (action.type) {\r\n  case 'GET_ARMORLIST':\r\n   return {\r\n    result: action.payload\r\n   }\r\n  default:\r\n   return state\r\n }\r\n}","export default (state = {}, action) => {\r\n switch (action.type) {\r\n  case 'GET_CHARMLIST':\r\n   return {\r\n    result: action.payload\r\n   }\r\n  default:\r\n   return state\r\n }\r\n}","export default (state = {}, action) => {\r\n switch (action.type) {\r\n  case 'GET_DECORATIONLIST':\r\n   return {\r\n    result: action.payload\r\n   }\r\n  default:\r\n   return state\r\n }\r\n}","export default (state = {}, action) => {\r\n switch (action.type) {\r\n  case 'GET_SKILLSLIST':\r\n   return {\r\n    result: action.payload\r\n   }\r\n  default:\r\n   return state\r\n }\r\n}","// import weapon json file\r\nimport weaponJSON from '../mhw_dbWeaponList.json';\r\n\r\nconst weaponList = JSON.stringify(weaponJSON);\r\n\r\nconst getWeaponList = () => dispatch => {\r\n dispatch({\r\n  type: 'GET_WEAPONLIST',\r\n  payload: JSON.parse(weaponList)\r\n })\r\n}\r\n\r\nexport default getWeaponList;\r\n","// import armor json file\r\nimport armorJSON from '../mhw_dbArmorList.json';\r\n\r\nconst armorList = JSON.stringify(armorJSON);\r\n\r\nconst getArmorList = () => dispatch => {\r\n dispatch({\r\n  type: 'GET_ARMORLIST',\r\n  payload: JSON.parse(armorList)\r\n })\r\n}\r\n\r\nexport default getArmorList;","// import charm json file\r\nimport charmJSON from '../mhw_dbCharmList.json';\r\n\r\nconst charmList = JSON.stringify(charmJSON);\r\n\r\nconst getCharmList = () => dispatch => {\r\n dispatch({\r\n  type: 'GET_CHARMLIST',\r\n  payload: JSON.parse(charmList)\r\n })\r\n}\r\n\r\nexport default getCharmList;","// import decoration json file\r\nimport decorationJSON from '../mhw_dbDecorationList.json';\r\n\r\nconst decorationList = JSON.stringify(decorationJSON);\r\n\r\nconst getDecorationList = () => dispatch => {\r\n dispatch({\r\n  type: 'GET_DECORATIONLIST',\r\n  payload: JSON.parse(decorationList)\r\n })\r\n}\r\n\r\nexport default getDecorationList;","// import weapon json file\r\nimport skillsJSON from '../mhw_dbSkillList.json';\r\n\r\nconst skillsList = JSON.stringify(skillsJSON);\r\n\r\nconst getSkillsList = () => dispatch => {\r\n dispatch({\r\n  type: 'GET_SKILLSLIST',\r\n  payload: JSON.parse(skillsList)\r\n })\r\n}\r\n\r\nexport default getSkillsList;\r\n","import React from 'react';\r\n\r\nconst KeyResults = (props) => {\r\n\r\n\tif(props.keyResult.length === 0) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tlet gearList;\r\n\tif(props.radioSelect === 'armor') {\r\n\t\tgearList = props.keyResult.map((gear, index) => <li key={index}><button className={gear.armorType} data-selected-index={gear.index} data-equipment-type={gear.armorType} data-selected-armor={gear.armor} data-search-bar=\"main-search\" onClick={props.onSelectedArmor}>{gear.armor}</button></li>);\r\n\t} else if(props.radioSelect === 'skill') {\r\n\t\tgearList = props.keyResult.map((gear, index) => {\r\n\t\t\treturn (\r\n\t\t\t\t<li key={index}>\r\n\t\t\t\t\t<button className={gear.armorType} data-selected-index={gear.index} data-equipment-type={gear.armorType} data-selected-armor={gear.armor} data-search-bar=\"main-search\" onClick={props.onSelectedArmor}>\r\n\t\t\t\t\t\t{gear.armor} - { gear.skills.map((skill, index) => `${skill.skillName}: ${skill.level}` )}\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</li>\r\n\t\t\t)\r\n\t\t});\r\n\t}\r\n\r\n\tconst keyResultsClasses = props.keyResultShow ? 'key-results show' : 'key-results hide';\r\n\r\n\treturn (\r\n\t\t<div className=\"key-results-container\">\r\n\t\t\t<button className=\"key-results-container-toggle\" onClick={props.onResultsToggle}>Toggle Results</button>\r\n\t\t\t<ul className={keyResultsClasses}>{ gearList }</ul>\r\n\t\t</div>\r\n\t)\r\n\r\n}\r\n\r\nexport default KeyResults;","import React from 'react';\r\n\r\nconst SearchButtonSVG = (props) => {\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<svg width={props.width} height={props.height} version=\"1.1\" viewBox=\"0 0 13.229 13.229\" xmlns=\"http://www.w3.org/2000/svg\">\r\n\t\t\t <g fill=\"#ccc\" transform=\"translate(0 -283.77)\">\r\n\t\t\t  <path d=\"m11.598 296.7c-0.2184-0.1007-3.6995-3.1475-3.7906-3.3178-0.04767-0.0892-0.087966-0.0787-0.4568 0.11824-0.6949 0.37097-1.2459 0.51495-2.0946 0.54736-1.0411 0.0397-1.7178-0.10547-2.5951-0.55666-1.1696-0.6016-2.1552-1.8577-2.5117-3.201-0.17908-0.67493-0.16902-1.7669 0.022966-2.4913 0.47341-1.7863 1.8762-3.1511 3.7105-3.61 0.57711-0.14437 1.8042-0.12798 2.393 0.032 1.6426 0.44629 2.9546 1.6797 3.4875 3.2786 0.39982 1.1996 0.32892 2.5045-0.19881 3.659l-0.20557 0.44973 0.13249 0.0927c0.07287 0.0511 0.34716 0.28375 0.60954 0.51715 0.26238 0.2334 1.0364 0.92071 1.72 1.5274 0.68362 0.60666 1.2777 1.1711 1.3202 1.2543 0.23809 0.46602 0.15443 0.84367-0.29093 1.3133-0.46364 0.48885-0.8033 0.59386-1.252 0.38706zm-5.5459-4.6977c0.69776-0.25041 1.3872-0.85561 1.7305-1.519 0.36739-0.70997 0.43272-1.5993 0.17381-2.3662-0.65221-1.9317-2.911-2.7472-4.6026-1.6617-0.33992 0.21814-0.83648 0.73302-1.031 1.069-0.39106 0.67558-0.51434 1.6526-0.29961 2.3746 0.31359 1.0543 1.1434 1.881 2.1888 2.1806 0.41384 0.11859 1.4109 0.0767 1.84-0.0773z\" strokeWidth=\".055873\"/>\r\n\t\t\t </g>\r\n\t\t\t</svg>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SearchButtonSVG;","import React, { Component } from 'react';\r\nimport KeyResults from './component_key_results';\r\n// importing svgs\r\nimport SearchButtonSVG from './component_search_button_svg';\r\n\r\nclass MainSearch extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tsearchVal: \"\",\r\n\t\t\tradioSelect: \"armor\",\r\n\t\t\tkeyResult: [],\r\n\t\t\tkeyResultShow: true\r\n\t\t}\r\n\t}\r\n\r\n\t// componentDidUpdate(prevState) {\r\n\t// \tconsole.log('main-search updated');\r\n\t// }\r\n\r\n\tonInputSearch = (e) => {\r\n\t\t\r\n\t\tthis.setState({ searchVal: e.target.value });\r\n\t\t// const mainSearchInput = e.target.value;\r\n\r\n\t\tif(e.target.value === \"\") {\r\n\t\t\tthis.setState({ keyResult: [] });\r\n\t\t\treturn;\r\n\t\t} \r\n\r\n\t\tconst patternMatch = new RegExp(`^${e.target.value}`, \"i\");\r\n\r\n\t\tlet keyMatchedArr = [];\r\n\r\n\t\tif(this.state.radioSelect === 'armor') {\r\n\t\t\tthis.props.armorList.forEach((gear, index) => {\r\n\t\t\t\tif(patternMatch.test(gear.name)) {\r\n\t\t\t\t\tkeyMatchedArr = [ { armor: gear.name, slug: gear.slug, armorType: gear.type, index }, ...keyMatchedArr ]\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tkeyMatchedArr.sort((a,b) => a.armor > b.armor ? 1 : -1);\r\n\r\n\t\t} else if (this.state.radioSelect === 'skill') {\r\n\t\t\tthis.props.armorList.forEach((gear, index) => {\r\n\t\t\t\tgear.skills.forEach(skill => {\r\n\t\t\t\t\tif(patternMatch.test(skill.skillName)) {\r\n\t\t\t\t\t\tkeyMatchedArr = [ { armor: gear.name, slug: gear.slug, armorType: gear.type, level: skill.level, index, skills: [ ...gear.skills ] }, ...keyMatchedArr ]\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t});\r\n\r\n\t\t\tkeyMatchedArr.sort((a,b) => b.level - a.level);\r\n\t\t}\r\n\r\n\t\tthis.setState({ keyResult: keyMatchedArr });\r\n\r\n\t\t// this.setState(prevState => ({\r\n\t\t// \t...prevState,\r\n\t\t// \tkeyResult: keyMatchedArr\r\n\t\t// }));\r\n\t}\r\n\r\n\tonRadioChange = (e) => {\r\n\t\tthis.setState({ searchVal: \"\" });\r\n\t\tthis.setState({ keyResult: [] });\r\n\t\tthis.setState({ radioSelect: e.target.value });\r\n\t}\r\n\r\n\tonButtonSubmit = (e) => {\r\n\t\tif(this.state.searchVal === \"\") {\r\n\t\t\tconsole.log('Input field is empty. Please enter your search keywords.');\r\n\t\t\treturn;\r\n\t\t} else if(this.state.keyResult.length === 0) {\r\n\t\t\tconsole.log('Your search keywords did not match anything.');\r\n\t\t\treturn;\r\n\t\t} else {\r\n\t\t\tconsole.log('Search keywords matched! Please select from the search results.');\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\r\n\tonResultsToggle = (e) => {\r\n\t\tthis.setState(prevState => ({ keyResultShow: !prevState.keyResultShow }));\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div className=\"search-container\">\r\n\t\t\t\t\t<div className=\"search-bar-container\">\r\n\t\t\t\t\t\t<input className=\"search-bar\" type=\"text\" placeholder={this.state.radioSelect === 'armor' ? 'e.g. DragonKing Eyepatch Alpha' : 'e.g. Weakness Exploit'} onChange={this.onInputSearch} value={this.state.searchVal} />\r\n\t\t\t\t\t\t<button className=\"search-btn\" onClick={this.onButtonSubmit}><SearchButtonSVG width={25} height={25} /></button>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div className=\"advanced-search-container\">\r\n\t\t\t\t\t\t<p>Search By: <span><input type=\"radio\" name=\"searchBy\" onChange={this.onRadioChange} checked={this.state.radioSelect === \"armor\"} value=\"armor\"/>Armor</span> <span><input type=\"radio\" name=\"searchBy\" onChange={this.onRadioChange} checked={this.state.radioSelect === \"skill\"} value=\"skill\"/>Skill</span></p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t\r\n\t\t\t\t\t<KeyResults keyResult={this.state.keyResult} radioSelect={this.state.radioSelect} onSelectedArmor={this.props.onSelectedArmor} onResultsToggle={this.onResultsToggle} keyResultShow={this.state.keyResultShow} />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t)\t\r\n\t}\r\n}\r\n\r\nexport default MainSearch;\r\n","import React, { Component } from 'react';\r\n//importing components\r\n// import DecoSlotOne from './component_decoSlotOne_svg';\r\n// import DecoSlotTwo from './component_decoSlotTwo_svg';\r\n// import DecoSlotThree from './component_decoSlotThree_svg';\r\n\r\nclass SlotSearch extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tinputString: ''\r\n\t\t}\r\n\t}\r\n\r\n\tonClearDeco = (e) => {\r\n\t\tconst slotIndex = parseInt(e.target.getAttribute('data-slot-index'));\r\n\t\tconst slotRank = parseInt(e.target.getAttribute('data-slot-rank'));\r\n\t\tconst equipmentPart = e.target.getAttribute('data-part');\r\n\r\n\t\tthis.setState({ inputString: '' }, this.props.onClearDecoResults(slotIndex,slotRank,equipmentPart));\r\n\t}\r\n\r\n\tonFocusSlotSearch = (e) => {\r\n\t\tconst slotIndex = parseInt(e.target.getAttribute('data-slot-index'));\r\n\t\tconst slotRank = parseInt(e.target.getAttribute('data-slot-rank'));\r\n\t\tconst equipmentPart = e.target.getAttribute('data-part');\r\n\r\n\t\t// const { partDecos } = this.props.selectedArmorSet[equipmentPart];\r\n\t\tconst decoPieces =  this.props.decorationList;\r\n\r\n\t\tlet decoResults = [];\r\n\r\n\t\t// const updatePartDecos = partDecos.map((slot,index) => {\r\n\t\t//   if(slotIndex === index) {\r\n\t\t//     return { ...slot, active: true }\r\n\t\t//   } else {\r\n\t\t//     return { ...slot, active: false }\r\n\t\t//   }\r\n\t\t// });\r\n\r\n\t\tdecoPieces.forEach(deco => {\r\n\t\t  if(deco.slot <= slotRank ) {\r\n\t\t    deco.skills.forEach(skill => {\r\n\t\t      decoResults = [ { id: skill.id, skillName: skill.skillName, level: skill.level, slotRank, slot: deco.slot }, ...decoResults ]\r\n\t\t    });\r\n\t\t  }\r\n\t\t});\r\n\r\n\t\t// Sort Deco Results..\r\n\t\tdecoResults.sort((a,b) => a.skillName > b.skillName ? 1 : -1);\r\n\r\n\t\t// Call select deco input props function\r\n\t\tthis.props.onSelectDecoInput(slotIndex,slotRank,equipmentPart,decoResults);\r\n\t}\r\n\r\n\tonDecoInput = (e) => {\r\n\r\n\t\t// write a RegEx here..\r\n\t\tconst inputString = e.target.value;\r\n\t\tconst slotIndex = parseInt(e.target.getAttribute('data-slot-index'));\r\n\t\tconst slotRank = parseInt(e.target.getAttribute('data-slot-rank'));\r\n\t\tconst equipmentPart = e.target.getAttribute('data-part');\r\n\r\n\t\t// const { partDecos } = this.props.selectedArmorSet[equipmentPart];\r\n\t\tconst decoPieces =  this.props.decorationList;\r\n\r\n\t\tlet decoResults = [];\r\n\t\t\r\n\t\tlet pattern = new RegExp(`^(${e.target.value})`,'i');\r\n\r\n\t\tdecoPieces.forEach(deco => {\r\n\t\t  deco.skills.forEach(skill => {\r\n\t\t    if(pattern.test(skill.skillName)) {\r\n\t\t      if(deco.slot <= slotRank) {\r\n\t\t        decoResults = [ { id: skill.id, skillName: skill.skillName, slotRank,  slot: deco.slot, level: skill.level }, ...decoResults ];\r\n\t\t      }\r\n\t\t    }\r\n\t\t  });\r\n\t\t});\r\n\r\n\t\t// Sort Deco Results..\r\n\t\tdecoResults.sort((a,b) => a.skillName > b.skillName ? 1 : -1);\r\n\r\n\t\tthis.setState({ inputString }, this.props.onSelectDecoInput(slotIndex,slotRank,equipmentPart,decoResults));\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { props } = this;\r\n\t\tconst { slotRank } = this.props;\r\n\t\tlet decoType = '';\r\n\r\n\t\tswitch (slotRank) {\r\n\t\t\tcase 1:\r\n\t\t\t\tdecoType = 'slot-one';\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tdecoType = 'slot-two';\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tdecoType = 'slot-three';\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif(props.selected.skillName) {\r\n\t\t\treturn <div className=\"slot-container selected\"><span className={decoType}>{props.selected.skillName}</span><button className=\"clear-button selected\" data-slot-rank={slotRank} data-part={props.part} data-slot-index={props.slotIndex} onClick={props.onRemoveDecoPiece}></button></div>\r\n\t\t}\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div className=\"slot-container\">\r\n\t\t\t\t<input className={decoType} type=\"text\" data-slot-rank={slotRank} data-part={props.part} data-slot-index={props.slotIndex} onFocus={this.onFocusSlotSearch} onChange={this.onDecoInput} value={this.state.inputString} />\r\n\t\t\t\t<button className=\"clear-button\" data-slot-rank={slotRank} data-part={props.part} data-slot-index={props.slotIndex} onClick={this.onClearDeco}>clear</button>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default SlotSearch;","import React, { Component } from 'react';\r\n// import components\r\nimport SlotSearch from './component_slot_search';\r\n\r\nclass WeaponSearch extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tinputString: '',\r\n\t\t\tdecoInputString: '',\r\n\t\t\tweaponSearchResults: []\r\n\t\t}\r\n\t}\r\n\r\n\tonSelectedWeapon = (e) => {\r\n\t\tthis.setState({\r\n\t\t\tweaponSearchResults: []\r\n\t\t}, this.props.onSelectedWeapon(e));\r\n\t}\r\n\r\n\tonWeaponInputSearch = (e) => {\r\n\t\t// add RegEx input checker here..\r\n\t\tconst inputString = e.target.value;\r\n\t\tconst pattern = new RegExp(`^${e.target.value}`,'i');\r\n\t\tlet weaponSearchResults = [];\r\n\t\tconst weaponPieces = this.props.weaponList;\r\n\r\n\t\t// // Sort Weapon Pieces..\r\n\t\tweaponPieces.sort((a,b) => a.name < b.name ? 1 : -1);\r\n\r\n\t\tweaponPieces.forEach((weapon, index) => {\r\n\t\t  if(pattern.test(weapon.name) && e.target.value !== '') {\r\n\t\t    weaponSearchResults = [<li key={index}><button data-selected-weapon={weapon.name} data-selected-index={index} onClick={this.onSelectedWeapon}>{weapon.name}</button></li>, ...weaponSearchResults ];\r\n\t\t  }\r\n\t\t});\r\n\r\n\t\tthis.setState({ inputString, weaponSearchResults });\r\n\t}\r\n\r\n\tonClearInput = (e) => {\r\n\t\tthis.setState({ inputString: '', weaponSearchResults: [] });\r\n\t}\r\n\r\n\tonRemovePart = (e) => {\r\n\t\tthis.setState({\r\n\t\t\tinputString: '',\r\n\t\t\tweaponSearchResults: []\r\n\t\t}, this.props.onRemoveEquipmentPart(e))\r\n\t}\r\n\r\n\tonSelectDeco = (e) => {\r\n\t\tthis.setState({ decoInputString: '' }, this.props.onSelectedDeco(e));\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\tconst { props } = this;\r\n\r\n\t\tlet armorPartContent = '';\r\n\t\tlet mapSlots = '';\r\n\t\tlet decoSearchResults = '';\r\n\t\tlet decoSearchResultsContainer = '';\r\n\r\n\t\tif(props.selectedArmorSet['weapon']['selected'] !== null) {\r\n\t\t\tconst { partDecos } = props.selectedArmorSet['weapon'];\r\n\t\t\tconst { type, slots } = props.selectedArmorSet['weapon']['selected'];\r\n\r\n\t\t\tconst updateClass = `input-container selected ${type}`;\r\n\r\n\t\t\tif(slots.length > 0) {\r\n\r\n\t\t\t\tmapSlots = partDecos.map((slot, index) => {\r\n\t\t\t\t\treturn <SlotSearch key={index} slotIndex={index} slotRank={slot.rank} active={slot.active} part=\"weapon\" decorationList={props.decorationList} selected={partDecos[index]} activeDecoInputPart={props.activeDecoInputPart} onSelectDecoInput={props.onSelectDecoInput} onSelectedDeco={props.onSelectedDeco} onClearDecoResults={props.onClearDecoResults} onRemoveDecoPiece={props.onRemoveDecoPiece} />\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tarmorPartContent = <div className={updateClass}>\r\n\t\t\t<label>{props.selectedArmorSet['weapon']['selected']['name']}</label>\r\n\t\t\t<button className=\"clear-button selected\" data-equipment-type=\"weapon\" onClick={this.onRemovePart} /></div>\r\n\r\n\t\t\t// check if there's an active slot\r\n\t\t\tif(props.activeDecoInputPart && props.activeDecoInputPart.equipmentPart === \"weapon\") {\r\n\t\t\t\tpartDecos.forEach((slot, slotIndex) => {\r\n\t\t\t\t\tif(slotIndex === props.activeDecoInputPart.slotIndex) {\r\n\t\t\t\t\t\tdecoSearchResults = props.activeDecoInputPart.decoResults.map((res,index) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<li key={index}>\r\n\t\t\t\t\t\t\t\t\t<button data-deco-name={res.skillName} data-part='weapon' data-deco-index={index} data-deco-id={res.id} data-slot-rank={res.slot} data-slot-index={slotIndex} onClick={this.onSelectDeco} >\r\n\t\t\t\t\t\t\t\t\t\t{res.skillName}\r\n\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tdecoSearchResultsContainer = <ul className=\"slots-search-results\">{decoSearchResults}</ul>;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// if(slot.active) {\r\n\t\t\t\t\t// \tdecoSearchResults = decoResults.map((res,index) => {\r\n\t\t\t\t\t// \t\treturn (\r\n\t\t\t\t\t// \t\t\t<li key={index}>\r\n\t\t\t\t\t// \t\t\t\t<button data-deco-name={res.skillName} data-part='weapon' data-deco-index={index} data-deco-id={res.id} data-slot-rank={res.slot} data-slot-index={slotIndex} onClick={props.onSelectedDeco} >\r\n\t\t\t\t\t// \t\t\t\t\t{res.skillName}\r\n\t\t\t\t\t// \t\t\t\t</button>\r\n\t\t\t\t\t// \t\t\t</li>\r\n\t\t\t\t\t// \t\t)\r\n\t\t\t\t\t// \t});\r\n\r\n\t\t\t\t\t// \tdecoSearchResultsContainer = <ul className=\"slots-search-results\">{decoSearchResults}</ul>;\r\n\t\t\t\t\t// }\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tarmorPartContent = <div className=\"input-container\">\r\n\t\t\t\t\t<input className=\"weapon-default\" type=\"text\" placeholder='Wyvern Ignition \"Impact\"' data-equipment-type=\"weapon\" onClick={props.onSelectInput} onChange={this.onWeaponInputSearch} value={this.state.inputString} />\r\n\t\t\t\t\t<button className=\"clear-button\" data-equipment-type=\"weapon\" onClick={this.onClearInput} >clear</button>\r\n\t\t\t\t</div>;\r\n\t\t}\r\n\r\n\t\tconst weaponSearchResults = props.activeInputPart === 'weapon' ? <ul className=\"armor-part-search-result\">{this.state.weaponSearchResults}</ul> : '';\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"armor-part-container\">\r\n\t\t\t\t{armorPartContent}\r\n\t\t\t\t<div className=\"slots-container\">\r\n\t\t\t\t\t{mapSlots}\r\n\t\t\t\t\t{decoSearchResultsContainer}\r\n\t\t\t\t</div>\r\n\t\t\t\t{weaponSearchResults}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\t\r\n}\r\n\r\nexport default WeaponSearch;","import React, { Component } from 'react';\r\n// import components\r\nimport SlotSearch from './component_slot_search';\r\n\r\nclass ArmorPartSearch extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tinputString: '',\r\n\t\t\tdecoInputString: '',\r\n\t\t\tarmorSearchResults: [],\r\n\t\t}\r\n\t}\r\n\r\n\tonSelectedArmorPart = (e) => {\r\n\t\tthis.setState({\r\n\t\t\tarmorSearchResults: []\r\n\t\t}, this.props.onSelectedArmor(e));\r\n\t}\r\n\r\n\tonInputPartSearch = (e) => {\r\n\t\tconst inputString = e.target.value;\r\n\t\tconst armorType = e.target.getAttribute('data-equipment-type');\r\n\t    const armorPieces = this.props.selectedArmorSet[armorType]['pieces'];\r\n\r\n\t    let armorSearchResults = [];\r\n\t    let pattern = new RegExp(`^${e.target.value}`,'i');\r\n\r\n\t    // // Sort Armor Pieces..\r\n\t    armorPieces.sort((a,b) => a.name < b.name ? 1 : -1);\r\n\r\n\t    armorPieces.forEach((armor, index) => {\r\n\t      if(pattern.test(armor.name) && e.target.value !== '') {\r\n\t        \r\n\t        armorSearchResults = [<li key={index}><button data-equipment-type={armor.type} data-selected-armor={armor.name} data-selected-index={index} onClick={this.onSelectedArmorPart}>{armor.name}</button></li>, ...armorSearchResults ];\r\n\t      }\r\n\t    });\r\n\t    this.setState({ inputString, armorSearchResults });\r\n\t}\r\n\r\n\tonClearInput = (e) => {\r\n\t\tthis.setState({ inputString: '', armorSearchResults: [] });\r\n\t}\r\n\r\n\tonRemovePart = (e) => {\r\n\t\tthis.setState({\r\n\t\t\tinputString: '',\r\n\t\t\tarmorSearchResults: []\r\n\t\t}, this.props.onRemoveEquipmentPart(e))\r\n\t}\r\n\r\n\tonSelectDeco = (e) => {\r\n\t\tthis.setState({ decoInputString: '' }, this.props.onSelectedDeco(e));\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\tconst { props } = this;\r\n\r\n\t\tlet armorPartContent = '';\r\n\t\tlet mapSlots = '';\r\n\t\tlet decoSearchResults = '';\r\n\t\tlet decoSearchResultsContainer = '';\r\n\t\tlet placeHolder = '';\r\n\r\n\t\tswitch (props.armorPart) {\r\n\r\n\t\t\tcase 'head':\r\n\t\t\t\tplaceHolder = 'Kulve Taroth\\'s Fury Beta';\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'chest':\r\n\t\t\t\tplaceHolder = 'Kulve Taroth\\'s Ire Beta';\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'gloves':\r\n\t\t\t\tplaceHolder = 'Kulve Taroth\\'s Rage Beta';\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'waist':\r\n\t\t\t\tplaceHolder = 'Kulve Taroth\\'s Malice Beta';\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'legs':\r\n\t\t\t\tplaceHolder = 'Kulve Taroth\\'s Wrath Beta';\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif(props.selectedArmorSet[props.armorPart]['selected'] !== null) {\r\n\t\t\tconst { partDecos } = props.selectedArmorSet[props.armorPart];\r\n\t\t\tconst { type, slots } = props.selectedArmorSet[props.armorPart]['selected'];\r\n\r\n\t\t\tconst updateClass = `input-container selected ${type}`;\r\n\r\n\t\t\tif(slots.length > 0) {\r\n\r\n\t\t\t\tmapSlots = partDecos.map((slot, index) => {\r\n\t\t\t\t\treturn <SlotSearch key={index} slotIndex={index} slotRank={slot.rank} active={slot.active} selectedArmorSet={props.selectedArmorSet} part={props.armorPart} decorationList={props.decorationList} selected={partDecos[index]} activeDecoInputPart={props.activeDecoInputPart} onSelectDecoInput={props.onSelectDecoInput} onSelectedDeco={props.onSelectedDeco} onClearDecoResults={props.onClearDecoResults} onRemoveDecoPiece={props.onRemoveDecoPiece} />\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tarmorPartContent = <div className={updateClass}>\r\n\t\t\t<label>{props.selectedArmorSet[props.armorPart]['selected']['name']}</label>\r\n\t\t\t<button className=\"clear-button selected\" data-equipment-type={props.armorPart} onClick={this.onRemovePart} /></div>\r\n\r\n\t\t\t// check if there's an active slot\r\n\t\t\tif(props.activeDecoInputPart && props.activeDecoInputPart.equipmentPart === props.armorPart) {\r\n\t\t\t\tpartDecos.forEach((slot, slotIndex) => {\r\n\t\t\t\t\tif(slotIndex === props.activeDecoInputPart.slotIndex) {\r\n\t\t\t\t\t\tdecoSearchResults = props.activeDecoInputPart.decoResults.map((res,index) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<li key={index}>\r\n\t\t\t\t\t\t\t\t\t<button data-deco-name={res.skillName} data-part={props.armorPart} data-deco-index={index} data-deco-id={res.id} data-deco-level={res.level} data-slot-rank={res.slot} data-slot-index={slotIndex} onClick={this.onSelectDeco} >\r\n\t\t\t\t\t\t\t\t\t\t{res.skillName}\r\n\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tdecoSearchResultsContainer = <ul className=\"slots-search-results\">{decoSearchResults}</ul>;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// if(slot.active && decoResults.length > 0) {\r\n\t\t\t\t\t// \tdecoSearchResults = decoResults.map((res,index) => {\r\n\t\t\t\t\t// \t\treturn (\r\n\t\t\t\t\t// \t\t\t<li key={index}>\r\n\t\t\t\t\t// \t\t\t\t<button data-deco-name={res.skillName} data-part={props.armorPart} data-deco-index={index} data-deco-id={res.id} data-deco-level={res.level} data-slot-rank={res.slot} data-slot-index={slotIndex} onClick={props.onSelectedDeco} >\r\n\t\t\t\t\t// \t\t\t\t\t{res.skillName}\r\n\t\t\t\t\t// \t\t\t\t</button>\r\n\t\t\t\t\t// \t\t\t</li>\r\n\t\t\t\t\t// \t\t)\r\n\t\t\t\t\t// \t});\r\n\r\n\t\t\t\t\t// \tdecoSearchResultsContainer = <ul className=\"slots-search-results\">{decoSearchResults}</ul>;\r\n\t\t\t\t\t// }\r\n\t\t\t\t\t\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\r\n\t\t} else {\r\n\r\n\t\t\tarmorPartContent = <div className=\"input-container\">\r\n\t\t\t\t\t<input className={props.armorPart} type=\"text\" data-equipment-type={props.armorPart} onClick={props.onSelectInput} onChange={this.onInputPartSearch} placeholder={placeHolder} value={this.state.inputString} />\r\n\t\t\t\t\t<button className=\"clear-button\" data-equipment-type={props.armorPart} onClick={this.onClearInput} >clear</button>\r\n\t\t\t\t</div>;\r\n\t\t}\r\n\r\n\t\tconst armorSearchResults = props.activeInputPart === props.armorPart ? <ul className=\"armor-part-search-result\">{this.state.armorSearchResults}</ul> : '';\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"armor-part-container\">\r\n\t\t\t\t{armorPartContent}\r\n\t\t\t\t<div className=\"slots-container\">\r\n\t\t\t\t\t{mapSlots}\r\n\t\t\t\t\t{decoSearchResultsContainer}\r\n\t\t\t\t</div>\r\n\t\t\t\t{armorSearchResults}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\t\r\n}\r\n\r\nexport default ArmorPartSearch;","import React from 'react';\r\n// import components\r\nimport ArmorPartSearch from './component_armor_part_search';\r\n\r\nconst ArmorPart = (props) => {\r\n\t\r\n\tlet armorPiece = \"\";\r\n\r\n\tswitch (props.armorPiece) {\r\n\r\n\t\tcase 'head': \r\n\r\n\t\t\tlet headPieces = [];\r\n\r\n\t\t\tprops.armorList.forEach((armor, index) => {\r\n\t\t\t\tif(armor.armorType === 'head') {\r\n\t\t\t\t\theadPieces = [{ name: armor.name, slug: armor.slug, armorType: armor.armorType}, ...headPieces];\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tarmorPiece = <ArmorPartSearch armorPieces={headPieces} armorPart=\"head\" clearedArmorPart={props.clearedArmorPart} decorationList={props.decorationList} selectedArmorSet={props.selectedArmorSet} onSelectedArmor={props.onSelectedArmor} onSelectedDeco={props.onSelectedDeco} activeInputPart={props.activeInputPart} onSelectInput={props.onSelectInput} activeDecoInputPart={props.activeDecoInputPart} onSelectDecoInput={props.onSelectDecoInput} onClearDecoResults={props.onClearDecoResults} onRemoveDecoPiece={props.onRemoveDecoPiece} onRemoveEquipmentPart={props.onRemoveEquipmentPart} />\r\n\t\t\t\r\n\t\t\tbreak;\r\n\t\t\r\n\t\tcase 'chest':\r\n\t\t\tlet chestPieces = [];\r\n\t\t\tprops.armorList.forEach((armor, index) => {\r\n\t\t\t\tif(armor.armorType === 'chest') {\r\n\t\t\t\t\tchestPieces = [{ name: armor.name, slug: armor.slug, armorType: armor.armorType}, ...chestPieces];\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tarmorPiece = <ArmorPartSearch armorPieces={chestPieces} armorPart=\"chest\" clearedArmorPart={props.clearedArmorPart} decorationList={props.decorationList} selectedArmorSet={props.selectedArmorSet} onSelectedArmor={props.onSelectedArmor} onSelectedDeco={props.onSelectedDeco} activeInputPart={props.activeInputPart} onSelectInput={props.onSelectInput} activeDecoInputPart={props.activeDecoInputPart} onSelectDecoInput={props.onSelectDecoInput} onClearDecoResults={props.onClearDecoResults} onRemoveDecoPiece={props.onRemoveDecoPiece} onRemoveEquipmentPart={props.onRemoveEquipmentPart} />\r\n\r\n\t\t\tbreak;\r\n\t\t\r\n\t\tcase 'gloves':\r\n\t\t\tlet glovesPieces = [];\r\n\t\t\tprops.armorList.forEach((armor, index) => {\r\n\t\t\t\tif(armor.armorType === 'gloves') {\r\n\t\t\t\t\tglovesPieces = [{ name: armor.name, slug: armor.slug, armorType: armor.armorType}, ...glovesPieces];\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tarmorPiece = <ArmorPartSearch armorPieces={glovesPieces} armorPart=\"gloves\" clearedArmorPart={props.clearedArmorPart} decorationList={props.decorationList} selectedArmorSet={props.selectedArmorSet} onSelectedArmor={props.onSelectedArmor} onSelectedDeco={props.onSelectedDeco} activeInputPart={props.activeInputPart} onSelectInput={props.onSelectInput} activeDecoInputPart={props.activeDecoInputPart} onSelectDecoInput={props.onSelectDecoInput} onClearDecoResults={props.onClearDecoResults} onRemoveDecoPiece={props.onRemoveDecoPiece} onRemoveEquipmentPart={props.onRemoveEquipmentPart} />\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'waist':\r\n\t\t\tlet waistPieces = [];\r\n\t\t\tprops.armorList.forEach((armor, index) => {\r\n\t\t\t\tif(armor.armorType === 'waist') {\r\n\t\t\t\t\twaistPieces = [{ name: armor.name, slug: armor.slug, armorType: armor.armorType}, ...waistPieces];\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tarmorPiece = <ArmorPartSearch armorPieces={waistPieces} armorPart=\"waist\" clearedArmorPart={props.clearedArmorPart} decorationList={props.decorationList} selectedArmorSet={props.selectedArmorSet} onSelectedArmor={props.onSelectedArmor} onSelectedDeco={props.onSelectedDeco} activeInputPart={props.activeInputPart} onSelectInput={props.onSelectInput} activeDecoInputPart={props.activeDecoInputPart} onSelectDecoInput={props.onSelectDecoInput} onClearDecoResults={props.onClearDecoResults} onRemoveDecoPiece={props.onRemoveDecoPiece} onRemoveEquipmentPart={props.onRemoveEquipmentPart} />\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'legs':\r\n\t\t\tlet legsPieces = [];\r\n\t\t\tprops.armorList.forEach((armor, index) => {\r\n\t\t\t\tif(armor.armorType === 'legs') {\r\n\t\t\t\t\tlegsPieces = [{ name: armor.name, slug: armor.slug, armorType: armor.armorType}, ...legsPieces];\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tarmorPiece = <ArmorPartSearch armorPieces={legsPieces} armorPart=\"legs\" clearedArmorPart={props.clearedArmorPart} decorationList={props.decorationList} selectedArmorSet={props.selectedArmorSet} onSelectedArmor={props.onSelectedArmor} onSelectedDeco={props.onSelectedDeco} activeInputPart={props.activeInputPart} onSelectInput={props.onSelectInput} activeDecoInputPart={props.activeDecoInputPart} onSelectDecoInput={props.onSelectDecoInput} onClearDecoResults={props.onClearDecoResults} onRemoveDecoPiece={props.onRemoveDecoPiece} onRemoveEquipmentPart={props.onRemoveEquipmentPart} />\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\r\n\t}\r\n\treturn armorPiece;\r\n}\r\n\r\nexport default ArmorPart;","import React, { Component } from 'react';\r\n\r\nclass CharmSearch extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tinputString: '',\r\n\t\t\tcharmSearchResults: []\r\n\t\t}\r\n\t}\r\n\r\n\tonSelectedCharm = (e) => {\r\n\t\tthis.setState({\r\n\t\t\tcharmSearchResults: []\r\n\t\t}, this.props.onSelectedCharm(e));\r\n\t}\r\n\r\n\tonCharmInputSearch = (e) => {\r\n\t\t// add RegEx input checker here..\r\n\t\tconst inputString = e.target.value;\r\n\t\tconst pattern = new RegExp(`^${e.target.value}`,'i');\r\n\t\tlet charmSearchResults = [];\r\n\t\tconst charmPieces = this.props.charmList;\r\n\r\n\t\t// // Sort Charm Pieces..\r\n\t\tcharmPieces.sort((a,b) => a.name < b.name ? 1 : -1);\r\n\r\n\t\tcharmPieces.forEach((charm, parentIndex) => {\r\n\t\t  if(pattern.test(charm.name) && e.target.value !== '') {\r\n\t\t    const charmRanks = charm.ranks.map((rank, index) => {\r\n\t\t      return <li key={index}><button data-selected-rank={rank.name} data-parent-index={parentIndex} data-index={index} onClick={this.onSelectedCharm}>{rank.name}</button></li>\r\n\t\t    });\r\n\r\n\t\t    charmSearchResults = [charmRanks, ...charmSearchResults]\r\n\t\t  }\r\n\t\t});\r\n\r\n\t\tthis.setState({ inputString, charmSearchResults });\r\n\t}\r\n\r\n\tonClearInput = (e) => {\r\n\t\tthis.setState({ inputString: '', charmSearchResults: [] });\r\n\t}\r\n\r\n\tonRemovePart = (e) => {\r\n\t\tthis.setState({\r\n\t\t\tinputString: '',\r\n\t\t\tcharmSearchResults: []\r\n\t\t}, this.props.onRemoveEquipmentPart(e))\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { props } = this;\r\n\r\n\t\tlet armorPartContent = '';\r\n\t\tlet charmSearchResults = '';\r\n\r\n\t\tif(props.selectedArmorSet['charm']['selected'] !== null) {\r\n\t\t\tarmorPartContent = <div className=\"input-container selected charm\">\r\n\t\t\t<label>{props.selectedArmorSet['charm']['selected']['name']}</label>\r\n\t\t\t<button className=\"clear-button selected\" data-equipment-type=\"charm\" onClick={this.onRemovePart} /></div>\r\n\t\t} else {\r\n\t\t\tcharmSearchResults = props.activeInputPart === 'charm' ? <ul className=\"armor-part-search-result\">{this.state.charmSearchResults}</ul> : '';\r\n\r\n\t\t\tarmorPartContent = <div className=\"input-container\">\r\n\t\t\t\t<input className=\"charm\" type=\"text\" placeholder=\"Attack Charm 3\" data-equipment-type=\"charm\" onClick={props.onSelectInput} onChange={this.onCharmInputSearch} value={this.state.inputString} />\r\n\t\t\t\t<button className=\"clear-button\" data-armor-piece=\"charm\" onClick={this.onClearInput} >clear</button>\r\n\t\t\t</div>;\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"armor-part-container\">\r\n\t\t\t\t{armorPartContent}\r\n\t\t\t\t{charmSearchResults}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default CharmSearch;","import React, { Component } from 'react';\r\n// import components\r\nimport WeaponSearch from './component_weapon_search';\r\nimport ArmorPart from './component_armor_part';\r\nimport CharmSearch from './component_charm_search';\r\n\r\nclass ArmorLoadoutBuilder extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tactiveInputPart: '',\r\n\t\t\tactiveDecoInputPart: null\r\n\t\t}\r\n\t}\r\n\t\r\n\tonSelectInput = (e) => {\r\n\t\tconst equipmentPart = e.target.getAttribute('data-equipment-type');\r\n\t\tthis.setState({ activeInputPart: equipmentPart, activeDecoInputPart: null });\r\n\t}\r\n\r\n\tonSelectDecoInput = (slotIndex, slotRank, equipmentPart, decoResults) => {\r\n\t\tthis.setState({\r\n\t\t\tactiveDecoInputPart: {\r\n\t\t\t\tslotIndex,\r\n\t\t\t\tslotRank,\r\n\t\t\t\tequipmentPart,\r\n\t\t\t\tdecoResults\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\tonSelectedDeco = (e) => {\r\n\t\tconst decoResults = this.state.activeDecoInputPart.decoResults;\r\n\r\n\t\tthis.setState({\r\n\t\t\tactiveDecoInputPart: null\r\n\t\t}, this.props.onSelectedDeco(e, decoResults));\r\n\t}\r\n\r\n\tonClearDecoResults = (slotIndex, slotRank, equipmentPart) => {\r\n\t\tif(this.state.activeDecoInputPart) {\r\n\t\t\tconst selectedSlotIndex = this.state.activeDecoInputPart.slotIndex;\r\n\t\t\tconst selectedSlotRank = this.state.activeDecoInputPart.slotRank;\r\n\t\t\tconst selectedSlotPart = this.state.activeDecoInputPart.equipmentPart;\r\n\r\n\t\t\tif(slotIndex === selectedSlotIndex && slotRank === selectedSlotRank && equipmentPart === selectedSlotPart) {\r\n\t\t\t\tthis.setState({ activeDecoInputPart: null });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { props } = this;\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"main hunter-ui-card\">\r\n\t\t\t\t<h2>Equipment</h2>\r\n\r\n\t\t\t\t<div className=\"equipment-list\">\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<span className=\"selected-armor\"><WeaponSearch weaponList={props.weaponList} decorationList={props.decorationList} selectedArmorSet={props.selectedArmorSet} onSelectedWeapon={props.onSelectedWeapon} activeInputPart={this.state.activeInputPart} onSelectInput={this.onSelectInput} activeDecoInputPart={this.state.activeDecoInputPart} onSelectDecoInput={this.onSelectDecoInput} onSelectedDeco={this.onSelectedDeco} onClearDecoResults={this.onClearDecoResults} onRemoveDecoPiece={props.onRemoveDecoPiece} onRemoveEquipmentPart={props.onRemoveEquipmentPart} /></span>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<span className=\"selected-armor\"><ArmorPart armorPiece=\"head\" armorList={props.armorList} decorationList={props.decorationList} selectedArmorSet={props.selectedArmorSet} onSelectedArmor={props.onSelectedArmor} activeInputPart={this.state.activeInputPart} onSelectInput={this.onSelectInput} activeDecoInputPart={this.state.activeDecoInputPart} onSelectDecoInput={this.onSelectDecoInput} onSelectedDeco={this.onSelectedDeco} onClearDecoResults={this.onClearDecoResults} onRemoveDecoPiece={props.onRemoveDecoPiece} onRemoveEquipmentPart={props.onRemoveEquipmentPart} /></span>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<span className=\"selected-armor\"><ArmorPart armorPiece=\"chest\" armorList={props.armorList} decorationList={props.decorationList} selectedArmorSet={props.selectedArmorSet} onSelectedArmor={props.onSelectedArmor} activeInputPart={this.state.activeInputPart} onSelectInput={this.onSelectInput} activeDecoInputPart={this.state.activeDecoInputPart} onSelectDecoInput={this.onSelectDecoInput} onSelectedDeco={this.onSelectedDeco} onClearDecoResults={this.onClearDecoResults} onRemoveDecoPiece={props.onRemoveDecoPiece} onRemoveEquipmentPart={props.onRemoveEquipmentPart} /></span>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<span className=\"selected-armor\"><ArmorPart armorPiece=\"gloves\" armorList={props.armorList} decorationList={props.decorationList} selectedArmorSet={props.selectedArmorSet} onSelectedArmor={props.onSelectedArmor} activeInputPart={this.state.activeInputPart} onSelectInput={this.onSelectInput} activeDecoInputPart={this.state.activeDecoInputPart} onSelectDecoInput={this.onSelectDecoInput} onSelectedDeco={this.onSelectedDeco} onClearDecoResults={this.onClearDecoResults} onRemoveDecoPiece={props.onRemoveDecoPiece} onRemoveEquipmentPart={props.onRemoveEquipmentPart} /></span>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<span className=\"selected-armor\"><ArmorPart armorPiece=\"waist\" armorList={props.armorList} decorationList={props.decorationList} selectedArmorSet={props.selectedArmorSet} onSelectedArmor={props.onSelectedArmor} activeInputPart={this.state.activeInputPart} onSelectInput={this.onSelectInput} activeDecoInputPart={this.state.activeDecoInputPart} onSelectDecoInput={this.onSelectDecoInput} onSelectedDeco={this.onSelectedDeco} onClearDecoResults={this.onClearDecoResults} onRemoveDecoPiece={props.onRemoveDecoPiece} onRemoveEquipmentPart={props.onRemoveEquipmentPart} /></span>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<span className=\"selected-armor\"><ArmorPart armorPiece=\"legs\" armorList={props.armorList} decorationList={props.decorationList} selectedArmorSet={props.selectedArmorSet} onSelectedArmor={props.onSelectedArmor} activeInputPart={this.state.activeInputPart} onSelectInput={this.onSelectInput} activeDecoInputPart={this.state.activeDecoInputPart} onSelectDecoInput={this.onSelectDecoInput} onSelectedDeco={this.onSelectedDeco} onClearDecoResults={this.onClearDecoResults} onRemoveDecoPiece={props.onRemoveDecoPiece} onRemoveEquipmentPart={props.onRemoveEquipmentPart} /></span>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<span className=\"selected-armor\"><CharmSearch selectedArmorSet={props.selectedArmorSet} onSelectedCharm={props.onSelectedCharm} charmList={props.charmList} onCharmInputSearch={props.onCharmInputSearch} activeInputPart={this.state.activeInputPart} onSelectInput={this.onSelectInput} onRemoveEquipmentPart={props.onRemoveEquipmentPart} /></span>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\t\t\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default ArmorLoadoutBuilder;\r\n","import React from 'react';\r\n\r\nconst SkillsList = (props) => {\r\n\r\n\tif(props.displayActiveSkills.length === 0) {\r\n\t\treturn null;\r\n\t}\r\n\t\r\n\treturn (\r\n\t\t<div className=\"skills-list hunter-ui-card results\">\r\n\t\t\t<h2>Skills</h2>\r\n\t\t\t<ul>\r\n\t\t\t\t{props.displayActiveSkills}\t\t\t\t\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SkillsList;","import React from 'react';\r\n\r\nconst AttackStatus = (props) => {\r\n\r\n\tconst { selectedWeapon, attackModifiers } = props;\r\n\r\n\tconst weaponModifier = {\r\n\t\thammer: 5.2,\r\n\t\tgreatSword: 4.8,\r\n\t\thuntingHorn: 4.2,\r\n\t\tchargeBlade: 3.6,\r\n\t\tswitchAxe: 3.5,\r\n\t\tlongSword: 3.3,\r\n\t\tinsectGlaive: 3.1,\r\n\t\tlance: 2.3,\r\n\t\tgunLance: 2.3,\r\n\t\theavyBowgun: 1.5,\r\n\t\tswordAndShield: 1.4,\r\n\t\tdualBlades: 1.4,\r\n\t\tlightBowgun: 1.3,\r\n\t\tbow: 1.2,\r\n\t}\r\n\r\n\tlet selectedWeaponDisplay = 0;\r\n\tlet modifiedAttack = false;\r\n\tlet rawDamage = 0;\r\n\tlet modifiedRawDamage = 0;\r\n\tlet selectedWeaponModifier = 0;\r\n\tlet skillModifier = 0;\r\n\r\n\tif(selectedWeapon) {\r\n\t\tconst weaponType = selectedWeapon.type;\r\n\t\tconst { display } = selectedWeapon.attack;\r\n\t\t\r\n// weaponAttackDisplay={attack.display} weaponDamageType={attributes.damageType} overallAttackModifier={hunterStatusModifiers.attack}\r\n\r\n\t\tswitch (weaponType) {\r\n\t\t\tcase 'great-sword':\r\n\t\t\t\tselectedWeaponDisplay = display;\r\n\t\t\t\trawDamage = display / weaponModifier.greatSword;\r\n\t\t\t\tselectedWeaponModifier = weaponModifier.greatSword;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'long-sword':\r\n\t\t\t\tselectedWeaponDisplay = display;\r\n\t\t\t\trawDamage = display / weaponModifier.longSword;\r\n\t\t\t\tselectedWeaponModifier = weaponModifier.longSword;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'sword-and-shield':\r\n\t\t\t\tselectedWeaponDisplay = display;\r\n\t\t\t\trawDamage = display / weaponModifier.swordAndShield;\r\n\t\t\t\tselectedWeaponModifier = weaponModifier.swordAndShield;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'dual-blades':\r\n\t\t\t\tselectedWeaponDisplay = display;\r\n\t\t\t\trawDamage = display / weaponModifier.dualBlades;\r\n\t\t\t\tselectedWeaponModifier = weaponModifier.dualBlades;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'insect-glaive':\r\n\t\t\t\tselectedWeaponDisplay = display;\r\n\t\t\t\trawDamage = display / weaponModifier.insectGlaive;\r\n\t\t\t\tselectedWeaponModifier = weaponModifier.insectGlaive;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'switch-axe':\r\n\t\t\t\tselectedWeaponDisplay = display;\r\n\t\t\t\trawDamage = display / weaponModifier.switchAxe;\r\n\t\t\t\tselectedWeaponModifier = weaponModifier.switchAxe;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'charge-blade':\r\n\t\t\t\tselectedWeaponDisplay = display;\r\n\t\t\t\trawDamage = display / weaponModifier.chargeBlade;\r\n\t\t\t\tselectedWeaponModifier = weaponModifier.chargeBlade;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'hammer':\r\n\t\t\t\tselectedWeaponDisplay = display;\r\n\t\t\t\trawDamage = display / weaponModifier.hammer;\r\n\t\t\t\tselectedWeaponModifier = weaponModifier.hammer;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'hunting-horn':\r\n\t\t\t\tselectedWeaponDisplay = display;\r\n\t\t\t\trawDamage = display / weaponModifier.huntingHorn;\r\n\t\t\t\tselectedWeaponModifier = weaponModifier.huntingHorn;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'lance':\r\n\t\t\t\tselectedWeaponDisplay = display;\r\n\t\t\t\trawDamage = display / weaponModifier.lance;\r\n\t\t\t\tselectedWeaponModifier = weaponModifier.lance;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'gunlance':\r\n\t\t\t\tselectedWeaponDisplay = display;\r\n\t\t\t\trawDamage = display / weaponModifier.gunLance;\r\n\t\t\t\tselectedWeaponModifier = weaponModifier.gunLance;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'light-bowgun':\r\n\t\t\t\tselectedWeaponDisplay = display;\r\n\t\t\t\trawDamage = display / weaponModifier.lightBowgun;\r\n\t\t\t\tselectedWeaponModifier = weaponModifier.lightBowgun;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'heavy-bowgun':\r\n\t\t\t\tselectedWeaponDisplay = display;\r\n\t\t\t\trawDamage = display / weaponModifier.heavyBowgun;\r\n\t\t\t\tselectedWeaponModifier = weaponModifier.heavyBowgun;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'bow':\r\n\t\t\t\tselectedWeaponDisplay = display;\r\n\t\t\t\trawDamage = display / weaponModifier.bow;\r\n\t\t\t\tselectedWeaponModifier = weaponModifier.bow;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t\r\n\tconst attackModifiersArray = Object.entries(attackModifiers);\r\n\r\n\tif(attackModifiersArray.length > 0) {\r\n\t\tattackModifiersArray.forEach(modifier => {\r\n\t\t\tswitch (modifier[0]) {\r\n\t\t\t\tcase 'Attack Boost':\r\n\t\t\t\t\tskillModifier = modifier[1];\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t// calculated overall attack including bonus from skills (modifiers)\r\n\r\n\tif(skillModifier > 0) {\r\n\t\tmodifiedRawDamage = rawDamage + skillModifier;\r\n\t\tmodifiedAttack = modifiedRawDamage * selectedWeaponModifier;\t\r\n\t}\r\n\r\n\t// Attack Calculation\r\n\r\n\t// let rawDamage = '';\r\n\t// let attackStatusList = '';\r\n\t//  Get Weapon Info\r\n\t// if(weapon.selected) {\r\n\t// \tObject.entries(selectedWeapon).forEach((at, index) => {\r\n\t// \t\t// assign new value to attack.display\r\n\t// \t\tattack[at[0]] = at[1];\r\n\t// \t});\r\n\t// \t// Get elemental values\r\n\t// \tattack['element'] = weapon.selected.elements.map((elem, elemIndex) => {\r\n\t// \t\t// if elem.hidden !== hidden ? !elem.hidden\r\n\t// \t\tconst ifHiddenClass = elem.hidden ? 'hidden' : 'awakened';\r\n\t// \t\treturn <span key={elemIndex}>{elem.type}: <span className={ifHiddenClass}>{elem.damage}</span></span>\r\n\t// \t});\r\n\r\n\t\r\n\r\n\t// \t// skills that modifies attack \r\n\t// \t// attack-boost\r\n\t// \t// agitator\r\n\t// \t// heroics\r\n\t// \t// fortify\r\n\t// \t// peak-performance\r\n\t// \t// resentment\r\n\t// \t// artillery - for gunners, gunlance, charge blade, sticky ammo\r\n\r\n\t// \t// apply skill attack modifiers\r\n\t// \tconst skillAttackModifiers = [ { skillName: 'Attack Boost', ranks: [3,6,9,12,15,18,21] }, { skillName: 'Agitator', ranks: [4,8,12,16,20] }, { skillName: 'Peak Performance', ranks: [5,10,20] }, { skillName: 'Heroics', ranks: [5,10,15], percent: true}, { skillName: 'Fortify', ranks: [10], percent: true }];\r\n\r\n\t// \tskillAttackModifiers.forEach(skill => {\r\n\t// \t\tconst modifierPattern = new RegExp(`(${skill.skillName})`, 'i');\r\n\t// \t\tconsole.log(skill.skillName);\r\n\t// \t\tif(modifierPattern.test(activeSkillsText)) {\r\n\t// \t\t\tif(skill.skillName === 'Attack Boost') {\r\n\t// \t\t\t\tif(activeArmorSkills[skill.skillName].value >= 4) {\r\n\t// \t\t\t\t\tlet rank = 0;\r\n\t// \t\t\t\t\tif(activeArmorSkills[skill.skillName].value > skill.ranks.length) {\r\n\t// \t\t\t\t\t\trank = skill.ranks[skill.ranks.length - 1];\r\n\t// \t\t\t\t\t} else {\r\n\t// \t\t\t\t\t\trank = skill.ranks[activeArmorSkills[skill.skillName].value - 1]\r\n\t// \t\t\t\t\t}\r\n\t// \t\t\t\t\tskillModifiers['attack'][skill.skillName] = rank;\r\n\t// \t\t\t\t\tskillModifiers['affinity'][skill.skillName] = 5;\r\n\t// \t\t\t\t\tattack['modified']['check'] = true;\r\n\t// \t\t\t\t} else {\r\n\t// \t\t\t\t\tskillModifiers['attack'][skill.skillName] = skill.ranks[activeArmorSkills[skill.skillName].value - 1];\r\n\t// \t\t\t\t\tattack['modified']['check'] = true;\r\n\t// \t\t\t\t}\r\n\t// \t\t\t}\r\n\t// \t\t}\r\n\t// \t});\r\n\r\n\t// \tif(weapon.selected.sharpness) {\r\n\t// \t\tattack['sharpness'] = Object.entries(weapon.selected.sharpness).map((color, index) => {\r\n\t// \t\t\treturn <span key={index} style={{ backgroundColor: color[0], width: `${color[1]}%`, height: '15px'}}></span>\r\n\t// \t\t});\r\n\t// \t}\r\n\t// }\r\n\r\n\t// // assign updated raw attack value\r\n\t// attack['raw'] = rawDamage;\r\n\r\n\t// attackStatusList = Object.entries(attack).map((at, index) => {\r\n\t\t\r\n\t// \tif(at[0]) {\r\n\t// \t\tconst subClass = at[0] === 'sharpness' && at[1] !== null ? 'sharpness-bar' : '';\r\n\t// \t\tif(at[0] === 'modified') {\r\n\t// \t\t\tif(at[1]['check']) {\r\n\r\n\t// \t\t\t\tlet addAttackModifiers = 0;\r\n\t// \t\t\t\tObject.entries(skillModifiers['attack']).forEach(modifier => {\r\n\t// \t\t\t\t\tif(modifier[0] === 'Attack Boost') {\r\n\t// \t\t\t\t\t\tconsole.log(modifier);\r\n\t// \t\t\t\t\t\taddAttackModifiers += modifier[1];\r\n\t// \t\t\t\t\t}\r\n\t// \t\t\t\t});\r\n\r\n\t// \t\t\t\tconst modifiedAttack = Math.round((attack['raw'] + addAttackModifiers) * attack['modifier']);\r\n\t// \t\t\t\treturn <li key={index}><div>{at[0]}:</div><div className={subClass}>{modifiedAttack}</div></li>\t\r\n\t// \t\t\t}\r\n\t\t\t\t\r\n\t// \t\t} else {\r\n\t// \t\t\treturn <li key={index}><div>{at[0]}:</div><div className={subClass}>{at[1]}</div></li>\t\r\n\t// \t\t}\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t// \t}\r\n\t\t\r\n\t// });\r\n\r\n\treturn (\r\n\t\t<li className=\"attack-info\">\r\n\t\t\t<div><span>display:</span> <span>{Math.round(selectedWeaponDisplay)} {modifiedAttack ? `( ${Math.round(modifiedAttack)} )` : ''}</span></div>\t\r\n\t\t\t<div><span>raw:</span> <span>{Math.round(rawDamage)} {modifiedRawDamage ? `( ${Math.round(modifiedRawDamage)} )` : ''}</span></div>\t\r\n\t\t\t<div><span>modifier:</span> <span>{selectedWeaponModifier}</span></div>\t\r\n\t\t</li>\r\n\t)\r\n\r\n}\r\n\r\nexport default AttackStatus;","import React from 'react';\r\n\r\nconst ElementStatus = (props) => {\r\n\r\n\tconst { selectedWeapon } = props;\r\n\tlet elementalRating = [];\r\n\tif(selectedWeapon) {\r\n\t\telementalRating = selectedWeapon.elements.map((elem, index) => {\r\n\t\t\tconst ifHiddenClass = elem.hidden ? 'hidden' : '';\r\n\t\t\treturn <span key={index} className={ifHiddenClass}>{elem.type} {elem.damage}</span>\r\n\t\t})\r\n\t}\r\n\r\n\treturn (\r\n\t\t<li>\r\n\t\t\t<span>Element:</span>\r\n\t\t\t<span>{elementalRating}</span>\r\n\t\t</li>\r\n\t)\r\n}\r\n\r\nexport default ElementStatus;","import React from 'react';\r\n\r\nconst SharpnessStatus = (props) => {\r\n\r\n\tconst { selectedWeapon } = props;\r\n\tlet weaponSharpness = [];\r\n\tconst sharpnessClassNames = selectedWeapon.sharpness ? 'sharpness-bar' : ''; \r\n\tif(selectedWeapon) {\r\n\t\tif(selectedWeapon.sharpness) {\r\n\t\t\tweaponSharpness = Object.entries(selectedWeapon.sharpness).map((color, index) => {\r\n\t\t\t\treturn <span key={index} style={{ backgroundColor: color[0], width: `${color[1]}%`, height: '15px'}}></span>\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<li>\r\n\t\t\t<div>Sharpness:</div>\r\n\t\t\t<div className={sharpnessClassNames}>{weaponSharpness}</div>\r\n\t\t</li>\r\n\t)\r\n}\r\n\r\nexport default SharpnessStatus;","import React from 'react';\r\n\r\nconst AffinityStatus = (props) => {\r\n\r\n\tconst { affinityModifiers } = props;\r\n\r\n\t// attack-boost\r\n\t// critical-eye\r\n\t// maximum-might\r\n\tlet totalAffinity = 0;\r\n\r\n\tObject.entries(affinityModifiers).forEach(modifier => {\r\n\t\ttotalAffinity += modifier[1]\r\n\t});\r\n\r\n\treturn (\r\n\t\t<li>\r\n\t\t\t<span>Affinity:</span><span>{totalAffinity}%</span>\r\n\t\t</li>\r\n\t)\r\n\r\n}\r\n\r\nexport default AffinityStatus;","import React from 'react';\r\n// importing components\r\nimport AttackStatus from './component_attack_status';\r\nimport ElementStatus from './component_element_status';\r\nimport SharpnessStatus from './component_sharpness_status';\r\nimport AffinityStatus from './component_affinity_status';\r\n\r\nconst StatusList = (props) => {\r\n\r\n\tconst selectedWeapon = props.selectedWeapon ? props.selectedWeapon : '';\r\n\tconst { activeArmorSkills, activeSkillsText, selectedArmorSet } = props;\r\n\t// onSkillModifier function\r\n\r\n\tlet activeDefenseObj = { defense: 1 };\r\n\tlet activeResistancesObj = {\r\n\t\tfire: 0,\r\n\t\twater: 0,\r\n\t\tice: 0,\r\n\t\tthunder: 0,\r\n\t\tdragon: 0,\r\n\t};\r\n\tlet hunterStatusModifiers = {\r\n\t\tattack: {},\r\n\t\tsharpness: {},\r\n\t\taffinity: {},\r\n\t\telement: {},\r\n\t\tdefense: {},\r\n\t\tresistance: {}\r\n\t}\r\n//** Skill Modifier Property **//\r\n\r\n// affinity\t- Percent\tModifies the affinity of a weapon\r\n// attack\t- Integer\tModifies the attack value of a weapon\r\n// damageFire\t- Integer\tModifies fire damage\r\n// damageWater\t- Integer\tModifies water damage\r\n// damageIce\t- Integer\tModifies ice damage\r\n// damageThunder\t- Integer\tModifies thunder damage\r\n// damageDragon\t- Integer\tModifies dragon damage\r\n// defense\t- Integer\tModifies the character's defense\r\n// health\t- Integer\tModifies the character's maximum health\r\n// sharpnessBonus\t- Integer\tModifies the maximum sharpness of a weapon\r\n// resistAll\t- Integer\tModifies all elemental resistances\r\n// resistFire\t- Integer\tModifies fire resistance\r\n// resistWater\t- Integer\tModifies water resistance\r\n// resistIce\t- Integer\tModifies ice resistance\r\n// resistThunder\t- Integer\tModifies thunder resistance\r\n// resistDragon\t- Integer\tModifies dragon resistance\r\n\r\n\tselectedArmorSet.activeParts.forEach(piece => {\r\n\t\t// add armor part defense to total defense status\r\n\t\tconst baseDefense = selectedArmorSet[piece].selected.defense ? selectedArmorSet[piece].selected.defense.base : 0;\r\n\t\tactiveDefenseObj['defense'] += baseDefense;\r\n\t\t\r\n\t\tconst resistances = selectedArmorSet[piece].selected.resistances ? Object.entries(selectedArmorSet[piece].selected.resistances) : Object.entries({ fire: 0, water: 0, ice: 0, thunder: 0, dragon: 0 });\r\n\r\n\t\tresistances.forEach(resistance => {\r\n\t\t\tactiveResistancesObj[resistance[0]] = activeResistancesObj[resistance[0]] + resistance[1]; \r\n\t\t});\r\n\t});\r\n\r\n\t// apply skill attack modifiers\r\n\tconst skillModifiers = [ { skillName: 'Attack Boost', ranks: [3,6,9,12,15,18,21] }, { skillName: 'Agitator', ranks: [4,8,12,16,20] }, { skillName: 'Peak Performance', ranks: [5,10,20] }, { skillName: 'Heroics', ranks: [5,10,15], percent: true}, { skillName: 'Fortify', ranks: [10], percent: true }, { skillName: 'Critical Eye', ranks: [3,6,10,15,20,25,30] }, { skillName: 'Maximum Might', ranks: [10,20,30] }, { skillName: 'Free Elem/Ammo Up', ranks: [0.33,0.66,1] } ];\r\n\r\n\t// loop through activeSkills and get modifiers\r\n\r\n\t// activeArmorSkills.forEach(activeSkill => {\r\n\t\t\r\n\t// });\r\n\r\n\tskillModifiers.forEach(skill => {\r\n\t\tconst modifierPattern = new RegExp(`(${skill.skillName})`, 'i');\r\n\t\t\r\n\t\tif(modifierPattern.test(activeSkillsText)) {\r\n\t\t\tif(skill.skillName === 'Attack Boost') {\r\n\t\t\t\tif(activeArmorSkills[skill.skillName].value >= 4) {\r\n\t\t\t\t\tlet rank = 0;\r\n\t\t\t\t\tif(activeArmorSkills[skill.skillName].value > skill.ranks.length) {\r\n\t\t\t\t\t\trank = skill.ranks[skill.ranks.length - 1];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\trank = skill.ranks[activeArmorSkills[skill.skillName].value - 1]\r\n\t\t\t\t\t}\r\n\t\t\t\t\thunterStatusModifiers['attack'][skill.skillName] = rank;\r\n\t\t\t\t\thunterStatusModifiers['affinity'][skill.skillName] = 5;\r\n\t\t\t\t} else {\r\n\t\t\t\t\thunterStatusModifiers['attack'][skill.skillName] = skill.ranks[activeArmorSkills[skill.skillName].value - 1];\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if(skill.skillName === 'Critical Eye') {\r\n\t\t\t\tlet rank = 0;\r\n\t\t\t\tif(activeArmorSkills[skill.skillName].value > skill.ranks.length) {\r\n\t\t\t\t\trank = skill.ranks[skill.ranks.length - 1];\r\n\t\t\t\t} else {\r\n\t\t\t\t\trank = skill.ranks[activeArmorSkills[skill.skillName].value - 1]\r\n\t\t\t\t}\r\n\t\t\t\thunterStatusModifiers['affinity'][skill.skillName] = rank;\r\n\t\t\t} else if (skill.skillName === 'Maximum Might') {\r\n\t\t\t\tlet rank = 0;\r\n\t\t\t\tif(activeArmorSkills[skill.skillName].value > skill.ranks.length) {\r\n\t\t\t\t\trank = skill.ranks[skill.ranks.length - 1];\r\n\t\t\t\t} else {\r\n\t\t\t\t\trank = skill.ranks[activeArmorSkills[skill.skillName].value - 1]\r\n\t\t\t\t}\r\n\t\t\t\thunterStatusModifiers['affinity'][skill.skillName] = rank;\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\t// Update Defense && Resistances with modifiers\r\n\tObject.entries(activeResistancesObj).forEach(resistance => {\r\n\t\tconst pattern = new RegExp(`(${resistance[0]} resistance)`, 'i');\r\n\t\t\r\n\t\tObject.entries(activeArmorSkills).forEach(skill => {\r\n\t\t\tif(pattern.test(skill[0])) {\r\n\t\t\t\tlet index = skill[1].value - 1;\r\n\t\t\t\t\r\n\t\t\t\tif(skill[1].value <= skill[1].ranks.length) {\r\n\t\t\t\t\tObject.entries(skill[1].ranks[index].modifiers).forEach(modifier => {\r\n\t\t\t\t\t\tif(modifier[0] === 'defense') {\r\n\t\t\t\t\t\t\tactiveDefenseObj['defense'] += modifier[1];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tactiveResistancesObj[resistance[0]] = activeResistancesObj[resistance[0]] + modifier[1];\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t});\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\t\r\n\t\t\t\t\tindex = skill[1].ranks.length - 1;\r\n\t\t\t\t\tObject.entries(skill[1].ranks[index].modifiers).forEach(modifier => {\r\n\t\t\t\t\t\r\n\t\t\t\t\t\tif(modifier[0] === 'defense') {\r\n\t\t\t\t\t\t\tactiveDefenseObj['defense'] += modifier[1];\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tactiveResistancesObj[resistance[0]] = activeResistancesObj[resistance[0]] + modifier[1];\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n\r\n\tconst displayDefenseStatus = Object.entries(activeDefenseObj).map((defense, index) => {\r\n\t\treturn <li key={index}><span>{defense[0]}</span><span>{defense[1]}</span></li>\r\n\t});\r\n\r\n\tconst displayResistanceStatus = Object.entries(activeResistancesObj).map((resistance, index) => {\r\n\t\treturn <li key={index}><span>{resistance[0]}</span><span>{resistance[1]}</span></li>\r\n\t});\r\n\r\n\treturn (\r\n\t\t<div className=\"status-list hunter-ui-card results\">\r\n\t\t\t<h2>Attack Status</h2>\r\n\t\t\t<ul className=\"attack-status-list\">\r\n\t\t\t\t<AttackStatus selectedWeapon={selectedWeapon} attackModifiers={hunterStatusModifiers.attack} />\r\n\t\t\t\t<ElementStatus selectedWeapon={selectedWeapon} elementModifiers={hunterStatusModifiers.attack} />\r\n\t\t\t\t<SharpnessStatus selectedWeapon={selectedWeapon} />\r\n\t\t\t\t<AffinityStatus affinityModifiers={hunterStatusModifiers.affinity} />\r\n\t\t\t</ul>\r\n\t\t\t<h2>Defense Status</h2>\r\n\t\t\t<ul className=\"defense-status-list\">\r\n\t\t\t\t{displayDefenseStatus}\r\n\t\t\t\t{displayResistanceStatus}\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default StatusList;","import React, { Component } from 'react';\r\n\r\n//importing Components\r\nimport SkillsList from './component_skills_list';\r\nimport StatusList from './component_status_list';\r\n\r\nclass HunterStatus extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tactiveSkills: {}\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\t// Skills\r\n\t\t// id property is 'modifier id'\r\n\t\t// skill property is 'skill id'\r\n\r\n\t\tconsole.log('hunter status component rerendered...');\r\n\r\n\t\tlet activeArmorSkills = {};\r\n\t\tlet activeSkillsText = '';\r\n\t\tconst { skillsList, selectedArmorSet, onSkillModifier } = this.props;\r\n\t\t\r\n\t\tselectedArmorSet.activeParts.forEach(piece => {\r\n\t\t\tconst { partDecos } = selectedArmorSet[piece];\r\n\r\n\t\t\tif(selectedArmorSet[piece].selected.skills) {\r\n\t\t\t\tselectedArmorSet[piece].selected.skills.forEach(armorSkill => {\r\n\t\t\t\r\n\t\t\t\t\tconst pattern = new RegExp(`(${armorSkill.skillName})`, 'gi');\r\n\t\t\t\t\tconst id = armorSkill.skill;\r\n\t\t\t\t\tlet value = armorSkill.level;\r\n\r\n\t\t\t\t\tif(pattern.test(activeSkillsText)) {\r\n\t\t\t\t\t\tactiveArmorSkills[armorSkill.skillName]['value'] = activeArmorSkills[armorSkill.skillName]['value'] + value;\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tlet ranks = [];\r\n\t\t\t\t\t\tlet description = '';\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// get Skill ranks..\r\n\t\t\t\t\t\tranks = skillsList[id - 1]['ranks'];\r\n\t\t\t\t\t\tdescription = skillsList[id - 1]['description'];\r\n\r\n\t\t\t\t\t\tactiveArmorSkills = { [armorSkill.skillName]: { id, value, ranks, description, skillName: armorSkill.skillName }, ...activeArmorSkills };\r\n\t\t\t\t\t\tactiveSkillsText += `${armorSkill.skillName} `;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif(partDecos && partDecos.length > 0) {\r\n\t\t\t\t\r\n\t\t\t\tpartDecos.forEach(deco => {\r\n\t\t\t\t\tif(!deco.skillName) return;\r\n\r\n\t\t\t\t\tconst pattern = new RegExp(`(${deco.skillName})`, 'gi');\r\n\t\t\t\t\tlet value = deco.level;\r\n\r\n\t\t\t\t\tif(pattern.test(activeSkillsText)) {\t\t\t\t\t\r\n\t\t\t\t\t\tactiveArmorSkills[deco.skillName]['value'] = activeArmorSkills[deco.skillName]['value'] + value;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tlet ranks = [];\r\n\t\t\t\t\t\tlet description = '';\r\n\t\t\t\t\t\tskillsList.forEach(skill => {\r\n\t\t\t\t\t\t\tif(skill.name === deco.skillName) {\r\n\t\t\t\t\t\t\t\tranks = skill.ranks;\r\n\t\t\t\t\t\t\t\tdescription = skill.description;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tactiveArmorSkills = { [deco.skillName]: { value, ranks, description, skillName: deco.skillName }, ...activeArmorSkills };\r\n\t\t\t\t\t\tactiveSkillsText += `${deco.skillName} `;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Sort active armor skills Obj and convert it to an array..\r\n\t\tconst activeArmorSkillsArray = Object.entries(activeArmorSkills).sort((a,b) => a[0] > b[0] ? 1 : -1);\r\n\t\t\r\n\t\tconst displayActiveSkills = activeArmorSkillsArray.map((skill, index) => {\r\n\t\t\tconst currentValueClass = skill[1].value > skill[1].ranks.length ? 'exceeded' : '';\r\n\t\t\treturn <li key={index}><div>{skill[0]}<ul>{skill[1].ranks.map((rank, ranksIndex) => (ranksIndex + 1) <= skill[1].value ? <li key={ranksIndex} className=\"active\"></li> : <li key={ranksIndex}></li> )}</ul></div><span className={currentValueClass}>{skill[1].value}</span></li>\r\n\t\t});\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"hunter-status\">\r\n\t\t\t\t<SkillsList activeArmorSkills={activeArmorSkills} displayActiveSkills={displayActiveSkills} selectedArmorSet={this.props.selectedArmorSet} />\r\n            \t<StatusList activeArmorSkills={activeArmorSkills} displayActiveSkills={displayActiveSkills} selectedArmorSet={this.props.selectedArmorSet} selectedWeapon={this.props.selectedArmorSet.weapon.selected} activeSkillsText={activeSkillsText} onSkillModifier={onSkillModifier} />\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default HunterStatus;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport getWeaponList from './actions/action_getWeaponList';\nimport getArmorList from './actions/action_getArmorList';\nimport getCharmList from './actions/action_getCharmList';\nimport getDecorationList from './actions/action_getDecorationList';\nimport getSkillsList from './actions/action_getSkillsList';\n\nimport './App.css';\n\n// imported Components\nimport MainSearch from './components/component_main_search';\nimport ArmorLoadoutBuilder from './components/component_armorLoadoutBuilder';\nimport HunterStatus from './components/component_hunter_status';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = { \n      weaponList: [],\n      armorList: [],\n      charmList: [],\n      decorationList: [],\n      skillsList: [],\n      selectedArmorSet: {\n        activeParts: [],\n        activeSkills: {},\n        activeSkillsText: '',\n        selectedDecoList: {},\n        weapon: {\n          pieces: [],\n          partDecos: null,\n          searchString: '',\n          decoSearchString: '',\n          selected: null,\n          results: [],\n          decoResults: [],\n         \n        },\n        head: {\n          pieces: [],\n          partDecos: [],\n          searchString: '',\n          selected: null,\n          results: [],\n          decoResults: [],\n         \n        }, \n        chest: {\n          pieces: [],\n          partDecos: [],\n          searchString: '',\n          selected: null,\n          results: [],\n          decoResults: [],\n          \n        }, \n        gloves: {\n          pieces: [],\n          partDecos: [],\n          searchString: '',\n          selected: null,\n          results: [],\n          decoResults: [],\n         \n        }, \n        waist: {\n          pieces: [],\n          partDecos: [],\n          searchString: '',\n          selected: null,\n          results: [],\n          decoResults: [],\n       \n        }, \n        legs: {\n          pieces: [],\n          partDecos: [],\n          searchString: '',\n          selected: null,\n          results: [],\n          decoResults: [],\n      \n        },\n        charm: {\n          pieces: [],\n          partDecos: [],\n          searchString: '',\n          selected: null,\n          results: [],\n          decoResults: []\n        }\n      }\n    }\n  }\n\n  componentWillMount() {\n    this.props.getWeaponList();\n    this.props.getArmorList();\n    this.props.getCharmList();\n    this.props.getDecorationList();\n    this.props.getSkillsList();\n\n    // console.log('App Component will mount..');\n  }\n\n  componentDidMount() {\n    // console.log('App Component did mount..');\n    // console.log(this.props.armorList);\n\n    // this.setState({ armorList: [...this.props.armorList] });\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) { \n    // fetch('./armorList.json')\n    //   .then(res => {\n    //     return res.json();\n    //   })\n    //   .then(data => {\n    //     console.log(data);\n    //   })\n    //   .catch(err => {\n    //     console.log(err);\n    //   });\n\n    if(this.props.armorList !== prevProps.armorList && this.props.weaponList !== prevProps.weaponList) {\n      \n      console.log('updating armorlist');\n      \n      let headPieces = [];\n      let chestPieces = [];\n      let glovesPieces = [];\n      let waistPieces = [];\n      let legsPieces = [];\n\n      this.props.armorList.forEach(armor => {\n        switch (armor.type) {\n          case 'head':\n            headPieces = [armor, ...headPieces];\n            break;\n          case 'chest':\n            chestPieces = [armor, ...chestPieces];\n            break;\n          case 'gloves':\n            glovesPieces = [armor, ...glovesPieces];\n            break;\n          case 'waist':\n            waistPieces = [armor, ...waistPieces];\n            break;\n          case 'legs':\n            legsPieces = [armor, ...legsPieces];\n            break;\n          default:\n            break;\n        }\n      });\n\n      this.setState(prevState => ({ \n        ...prevState,\n        weaponList: [...this.props.weaponList],\n        armorList: [...this.props.armorList],\n        charmList: [...this.props.charmList],\n        decorationList: [...this.props.decorationList],\n        skillsList: [...this.props.skillsList],\n        selectedArmorSet: {\n          ...prevState.selectedArmorSet,\n          head: {\n            ...prevState.selectedArmorSet.head,\n            pieces: headPieces\n          },\n          chest: {\n            ...prevState.selectedArmorSet.chest,\n            pieces: chestPieces\n          },\n          gloves: {\n            ...prevState.selectedArmorSet.gloves,\n            pieces: glovesPieces\n          },\n          waist: {\n            ...prevState.selectedArmorSet.waist,\n            pieces: waistPieces\n          },\n          legs: {\n            ...prevState.selectedArmorSet.legs,\n            pieces: legsPieces\n          },\n        } \n      }));\n    }\n\n    console.log('App Component Updated!');\n  }\n\n  onSelectedWeapon = (e) => {\n\n    const weaponName = e.target.getAttribute('data-selected-weapon');\n    const index = e.target.getAttribute('data-selected-index');\n\n    const weaponList = this.state.weaponList;\n    let updatedActivePartsArray = [];\n    let selected = {};\n    \n    const activePartsRegEx =  new RegExp(`(weapon)`, 'gi');\n    const activePartsText = this.state.selectedArmorSet.activeParts.toString();\n\n    if(weaponList[index]['name'] === weaponName) {\n      selected = weaponList[index];\n    }\n\n    if(activePartsRegEx.test(activePartsText)) {\n      updatedActivePartsArray = [...this.state.selectedArmorSet.activeParts];\n    } else {\n      updatedActivePartsArray = ['weapon', ...this.state.selectedArmorSet.activeParts];\n    }\n\n    const decoState = selected.slots.map(slot => ({ rank: slot.rank, active: false, searchString: '' } ));\n\n    this.setState(prevState => ({\n      selectedArmorSet: {\n        ...prevState.selectedArmorSet,\n        activeParts: updatedActivePartsArray,\n        weapon: {\n          ...prevState.selectedArmorSet.weapon,\n          partDecos: decoState,\n          selected,\n          results: []\n        }\n      }\n    }));\n  }\n\n  onSelectedDeco = (e, decoResults) => {\n    \n    const decoIndex = parseInt(e.target.getAttribute('data-deco-index'));\n    const slotIndex = parseInt(e.target.getAttribute('data-slot-index'));\n    \n    const part = e.target.getAttribute('data-part');\n    // const { partDecos, decoResults } = this.state.selectedArmorSet[part];\n    const { partDecos } = this.state.selectedArmorSet[part];\n\n    const updatePartDecos = partDecos.map((slot, index) => {\n      if(slotIndex === index) {\n        return { ...slot, active: false, ...decoResults[decoIndex] } \n      } else {\n        return { ...slot, active: false }\n      }\n    });\n    \n    this.setState(prevState => ({\n      ...prevState,\n      selectedArmorSet: {\n        ...prevState.selectedArmorSet,\n        [part]: {\n          ...prevState.selectedArmorSet[part],\n          partDecos: updatePartDecos,\n          decoResults: []\n        }\n      }\n\n    }));\n  }\n\n  onSelectedCharm = (e) => {\n\n    const charmName = e.target.getAttribute('data-selected-rank');\n    const parentIndex = e.target.getAttribute('data-parent-index');\n    const index = e.target.getAttribute('data-index');\n\n    const charmList = this.state.charmList;\n    let updatedActivePartsArray = [];\n    let selected = {};\n    \n    const activePartsRegEx =  new RegExp(`(charm)`, 'gi');\n    const activePartsText = this.state.selectedArmorSet.activeParts.toString();\n\n    if(charmList[parentIndex]['ranks'][index]['name'] === charmName) {\n      selected = charmList[parentIndex]['ranks'][index];\n    }\n\n    if(activePartsRegEx.test(activePartsText)) {\n      updatedActivePartsArray = [...this.state.selectedArmorSet.activeParts];\n    } else {\n      updatedActivePartsArray = ['charm', ...this.state.selectedArmorSet.activeParts];\n    }\n\n    this.setState(prevState => ({\n      ...prevState,\n      selectedArmorSet: {\n        ...prevState.selectedArmorSet,\n        activeParts: updatedActivePartsArray,\n        charm: {\n          ...prevState.selectedArmorSet.charm,\n          selected,\n          results: []\n        }\n      }\n    }));\n  }\n\n  onSelectedArmor = (e) => {\n\n    const armorType = e.target.getAttribute('data-equipment-type') ? e.target.getAttribute('data-equipment-type') : '';\n    const armorName = e.target.getAttribute('data-selected-armor') ? e.target.getAttribute('data-selected-armor') : '';\n    const index = e.target.getAttribute('data-selected-index');\n    const searchBar = e.target.getAttribute('data-search-bar');\n    \n    // check if an equipment is selected..\n    let selectedArmor = {};\n    \n    // check if selecting/clicking a search result from the Main Search Bar\n    if(searchBar === null) {\n      if(this.state.selectedArmorSet[armorType]['pieces'][index]['name'] === armorName) {\n        selectedArmor = this.state.selectedArmorSet[armorType]['pieces'][index];\n      }\n    } else {\n      selectedArmor = this.state.armorList[index];\n    }\n    \n    // check if part is already selected..\n    const activePartsRegEx =  new RegExp(`(${armorType})`, 'gi');\n    const activePartsText = this.state.selectedArmorSet.activeParts.toString();\n    let updatedActivePartsArray = [];\n\n    if(activePartsRegEx.test(activePartsText)) {\n      updatedActivePartsArray = [...this.state.selectedArmorSet.activeParts];\n    } else {\n      updatedActivePartsArray = [armorType, ...this.state.selectedArmorSet.activeParts];\n    }\n    \n    // setting up the Equipment Slots state\n    const decoState = selectedArmor.slots.map(slot => ({ rank: slot.rank, active: false, searchString: '' } ));\n\n    this.setState(prevState => ({\n      selectedArmorSet: {\n        ...prevState.selectedArmorSet,\n        activeParts: updatedActivePartsArray,\n        [armorType]: {\n          ...prevState.selectedArmorSet[armorType],\n          partDecos: decoState,\n          selected: selectedArmor,\n          results: []\n        }\n      }\n    }));\n  }\n\n  onRemoveDecoPiece = (e) => {\n    \n    const part = e.target.getAttribute('data-part');\n    const slotIndex = parseInt(e.target.getAttribute('data-slot-index'));\n    const partDecos = this.state.selectedArmorSet[part].partDecos;\n    let updatePartDecos = partDecos.map((slot, index) => {\n\n      if(slotIndex === index) {\n        return { rank: slot.rank, active: false, searchString: '' }  \n      } else {\n        return { ...slot, active: false }\n      }\n\n    });\n\n    this.setState(prevState => ({\n      ...prevState,\n      selectedArmorSet: {\n        ...prevState.selectedArmorSet,\n        [part]: {\n          ...prevState.selectedArmorSet[part],\n          partDecos: updatePartDecos,\n          decoResults: []\n        }\n      }\n    }));\n  }\n\n  onRemoveEquipmentPart = (e) => {\n    const armorPiece = e.target.getAttribute('data-equipment-type');\n\n    this.setState(prevState => ({\n      selectedArmorSet: {\n        ...prevState.selectedArmorSet,\n        activeParts: prevState.selectedArmorSet.activeParts.filter(part => part !== armorPiece),\n        [armorPiece]: {\n          ...prevState.selectedArmorSet[armorPiece],\n          partDecos: null,\n          searchString: '',\n          selected: null,\n          results: []\n        }\n      }\n    }));\n  }\n\n  // skill modifiers functions\n  onSkillModifier = (skillObject) => {\n\n    if(!skillObject) return;\n\n    const currentSkillLevel = skillObject.value;\n    const skillLevels = skillObject.ranks;\n    let rank = currentSkillLevel - 1;\n\n    if(currentSkillLevel > skillLevels.length) {\n      rank = skillLevels[skillLevels.length - 1];\n    }\n\n    const skillModifiers = Object.entries(skillLevels[rank].modifiers);\n\n    if(skillModifiers.length === 0) return {};\n\n    return { }\n  }\n\n  onActiveSkills = (payload) => {\n    this.setState(prevState => ({\n      ...prevState,\n      selectedArmorSet: {\n        ...prevState.selectedArmorSet,\n        activeSkills: payload\n      }\n        \n    }));\n  }\n\n  render() {\n\n    // console.log(this.state.weaponList);\n    // console.log(this.state.decorationList);\n    // console.log(this.state.skillsList);\n    // console.log(this.state.selectedArmorSet);\n    // console.log(this.state.charmList);\n\n    // this.state.skillsList.forEach(skill => {\n    //   const pattern =  new RegExp('(attack)', 'i');\n\n    //   if(pattern.test(skill.description)) {\n    //     console.log(skill);\n    //   }\n    // });\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"container\">\n            <h1><a href=\"/\">SapphireStar's Guide</a></h1>\n            <MainSearch armorList={this.state.armorList} onSelectedArmor={this.onSelectedArmor} />\n          </div>\n        </header>\n        <div className=\"container\">\n          <div className=\"main-content\">\n            <ArmorLoadoutBuilder weaponList={this.state.weaponList} armorList={this.state.armorList} charmList={this.state.charmList} decorationList={this.state.decorationList} selectedArmorSet={this.state.selectedArmorSet} onSelectedArmor={this.onSelectedArmor} onSelectedDeco={this.onSelectedDeco} onRemoveDecoPiece={this.onRemoveDecoPiece} onRemoveEquipmentPart={this.onRemoveEquipmentPart} clearedArmorPart={this.state.clearedArmorPart} onSelectedWeapon={this.onSelectedWeapon} onSelectedCharm={this.onSelectedCharm} onCharmInputSearch={this.onCharmInputSearch} />\n            <HunterStatus skillsList={this.state.skillsList} selectedArmorSet={this.state.selectedArmorSet} onSkillModifier={this.onSkillModifier} onActiveSkills={this.onActiveSkills} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n weaponList: state.weaponListReducer.result,\n armorList: state.armorListReducer.result,\n charmList: state.charmListReducer.result,\n decorationList: state.decorationListReducer.result,\n skillsList: state.skillsListReducer.result,\n});\n\nconst mapDispatchToProps = dispatch => ({\n getWeaponList: () => dispatch(getWeaponList()),\n getArmorList: () => dispatch(getArmorList()),\n getCharmList: () => dispatch(getCharmList()),\n getDecorationList: () => dispatch(getDecorationList()),\n getSkillsList: () => dispatch(getSkillsList()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport configureStore from './store';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<Provider store={configureStore()}>\n\t\t<App />\n\t</Provider>\n\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/rootReducer';\r\nexport default function configureStore(initialState={}) {\r\n return createStore(\r\n   rootReducer,\r\n   initialState,\r\n   applyMiddleware(thunk)\r\n );\r\n}"],"sourceRoot":""}